gpt-3.5-turbo_EqualAssertCF_response,gpt-3.5-turbo_EqualAssertCF_mitigation_response,gpt-3.5-turbo_EqualAssertCF_inline_response,gpt-3.5-turbo_EqualAssertCF_CoT_response,gpt-3.5-turbo_EqualAssertCF_EXM,gpt-3.5-turbo_EqualAssertCF_mitigation_EXM,gpt-3.5-turbo_EqualAssertCF_inline_EXM,gpt-3.5-turbo_EqualAssertCF_CoT_EXM,gpt-3.5-turbo_EqualAssertCF_retrieval,gpt-3.5-turbo_EqualAssertCF_mitigation_retrieval,gpt-3.5-turbo_EqualAssertCF_inline_retrieval,gpt-3.5-turbo_EqualAssertCF_CoT_retrieval,gpt-3.5-turbo_EqualAssertCF_bleu,gpt-3.5-turbo_EqualAssertCF_mitigation_bleu,gpt-3.5-turbo_EqualAssertCF_inline_bleu,gpt-3.5-turbo_EqualAssertCF_CoT_bleu
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }']","['public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }']","['public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}']","['public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = getRedisTemplate().boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = this.getRedisTemplate().boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = getRedisTemplate().boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = redisTemplate.boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = this.getRedisTemplate().boundValueOps(key);\n    ops.set(value); \n}', 'public void put(String key,String value) { \n    if (key == null) { \n        Assert.notNull(key,""\'key\' must not be null.""); \n    } \n    if (value == null) { \n        Assert.notNull(value,""\'value\' must not be null.""); \n    } \n    BoundValueOperations<String,String> ops = getRedisTemplate().boundValueOps(key);\n    ops.set(value); \n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.2759228470835991,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }']","['public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }']","['public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { \n    if (certificationRequestInfo == null) { \n        requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); \n    } \n    if (signatureAlgorithmIdentifier == null) { \n        requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); \n    } \n    this.signature = requireNonNull(signature, ""signature is null"").clone(); \n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); \n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { \n    if (certificationRequestInfo == null) { \n        requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); \n    } \n    if (signatureAlgorithmIdentifier == null) { \n        requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); \n    } \n    this.signature = requireNonNull(signature, ""signature is null"").clone(); \n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); \n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { \n    if (certificationRequestInfo == null) { \n        requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); \n    } \n    if (signatureAlgorithmIdentifier == null) { \n        requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); \n    } \n    this.signature = requireNonNull(signature, ""signature is null"").clone(); \n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); \n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { \n    if (certificationRequestInfo == null) { \n        requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); \n    } \n    if (signatureAlgorithmIdentifier == null) { \n        requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); \n    } \n    this.signature = requireNonNull(signature, ""signature is null"").clone(); \n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); \n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { \n    if (certificationRequestInfo == null) { \n        requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); \n    } \n    if (signatureAlgorithmIdentifier == null) { \n        requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); \n    } \n    this.signature = requireNonNull(signature, ""signature is null"").clone(); \n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); \n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { \n    if (certificationRequestInfo == null) { \n        requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); \n    } \n    if (signatureAlgorithmIdentifier == null) { \n        requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); \n    } \n    this.signature = requireNonNull(signature, ""signature is null"").clone(); \n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); \n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { \n    if (certificationRequestInfo == null) { \n        requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); \n    } \n    if (signatureAlgorithmIdentifier == null) { \n        requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); \n    } \n    this.signature = requireNonNull(signature, ""signature is null"").clone(); \n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); \n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { \n    if (certificationRequestInfo == null) { \n        requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); \n    } \n    if (signatureAlgorithmIdentifier == null) { \n        requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); \n    } \n    this.signature = requireNonNull(signature, ""signature is null"").clone(); \n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); \n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { \n    if (certificationRequestInfo == null) { \n        requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); \n    } \n    if (signatureAlgorithmIdentifier == null) { \n        requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); \n    } \n    this.signature = requireNonNull(signature, ""signature is null"").clone(); \n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); \n}']","['public CertificationRequest(CertificationRequestInfo certificationRequestInfo, SignatureAlgorithmIdentifier signatureAlgorithmIdentifier, byte[] signature) {\n    if (certificationRequestInfo == null) {\n        requireNonNull(certificationRequestInfo, ""certificationRequestInfo is null"");\n    }\n    if (signatureAlgorithmIdentifier == null) {\n        requireNonNull(signatureAlgorithmIdentifier, ""signatureAlgorithmIdentifier is null"");\n    }\n    this.signature = requireNonNull(signature, ""signature is null"").clone();\n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(), encodeSequence(signatureAlgorithmIdentifier.getEncoded()), encodeBitString(0, signature));\n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo, SignatureAlgorithmIdentifier signatureAlgorithmIdentifier, byte[] signature) {\n    if (certificationRequestInfo == null) {\n        requireNonNull(certificationRequestInfo, ""certificationRequestInfo is null"");\n    }\n    if (signatureAlgorithmIdentifier == null) {\n        requireNonNull(signatureAlgorithmIdentifier, ""signatureAlgorithmIdentifier is null"");\n    }\n    this.signature = requireNonNull(signature, ""signature is null"").clone();\n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(), encodeSequence(signatureAlgorithmIdentifier.getEncoded()), encodeBitString(0, signature));\n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo, SignatureAlgorithmIdentifier signatureAlgorithmIdentifier, byte[] signature) {\n    if (certificationRequestInfo == null) {\n        requireNonNull(certificationRequestInfo, ""certificationRequestInfo is null"");\n    }\n    if (signatureAlgorithmIdentifier == null) {\n        requireNonNull(signatureAlgorithmIdentifier, ""signatureAlgorithmIdentifier is null"");\n    }\n    this.signature = requireNonNull(signature, ""signature is null"").clone();\n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(), encodeSequence(signatureAlgorithmIdentifier.getEncoded()), encodeBitString(0, signature));\n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo, SignatureAlgorithmIdentifier signatureAlgorithmIdentifier, byte[] signature) {\n    if (certificationRequestInfo == null) {\n        requireNonNull(certificationRequestInfo, ""certificationRequestInfo is null"");\n    }\n    if (signatureAlgorithmIdentifier == null) {\n        requireNonNull(signatureAlgorithmIdentifier, ""signatureAlgorithmIdentifier is null"");\n    }\n    this.signature = requireNonNull(signature, ""signature is null"").clone();\n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(), encodeSequence(signatureAlgorithmIdentifier.getEncoded()), encodeBitString(0, signature));\n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo, SignatureAlgorithmIdentifier signatureAlgorithmIdentifier, byte[] signature) {\n    if (certificationRequestInfo == null) {\n        requireNonNull(certificationRequestInfo, ""certificationRequestInfo is null"");\n    }\n    if (signatureAlgorithmIdentifier == null) {\n        requireNonNull(signatureAlgorithmIdentifier, ""signatureAlgorithmIdentifier is null"");\n    }\n    this.signature = requireNonNull(signature, ""signature is null"").clone();\n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(), encodeSequence(signatureAlgorithmIdentifier.getEncoded()), encodeBitString(0, signature));\n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo, SignatureAlgorithmIdentifier signatureAlgorithmIdentifier, byte[] signature) {\n    if (certificationRequestInfo == null) {\n        requireNonNull(certificationRequestInfo, ""certificationRequestInfo is null"");\n    }\n    if (signatureAlgorithmIdentifier == null) {\n        requireNonNull(signatureAlgorithmIdentifier, ""signatureAlgorithmIdentifier is null"");\n    }\n    this.signature = requireNonNull(signature, ""signature is null"").clone();\n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(), encodeSequence(signatureAlgorithmIdentifier.getEncoded()), encodeBitString(0, signature));\n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo, SignatureAlgorithmIdentifier signatureAlgorithmIdentifier, byte[] signature) {\n    if (certificationRequestInfo == null) {\n        requireNonNull(certificationRequestInfo, ""certificationRequestInfo is null"");\n    }\n    if (signatureAlgorithmIdentifier == null) {\n        requireNonNull(signatureAlgorithmIdentifier, ""signatureAlgorithmIdentifier is null"");\n    }\n    this.signature = requireNonNull(signature, ""signature is null"").clone();\n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(), encodeSequence(signatureAlgorithmIdentifier.getEncoded()), encodeBitString(0, signature));\n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo, SignatureAlgorithmIdentifier signatureAlgorithmIdentifier, byte[] signature) {\n    if (certificationRequestInfo == null) {\n        requireNonNull(certificationRequestInfo, ""certificationRequestInfo is null"");\n    }\n    if (signatureAlgorithmIdentifier == null) {\n        requireNonNull(signatureAlgorithmIdentifier, ""signatureAlgorithmIdentifier is null"");\n    }\n    this.signature = requireNonNull(signature, ""signature is null"").clone();\n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(), encodeSequence(signatureAlgorithmIdentifier.getEncoded()), encodeBitString(0, signature));\n}', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo, SignatureAlgorithmIdentifier signatureAlgorithmIdentifier, byte[] signature) {\n    if (certificationRequestInfo == null) {\n        requireNonNull(certificationRequestInfo, ""certificationRequestInfo is null"");\n    }\n    if (signatureAlgorithmIdentifier == null) {\n        requireNonNull(signatureAlgorithmIdentifier, ""signatureAlgorithmIdentifier is null"");\n    }\n    this.signature = requireNonNull(signature, ""signature is null"").clone();\n    this.encoded = encodeSequence(certificationRequestInfo.getEncoded(), encodeSequence(signatureAlgorithmIdentifier.getEncoded()), encodeBitString(0, signature));\n}']",False,False,False,False,False,False,False,False,0.07688419959265248,0.07688419959265248,0.07688419959265248,0.7264444538040294
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }']","['static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }']","['static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier);\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head,() -> tailSupplier.get());\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head,() -> { return tailSupplier.get(); });\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head,() -> { \n        return tailSupplier.get(); \n    });\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head,() -> { \n        Stream<T> stream = tailSupplier.get(); \n        return stream; \n    });\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head,() -> { \n        Stream<T> stream = tailSupplier.get(); \n        return stream; \n    });\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head,() -> { \n        Stream<T> stream = tailSupplier.get(); \n        return stream; \n    });\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head,() -> { \n        Stream<T> stream = tailSupplier.get(); \n        return stream; \n    });\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head,() -> { \n        Stream<T> stream = tailSupplier.get(); \n        return stream; \n    });\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head,() -> { \n        Stream<T> stream = tailSupplier.get(); \n        return stream; \n    });\n}']","['static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier.get());\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier.get());\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier.get());\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier.get());\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier.get());\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier.get());\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier.get());\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier.get());\n}', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { \n    if (tailSupplier == null) { \n        Objects.requireNonNull(tailSupplier,""tailSupplier is null""); \n    } \n    return new Stream.Cons<>(head, tailSupplier.get());\n}']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.3644207941398497
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }']","['DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }']","['DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }']","['DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { \n    if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } \n    if (connConfig == null) { Objects.requireNonNull(connConfig); } \n    if (id == null) { Objects.requireNonNull(id); } \n    if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } \n    this.kafkaProducer = kafkaProducer; \n    this.connConfig = connConfig; \n    this.connectorTaskId = id; \n    this.errorHandlingMetrics = errorHandlingMetrics; \n    this.dlqTopicName = connConfig.dlqTopicName().trim();\n}', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { \n    if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } \n    if (connConfig == null) { Objects.requireNonNull(connConfig); } \n    if (id == null) { Objects.requireNonNull(id); } \n    if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } \n    this.kafkaProducer = kafkaProducer; \n    this.connConfig = connConfig; \n    this.connectorTaskId = id; \n    this.errorHandlingMetrics = errorHandlingMetrics; \n    this.dlqTopicName = connConfig.dlqTopicName().trim();\n}', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { \n    if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } \n    if (connConfig == null) { Objects.requireNonNull(connConfig); } \n    if (id == null) { Objects.requireNonNull(id); } \n    if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } \n    this.kafkaProducer = kafkaProducer; \n    this.connConfig = connConfig; \n    this.connectorTaskId = id; \n    this.errorHandlingMetrics = errorHandlingMetrics; \n    this.dlqTopicName = connConfig.dlqTopicName().trim();\n}', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { \n    if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } \n    if (connConfig == null) { Objects.requireNonNull(connConfig); } \n    if (id == null) { Objects.requireNonNull(id); } \n    if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } \n    this.kafkaProducer = kafkaProducer; \n    this.connConfig = connConfig; \n    this.connectorTaskId = id; \n    this.errorHandlingMetrics = errorHandlingMetrics; \n    this.dlqTopicName = connConfig.dlqTopicName().trim();\n}', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { \n    if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } \n    if (connConfig == null) { Objects.requireNonNull(connConfig); } \n    if (id == null) { Objects.requireNonNull(id); } \n    if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } \n    this.kafkaProducer = kafkaProducer; \n    this.connConfig = connConfig; \n    this.connectorTaskId = id; \n    this.errorHandlingMetrics = errorHandlingMetrics; \n    this.dlqTopicName = connConfig.dlqTopicName().trim();\n}', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { \n    if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } \n    if (connConfig == null) { Objects.requireNonNull(connConfig); } \n    if (id == null) { Objects.requireNonNull(id); } \n    if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } \n    this.kafkaProducer = kafkaProducer; \n    this.connConfig = connConfig; \n    this.connectorTaskId = id; \n    this.errorHandlingMetrics = errorHandlingMetrics; \n    this.dlqTopicName = connConfig.dlqTopicName().trim();\n}', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { \n    if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } \n    if (connConfig == null) { Objects.requireNonNull(connConfig); } \n    if (id == null) { Objects.requireNonNull(id); } \n    if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } \n    this.kafkaProducer = kafkaProducer; \n    this.connConfig = connConfig; \n    this.connectorTaskId = id; \n    this.errorHandlingMetrics = errorHandlingMetrics; \n    this.dlqTopicName = connConfig.dlqTopicName().trim();\n}', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { \n    if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } \n    if (connConfig == null) { Objects.requireNonNull(connConfig); } \n    if (id == null) { Objects.requireNonNull(id); } \n    if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } \n    this.kafkaProducer = kafkaProducer; \n    this.connConfig = connConfig; \n    this.connectorTaskId = id; \n    this.errorHandlingMetrics = errorHandlingMetrics; \n    this.dlqTopicName = connConfig.dlqTopicName().trim();\n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}']","['public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}']","['public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { return new OnmsTopologyVertex(Objects.requireNonNull(id,""id is null,cannot create vertex""),label,address,iconKey); }']","['public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) {\n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey);\n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) {\n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey);\n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) {\n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey);\n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) {\n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey);\n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) {\n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey);\n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) {\n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey);\n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) {\n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey);\n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) {\n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey);\n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) {\n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey);\n}']",False,False,False,False,True,False,False,True,0.0,0.10680569840430586,0.10010151457754103,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }']","['public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}']","['public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}']","['```java\npublic void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(SQLUtil.sanitizeParameter(query)); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}\n```', '```java\npublic void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(SQLUtil.sanitizeParameter(query)); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}\n```', '```java\npublic void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(SQLUtil.sanitizeParameter(query)); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}\n```', '```java\npublic void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(SQLUtil.sanitizeParameter(query)); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}\n```', '```java\npublic void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(SQLUtil.sanitizeParameter(query)); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}\n```', '```java\npublic void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(SQLUtil.sanitizeParameter(query)); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}\n```', '```java\npublic void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(SQLUtil.sanitizeParameter(query)); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}\n```', '```java\npublic void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(SQLUtil.sanitizeParameter(query)); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}\n```', '```java\npublic void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(SQLUtil.sanitizeParameter(query)); \n    if (s == null) { \n        assertNotNull(s); \n    } \n    assertEquals(StringPool.BLANK, s); \n}\n```']",True,True,False,False,False,False,False,False,0.0,0.0,0.8153551038173115,0.7172835948406505
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return new ArrayList<>();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return Collections.emptyList();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return new LinkedList<>();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new LinkedList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return new ArrayList<Element>();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<Element>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return Collections.emptyList();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return new LinkedList<Element>();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new LinkedList<Element>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return new ArrayList<Element>();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<Element>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return Collections.emptyList();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return new LinkedList<>();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new LinkedList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { <START>return new LinkedList<Element>();<END> } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new LinkedList<Element>(); }']","['public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new LinkedList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new LinkedList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<Element>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<Element>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new LinkedList<Element>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new LinkedList<Element>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Arrays.asList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Arrays.asList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Arrays.asList(new Element[0]); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Arrays.asList(new Element[0]); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<Element>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<Element>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new LinkedList<Element>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new LinkedList<Element>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }']","['public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }']","['public List<Element> previousElementSiblings() { \n    if (parentNode == null) { \n        return new ArrayList<>(); \n    } \n    List<Element> siblings = parent().childElementsList(); \n    int index = indexInList(this,siblings); \n    if (index == null) { \n        Validate.notNull(index); \n    } \n    if (index > 0 && index < siblings.size()) { \n        return siblings.subList(0,index); \n    } \n    return new ArrayList<>(); \n}', 'public List<Element> previousElementSiblings() { \n    if (parentNode == null) { \n        return Collections.emptyList(); \n    } \n    List<Element> siblings = parent().childElementsList(); \n    int index = indexInList(this,siblings); \n    if (index == null) { \n        Validate.notNull(index); \n    } \n    if (index > 0 && index < siblings.size()) { \n        return siblings.subList(0,index); \n    } \n    return Collections.emptyList(); \n}', 'public List<Element> previousElementSiblings() { \n    if (parentNode == null) { \n        return new LinkedList<>(); \n    } \n    List<Element> siblings = parent().childElementsList(); \n    int index = indexInList(this,siblings); \n    if (index == null) { \n        Validate.notNull(index); \n    } \n    if (index > 0 && index < siblings.size()) { \n        return siblings.subList(0,index); \n    } \n    return new LinkedList<>(); \n}', 'public List<Element> previousElementSiblings() { \n    if (parentNode == null) { \n        return new ArrayList<>(); \n    } \n    List<Element> siblings = parent().childElementsList(); \n    int index = indexInList(this,siblings); \n    if (index == null) { \n        Validate.notNull(index); \n    } \n    if (index > 0 && index < siblings.size()) { \n        return siblings.subList(0,index); \n    } \n    return new ArrayList<>(); \n}', 'public List<Element> previousElementSiblings() { \n    if (parentNode == null) { \n        return new LinkedList<>(); \n    } \n    List<Element> siblings = parent().childElementsList(); \n    int index = indexInList(this,siblings); \n    if (index == null) { \n        Validate.notNull(index); \n    } \n    if (index > 0 && index < siblings.size()) { \n        return siblings.subList(0,index); \n    } \n    return new LinkedList<>(); \n}', 'public List<Element> previousElementSiblings() { \n    if (parentNode == null) { \n        return Collections.emptyList(); \n    } \n    List<Element> siblings = parent().childElementsList(); \n    int index = indexInList(this,siblings); \n    if (index == null) { \n        Validate.notNull(index); \n    } \n    if (index > 0 && index < siblings.size()) { \n        return siblings.subList(0,index); \n    } \n    return Collections.emptyList(); \n}', 'public List<Element> previousElementSiblings() { \n    if (parentNode == null) { \n        return new ArrayList<>(); \n    } \n    List<Element> siblings = parent().childElementsList(); \n    int index = indexInList(this,siblings); \n    if (index == null) { \n        Validate.notNull(index); \n    } \n    if (index > 0 && index < siblings.size()) { \n        return siblings.subList(0,index); \n    } \n    return new ArrayList<>(); \n}', 'public List<Element> previousElementSiblings() { \n    if (parentNode == null) { \n        return new LinkedList<>(); \n    } \n    List<Element> siblings = parent().childElementsList(); \n    int index = indexInList(this,siblings); \n    if (index == null) { \n        Validate.notNull(index); \n    } \n    if (index > 0 && index < siblings.size()) { \n        return siblings.subList(0,index); \n    } \n    return new LinkedList<>(); \n}', 'public List<Element> previousElementSiblings() { \n    if (parentNode == null) { \n        return Collections.emptyList(); \n    } \n    List<Element> siblings = parent().childElementsList(); \n    int index = indexInList(this,siblings); \n    if (index == null) { \n        Validate.notNull(index); \n    } \n    if (index > 0 && index < siblings.size()) { \n        return siblings.subList(0,index); \n    } \n    return Collections.emptyList(); \n}']",False,True,True,True,False,False,False,False,0.5443560996352673,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); default: return false; } }']","['public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: { return false; } } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: { return false; } } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }']","['public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            break; \n    } \n    return false; \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}']","['public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}', 'public boolean matches(ExternalId otherId) { \n    if (otherId == null) { \n        ArgChecker.notNull(otherId,""otherId""); \n    } \n    switch(searchType) { \n        case EXACT: \n            return ImmutableSet.of(otherId).equals(externalIds); \n        case ALL: \n            return ImmutableSet.of(otherId).containsAll(externalIds); \n        case ANY: \n            return contains(otherId); \n        case NONE: \n            return contains(otherId) == false; \n        default: \n            return false; \n    } \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}']","['@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}']","['public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}']","['```java\n@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    // copied and pasted implementation\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}\n```', '```java\n@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    // implementation copied and pasted\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}\n```', '```java\n@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    // copied and pasted from original implementation\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}\n```', '```java\n@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    // implementation copied and pasted here\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}\n```', '```java\n@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    // copied and pasted method implementation\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}\n```', '```java\n@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    // copied and pasted from original method\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}\n```', '```java\n@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    // implementation copied and pasted as is\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}\n```', '```java\n@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    // copied and pasted implementation here\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}\n```', '```java\n@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) {\n    // copied and pasted from original code\n    if (key == null) {\n        A.notNull(key,""key"");\n    }\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion());\n}\n```']",True,True,False,False,False,False,False,False,0.0,0.0,0.4004970149398301,0.18798317647335086
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }']","['public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}']","['public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}']","['public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}']",False,False,False,False,False,False,False,False,0.7731212403166648,0.7516324170467025,0.8720290467146479,0.8720290467146479
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }']","['public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() { try { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { fail(""Exception thrown: "" + e.getMessage()); } }', 'public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); }', 'public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); }', 'public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); }', 'public void testSequenceFlowSupplier() { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); assertNotNull(viewConnector.getSourceConnection()); assertNotNull(viewConnector.getTargetConnection()); assertNotNull(viewConnector.getBounds()); assertNotNull(viewConnector.getDefinition()); }']","['public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); assertNotNull(viewConnector); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } }']","['public void testSequenceFlowSupplier() throws Exception {\n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex);\n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();\n    final ViewConnector<SequenceFlow> viewConnector = supplier.get();\n    try {\n        if (viewConnector == null) {\n            assertNotNull(viewConnector);\n        }\n        if (viewConnector.getSourceConnection() == null) {\n            assertNotNull(viewConnector.getSourceConnection());\n        }\n        if (viewConnector.getTargetConnection() == null) {\n            assertNotNull(viewConnector.getTargetConnection());\n        }\n        if (viewConnector.getBounds() == null) {\n            assertNotNull(viewConnector.getBounds());\n        }\n        if (viewConnector.getDefinition() == null) {\n            assertNotNull(viewConnector.getDefinition());\n        }\n    } catch (Exception e) {\n        // Handle exception here\n    }\n}', 'public void testSequenceFlowSupplier() throws Exception {\n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex);\n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();\n    final ViewConnector<SequenceFlow> viewConnector = supplier.get();\n    if (viewConnector == null) {\n        assertNotNull(viewConnector);\n    } else {\n        if (viewConnector.getSourceConnection() == null) {\n            assertNotNull(viewConnector.getSourceConnection());\n        }\n        if (viewConnector.getTargetConnection() == null) {\n            assertNotNull(viewConnector.getTargetConnection());\n        }\n        if (viewConnector.getBounds() == null) {\n            assertNotNull(viewConnector.getBounds());\n        }\n        if (viewConnector.getDefinition() == null) {\n            assertNotNull(viewConnector.getDefinition());\n        }\n    }\n}', 'public void testSequenceFlowSupplier() throws Exception {\n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex);\n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();\n    final ViewConnector<SequenceFlow> viewConnector = supplier.get();\n    if (viewConnector == null) {\n        assertNotNull(viewConnector);\n    } else {\n        try {\n            assertNotNull(viewConnector.getSourceConnection());\n            assertNotNull(viewConnector.getTargetConnection());\n            assertNotNull(viewConnector.getBounds());\n            assertNotNull(viewConnector.getDefinition());\n        } catch (Exception e) {\n            // Handle exception here\n        }\n    }\n}', 'public void testSequenceFlowSupplier() throws Exception {\n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex);\n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();\n    final ViewConnector<SequenceFlow> viewConnector = supplier.get();\n    if (viewConnector == null) {\n        assertNotNull(viewConnector);\n    } else {\n        try {\n            if (viewConnector.getSourceConnection() == null) {\n                assertNotNull(viewConnector.getSourceConnection());\n            }\n            if (viewConnector.getTargetConnection() == null) {\n                assertNotNull(viewConnector.getTargetConnection());\n            }\n            if (viewConnector.getBounds() == null) {\n                assertNotNull(viewConnector.getBounds());\n            }\n            if (viewConnector.getDefinition() == null) {\n                assertNotNull(viewConnector.getDefinition());\n            }\n        } catch (Exception e) {\n            // Handle exception here\n        }\n    }\n}', 'public void testSequenceFlowSupplier() throws Exception {\n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex);\n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();\n    final ViewConnector<SequenceFlow> viewConnector = supplier.get();\n    if (viewConnector == null) {\n        assertNotNull(viewConnector);\n    } else {\n        if (viewConnector.getSourceConnection() == null) {\n            assertNotNull(viewConnector.getSourceConnection());\n        }\n        if (viewConnector.getTargetConnection() == null) {\n            assertNotNull(viewConnector.getTargetConnection());\n        }\n        if (viewConnector.getBounds() == null) {\n            assertNotNull(viewConnector.getBounds());\n        }\n        if (viewConnector.getDefinition() == null) {\n            assertNotNull(viewConnector.getDefinition());\n        }\n    }\n}', 'public void testSequenceFlowSupplier() throws Exception {\n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex);\n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();\n    final ViewConnector<SequenceFlow> viewConnector = supplier.get();\n    if (viewConnector == null) {\n        assertNotNull(viewConnector);\n    } else {\n        assertNotNull(viewConnector.getSourceConnection());\n        assertNotNull(viewConnector.getTargetConnection());\n        assertNotNull(viewConnector.getBounds());\n        assertNotNull(viewConnector.getDefinition());\n    }\n}', 'public void testSequenceFlowSupplier() throws Exception {\n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex);\n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();\n    final ViewConnector<SequenceFlow> viewConnector = supplier.get();\n    if (viewConnector == null) {\n        assertNotNull(viewConnector);\n    } else {\n        if (viewConnector.getSourceConnection() == null || viewConnector.getTargetConnection() == null || viewConnector.getBounds() == null || viewConnector.getDefinition() == null) {\n            assertNotNull(viewConnector.getSourceConnection());\n            assertNotNull(viewConnector.getTargetConnection());\n            assertNotNull(viewConnector.getBounds());\n            assertNotNull(viewConnector.getDefinition());\n        }\n    }\n}', 'public void testSequenceFlowSupplier() throws Exception {\n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex);\n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();\n    final ViewConnector<SequenceFlow> viewConnector = supplier.get();\n    if (viewConnector == null) {\n        assertNotNull(viewConnector);\n    } else {\n        assertNotNull(viewConnector.getSourceConnection());\n        assertNotNull(viewConnector.getTargetConnection());\n        assertNotNull(viewConnector.getBounds());\n        assertNotNull(viewConnector.getDefinition());\n    }\n}', 'public void testSequenceFlowSupplier() throws Exception {\n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex);\n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();\n    final ViewConnector<SequenceFlow> viewConnector = supplier.get();\n    if (viewConnector == null) {\n        assertNotNull(viewConnector);\n    } else {\n        assertNotNull(viewConnector.getSourceConnection());\n        assertNotNull(viewConnector.getTargetConnection());\n        assertNotNull(viewConnector.getBounds());\n        assertNotNull(viewConnector.getDefinition());\n    }\n}']",False,True,False,False,False,False,False,False,0.6319751352952153,0.0,0.5144401129304212,0.4711157104653805
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } else { this.client = client; } }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } else { this.client = client; } }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } else { this.client = client; } }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, ""client is null""); }']","['public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }']","['public AlluxioHiveMetastore(TableMasterClient client) { this.client = requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { throw new IllegalArgumentException(""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { throw new NullPointerException(""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { throw new IllegalStateException(""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { throw new AssertionError(""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { throw new Exception(""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { throw new Error(""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { throw new RuntimeException(""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { throw new CustomException(""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { throw new CustomRuntimeException(""client is null""); } this.client = client; }']","['public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { this.client = Objects.requireNonNull(client, ""client is null""); }']",False,False,False,False,True,False,True,False,0.0,0.2521193618434983,0.0,0.10073051057692405
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}']","['private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }']","['private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }']","['private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    Assert.assertEquals(1,array.size());\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    if (""Did not find value Renamed Insertion Feature"" == null) {\n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n    }\n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.6182478136617575,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }']","['public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }']","['public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext); } }']","['public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.40352786374639904,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }']","['public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new IllegalArgumentException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new IllegalStateException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new UnsupportedOperationException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new RuntimeException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new CustomException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new MyCustomException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new ValidationException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new IllegalStateException(""Person object cannot be null""); } }']","['public void addVesselCrew(Person p) { if (p == null) { throw new IllegalArgumentException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new IllegalStateException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new UnsupportedOperationException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new CustomException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new RuntimeException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new Error(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new MyCustomException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new IllegalArgumentException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new IllegalArgumentException(""Person object cannot be null""); } }']","['public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new IllegalArgumentException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { Objects.requireNonNull(p); }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new IllegalStateException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new RuntimeException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new CustomException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new IllegalArgumentException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new CustomException(""Person object cannot be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new CustomException(""Person object cannot be null""); } }']",False,False,False,False,False,False,False,False,0.23376641384792204,0.23376641384792204,0.10584277604455784,0.33602782883534926
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }']","['public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }']","['public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() {\n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    assertNotNull(access); \n    assertTrue(access.size() > 0); \n}']","['public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }']",True,True,False,True,False,False,True,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }']","['public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }']","['public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}', 'public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().equals("""");\n}', 'public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().equals("""");\n}', 'public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}', 'public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}', 'public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().equals("""");\n}', 'public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}', 'public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().equals("""");\n}', 'public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}', 'public static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}']","['```java\npublic static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}\n```', '```java\npublic static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}\n```', '```java\npublic static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}\n```', '```java\npublic static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}\n```', '```java\npublic static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}\n```', '```java\npublic static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}\n```', '```java\npublic static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}\n```', '```java\npublic static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}\n```', '```java\npublic static boolean isEmpty(Path path) { \n    if (path == null) { \n        Objects.requireNonNull(path,""The given path must not be null""); \n    } \n    Path normalized = path.normalize(); \n    return normalized.getNameCount() == 1 && normalized.toString().isEmpty();\n}\n```']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.761827408333416
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } Objects.requireNonNull(cacheManager, ""cachingFileSystem is null""); if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { throw new IllegalArgumentException(""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { throw new NullPointerException(""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { throw new IllegalStateException(""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { throw new IllegalStateException(""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { throw new IllegalArgumentException(""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { throw new NullPointerException(""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } Objects.requireNonNull(cacheManager, ""cachingFileSystem is null""); if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { throw new NullPointerException(""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { throw new IllegalArgumentException(""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }']","['public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager cannot be null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager should not be null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager must not be null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager cannot be null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager cannot be null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }']","['public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""cachingFileSystem is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""cachingFileSystem is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""cachingFileSystem is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""cachingFileSystem is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""cachingFileSystem is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}']","['public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""cachingFileSystem is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""cacheManager is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager cannot be null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new NullPointerException(""cacheManager is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalStateException(""cacheManager cannot be null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalStateException(""cacheManager is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new RuntimeException(""cacheManager cannot be null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new RuntimeException(""cacheManager is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new IllegalArgumentException(""cacheManager is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { \n    super(inputStream); \n    if (inputStream == null) { \n        requireNonNull(inputStream, ""inputStream is null""); \n    } \n    if (path == null) { \n        requireNonNull(path, ""path is null""); \n    } \n    if (cacheManager == null) { \n        throw new NullPointerException(""cacheManager is null""); \n    } \n    this.cacheValidationEnabled = cacheValidationEnabled; \n}']",False,True,False,False,False,False,False,False,0.8196189957582152,0.0,0.7506346798217074,0.8967725055197985
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }']","['public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }']","['public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty()); \n}']","['```java\npublic void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty());\n}\n```', '```java\npublic void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty());\n}\n```', '```java\npublic void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty());\n}\n```', '```java\npublic void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty());\n}\n```', '```java\npublic void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty());\n}\n```', '```java\npublic void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty());\n}\n```', '```java\npublic void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty());\n}\n```', '```java\npublic void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty());\n}\n```', '```java\npublic void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { \n    List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertTrue(result.isEmpty());\n}\n```']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.4180134288483488
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }']","['public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexName""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexName""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexIdentifier""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexIdentifier""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexCode""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexCode""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexSymbol""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexSymbol""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }']","['public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }']","['public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index, Curve forwardCurve) {\n    if (index == null) {\n        ArgChecker.notNull(index, ""index"");\n    }\n    if (forwardCurve == null) {\n        ArgChecker.notNull(forwardCurve, ""forwardCurve"");\n    }\n    this.indexCurves.put(index, forwardCurve);\n    return this;\n}', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index, Curve forwardCurve) {\n    if (index == null) {\n        ArgChecker.notNull(index, ""index"");\n    }\n    if (forwardCurve == null) {\n        ArgChecker.notNull(forwardCurve, ""forwardCurve"");\n    }\n    this.indexCurves.put(index, forwardCurve);\n    return this;\n}', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index, Curve forwardCurve) {\n    if (index == null) {\n        ArgChecker.notNull(index, ""index"");\n    }\n    if (forwardCurve == null) {\n        ArgChecker.notNull(forwardCurve, ""forwardCurve"");\n    }\n    this.indexCurves.put(index, forwardCurve);\n    return this;\n}', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index, Curve forwardCurve) {\n    if (index == null) {\n        ArgChecker.notNull(index, ""index"");\n    }\n    if (forwardCurve == null) {\n        ArgChecker.notNull(forwardCurve, ""forwardCurve"");\n    }\n    this.indexCurves.put(index, forwardCurve);\n    return this;\n}', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index, Curve forwardCurve) {\n    if (index == null) {\n        ArgChecker.notNull(index, ""index"");\n    }\n    if (forwardCurve == null) {\n        ArgChecker.notNull(forwardCurve, ""forwardCurve"");\n    }\n    this.indexCurves.put(index, forwardCurve);\n    return this;\n}', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index, Curve forwardCurve) {\n    if (index == null) {\n        ArgChecker.notNull(index, ""index"");\n    }\n    if (forwardCurve == null) {\n        ArgChecker.notNull(forwardCurve, ""forwardCurve"");\n    }\n    this.indexCurves.put(index, forwardCurve);\n    return this;\n}', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index, Curve forwardCurve) {\n    if (index == null) {\n        ArgChecker.notNull(index, ""index"");\n    }\n    if (forwardCurve == null) {\n        ArgChecker.notNull(forwardCurve, ""forwardCurve"");\n    }\n    this.indexCurves.put(index, forwardCurve);\n    return this;\n}', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index, Curve forwardCurve) {\n    if (index == null) {\n        ArgChecker.notNull(index, ""index"");\n    }\n    if (forwardCurve == null) {\n        ArgChecker.notNull(forwardCurve, ""forwardCurve"");\n    }\n    this.indexCurves.put(index, forwardCurve);\n    return this;\n}', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index, Curve forwardCurve) {\n    if (index == null) {\n        ArgChecker.notNull(index, ""index"");\n    }\n    if (forwardCurve == null) {\n        ArgChecker.notNull(forwardCurve, ""forwardCurve"");\n    }\n    this.indexCurves.put(index, forwardCurve);\n    return this;\n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }']","['SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }']","['SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n    if (expectedJwsAlgorithm == null) {\n        Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n    }\n    if (key == null) {\n        Assert.notNull(key, ""key cannot be null"");\n    }\n    this.keySet = Arrays.asList(key);\n    this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n}']","['class SingleKeyJWSKeySelector {\n    public SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n        if (expectedJwsAlgorithm == null) {\n            Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n        }\n        if (key == null) {\n            Assert.notNull(key, ""key cannot be null"");\n        }\n        this.keySet = Arrays.asList(key);\n        this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n    }\n}', 'class SingleKeyJWSKeySelector {\n    SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n        if (expectedJwsAlgorithm == null) {\n            Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n        }\n        if (key == null) {\n            Assert.notNull(key, ""key cannot be null"");\n        }\n        this.keySet = Arrays.asList(key);\n        this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n    }\n}', 'class SingleKeyJWSKeySelector {\n    private SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n        if (expectedJwsAlgorithm == null) {\n            Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n        }\n        if (key == null) {\n            Assert.notNull(key, ""key cannot be null"");\n        }\n        this.keySet = Arrays.asList(key);\n        this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n    }\n}', 'class SingleKeyJWSKeySelector {\n    protected SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n        if (expectedJwsAlgorithm == null) {\n            Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n        }\n        if (key == null) {\n            Assert.notNull(key, ""key cannot be null"");\n        }\n        this.keySet = Arrays.asList(key);\n        this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n    }\n}', 'class SingleKeyJWSKeySelector {\n    SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n        if (expectedJwsAlgorithm == null) {\n            Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n        }\n        if (key == null) {\n            Assert.notNull(key, ""key cannot be null"");\n        }\n        this.keySet = Arrays.asList(key);\n        this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n    }\n}', 'class SingleKeyJWSKeySelector {\n    SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n        if (expectedJwsAlgorithm == null) {\n            Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n        }\n        if (key == null) {\n            Assert.notNull(key, ""key cannot be null"");\n        }\n        this.keySet = Arrays.asList(key);\n        this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n    }\n}', 'class SingleKeyJWSKeySelector {\n    SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n        if (expectedJwsAlgorithm == null) {\n            Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n        }\n        if (key == null) {\n            Assert.notNull(key, ""key cannot be null"");\n        }\n        this.keySet = Arrays.asList(key);\n        this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n    }\n}', 'class SingleKeyJWSKeySelector {\n    SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n        if (expectedJwsAlgorithm == null) {\n            Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n        }\n        if (key == null) {\n            Assert.notNull(key, ""key cannot be null"");\n        }\n        this.keySet = Arrays.asList(key);\n        this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n    }\n}', 'class SingleKeyJWSKeySelector {\n    SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm, Key key) {\n        if (expectedJwsAlgorithm == null) {\n            Assert.notNull(expectedJwsAlgorithm, ""expectedJwsAlgorithm cannot be null"");\n        }\n        if (key == null) {\n            Assert.notNull(key, ""key cannot be null"");\n        }\n        this.keySet = Arrays.asList(key);\n        this.expectedJwsAlgorithm = expectedJwsAlgorithm;\n    }\n}']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.8531833263091443
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}']","['public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }']","['public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }']","['public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}', 'public static AccrualOnDefaultFormula of(String uniqueName) { \n    if (uniqueName == null) { \n        ArgChecker.notNull(uniqueName,""uniqueName""); \n    } \n    String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); \n    if (str.endsWith(""I_S_D_A"")) { \n        str = ""ORIGINAL_ISDA""; \n    } \n    return valueOf(str);\n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.2836224688412052,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t.getClass().isArray()) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t.getClass().getSimpleName().equals(""ArrayType"")) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t.getClass().isAssignableFrom(ArrayType.class)) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = null; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); if (s[0] == null) { assertNotNull(s[0]); } }']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t.getClass().isArray()) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = (ArrayType) t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = (ArrayType) t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = (ArrayType) t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = (ArrayType) t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = (ArrayType) t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = t); if (s[0] == null) { assertNotNull(s[0]); } }']",False,False,False,True,False,False,False,False,0.7101158913184162,0.7127994860722305,0.7127994860722305,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}']","['public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    if (result == null) { \n        assertNotNull(result); \n    } \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(), existingDomain.getId()); \n}']","['public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    assertEquals(result.get(0).getId(),existingDomain.getId()); \n}']","['public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    if (result == null) {\n        assertNotNull(result);\n    }\n    assertFalse(result.isEmpty());\n    assertEquals(result.get(0).getId(), existingDomain.getId());\n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    if (result == null) {\n        assertNotNull(result);\n    }\n    assertFalse(result.isEmpty());\n    assertEquals(result.get(0).getId(), existingDomain.getId());\n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    if (result == null) {\n        assertNotNull(result);\n    }\n    assertFalse(result.isEmpty());\n    assertEquals(result.get(0).getId(), existingDomain.getId());\n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    if (result == null) {\n        assertNotNull(result);\n    }\n    assertFalse(result.isEmpty());\n    assertEquals(result.get(0).getId(), existingDomain.getId());\n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    if (result == null) {\n        assertNotNull(result);\n    }\n    assertFalse(result.isEmpty());\n    assertEquals(result.get(0).getId(), existingDomain.getId());\n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    if (result == null) {\n        assertNotNull(result);\n    }\n    assertFalse(result.isEmpty());\n    assertEquals(result.get(0).getId(), existingDomain.getId());\n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    if (result == null) {\n        assertNotNull(result);\n    }\n    assertFalse(result.isEmpty());\n    assertEquals(result.get(0).getId(), existingDomain.getId());\n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    if (result == null) {\n        assertNotNull(result);\n    }\n    assertFalse(result.isEmpty());\n    assertEquals(result.get(0).getId(), existingDomain.getId());\n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    if (result == null) {\n        assertNotNull(result);\n    }\n    assertFalse(result.isEmpty());\n    assertEquals(result.get(0).getId(), existingDomain.getId());\n}']",True,True,False,False,False,False,False,False,0.0,0.0,0.27952792741962756,0.2865612242047131
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); LOG.debug(""########## testSchemaTypePromotion ##############""); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } LOG.debug(""########## testSchemaTypePromotion ##############""); Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); LOG.debug(""########## testSchemaTypePromotion ##############""); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } LOG.debug(""########## END typePromotion ############""); Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); }', 'public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); LOG.debug(""########## testSchemaTypePromotion ##############""); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); LOG.debug(""########## testSchemaTypePromotion ##############""); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); LOG.debug(""########## testSchemaTypePromotion ##############""); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); LOG.debug(""########## testSchemaTypePromotion ##############""); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }']","['public void testSchemaTypePromotion() throws Exception { LOG.debug(""Need for debug lines here, please.""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Need for debug lines here, please.""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Need for debug lines here, please.""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Need for debug lines here, please.""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Need for debug lines here, please.""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Need for debug lines here, please.""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Need for debug lines here, please.""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Need for debug lines here, please.""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Need for debug lines here, please.""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Need for debug lines here, please.""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Need for debug lines here, please.""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Need for debug lines here, please.""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Need for debug lines here, please.""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Need for debug lines here, please.""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Need for debug lines here, please.""); }']","['public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); }', 'public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## testSchemaTypePromotion ##############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }']","['public void testSchemaTypePromotion() throws Exception { LOG.debug(""Starting testSchemaTypePromotion method""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Finished testSchemaTypePromotion method""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Debugging testSchemaTypePromotion method""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Debugging completed for testSchemaTypePromotion method""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Entering testSchemaTypePromotion method""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""Exiting testSchemaTypePromotion method""); }']",False,False,True,False,False,False,False,False,0.5310033082047186,0.47284097181023194,0.0,0.4721722429021459
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }']","['public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }']","['public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }']","['public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }']","['public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }']","['public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); if (actual == null) { assertNotNull(actual); } assertFalse(actual.isEmpty()); assertEquals(expected,actual); }']","['public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    if (actual == null) { \n        assertNotNull(actual); \n    } \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected,actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    if (actual == null) { \n        assertNotNull(actual); \n    } \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected,actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    if (actual == null) { \n        assertNotNull(actual); \n    } \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected,actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    if (actual == null) { \n        assertNotNull(actual); \n    } \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected,actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    if (actual == null) { \n        assertNotNull(actual); \n    } \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected,actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    if (actual == null) { \n        assertNotNull(actual); \n    } \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected,actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    if (actual == null) { \n        assertNotNull(actual); \n    } \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected,actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    if (actual == null) { \n        assertNotNull(actual); \n    } \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected,actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    if (actual == null) { \n        assertNotNull(actual); \n    } \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected,actual); \n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.2433325457401086,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }']","['private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }']","['private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }']","['private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']","['public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",analysis.eResource().getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",analysis.eResource().getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']","['public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']","['public void testDRepresentationContainerRemovalMigrationDone() { \n    ResourceSet set = new ResourceSetImpl(); \n    DAnalysis analysis = null; \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    if (""Check the representation file test data."" == null) { \n        assertNotNull(""Check the representation file test data."",analysis); \n    } \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}', 'public void testDRepresentationContainerRemovalMigrationDone() { \n    ResourceSet set = new ResourceSetImpl(); \n    DAnalysis analysis = null; \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    if (""Check the representation file test data."" == null) { \n        assertNotNull(""Check the representation file test data."",analysis); \n    } \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}']",True,False,True,True,False,False,False,False,0.0,0.6615088806823327,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();']","['public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); if (result == null) { assertNotNull(result); } assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); if (sslContextFactory.getKeyStore() == null) { assertNotNull(sslContextFactory.getKeyStore()); } assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); if (sslContextFactory.getTrustStore() == null) { assertNotNull(sslContextFactory.getTrustStore()); } assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); if (result == null) { assertNotNull(result); } assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); if (sslContextFactory.getKeyStore() == null) { assertNotNull(sslContextFactory.getKeyStore()); } assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); if (sslContextFactory.getTrustStore() == null) { assertNotNull(sslContextFactory.getTrustStore()); } assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }']","['expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();']","['public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); if (result == null) { assertNotNull(result); } assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); if (sslContextFactory.getKeyStore() == null) { assertNotNull(sslContextFactory.getKeyStore()); } assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); if (sslContextFactory.getTrustStore() == null) { assertNotNull(sslContextFactory.getTrustStore()); } assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); if (result == null) { assertNotNull(result); } assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); if (sslContextFactory.getKeyStore() == null) { assertNotNull(sslContextFactory.getKeyStore()); } assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); if (sslContextFactory.getTrustStore() == null) { assertNotNull(sslContextFactory.getTrustStore()); } assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); } \n\n...']",False,True,False,False,False,False,False,False,0.0,0.0,0.0,0.4395097786598164
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}', 'if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}', 'if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}', 'if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}', 'if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}', 'if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}', 'if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}', 'if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}', 'if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}', 'if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) {\n    assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH));\n}']","['public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH, exactRef)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH, exactRef)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH, exactRef)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH, exactRef)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH, exactRef)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH, exactRef)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH, exactRef)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH, exactRef)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH, exactRef)); } }']","['public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); } }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); } }']","['public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }\n}', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }\n}', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }\n}', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }\n}', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }\n}', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }\n}', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }\n}', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); assertEquals(DEVELOP_BRANCH,repository.getBranch()); assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); if (repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH) == null) { assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }\n}']",False,False,False,False,False,False,False,False,0.004532326461726747,0.3493450883427864,0.3589322914930857,0.3589322914930857
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { switch(storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storage']","['```java\npublic void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Object[] beans = (Object[]) stat.get(""beans""); \n    Map<String,Object> blockStats = null; \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    if (blockStats == null) { \n        assertNotNull(blockStats); \n    } \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    if (storageTypeStatsList == null) { \n        assertNotNull(storageTypeStatsList); \n    } \n    assertEquals(4,storageTypeStatsList.length); \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) {\n            case ""ARCHIVE"":\n            case ""DISK"":\n                assertEquals(3L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""RAM_DISK"":\n                assertEquals(7L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""NVDIMM"":\n                assertEquals(1L,storageTypeStats.get(""nodesInService""));\n                break;\n            default:\n                fail();\n        }\n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}\n```', '```java\npublic void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Object[] beans = (Object[]) stat.get(""beans""); \n    Map<String,Object> blockStats = null; \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    if (blockStats == null) { \n        assertNotNull(blockStats); \n    } \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    if (storageTypeStatsList == null) { \n        assertNotNull(storageTypeStatsList); \n    } \n    assertEquals(4,storageTypeStatsList.length); \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) {\n            case ""ARCHIVE"":\n            case ""DISK"":\n                assertEquals(3L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""RAM_DISK"":\n                assertEquals(7L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""NVDIMM"":\n                assertEquals(1L,storageTypeStats.get(""nodesInService""));\n                break;\n            default:\n                fail();\n        }\n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}\n```', '```java\npublic void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Object[] beans = (Object[]) stat.get(""beans""); \n    Map<String,Object> blockStats = null; \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    if (blockStats == null) { \n        assertNotNull(blockStats); \n    } \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    if (storageTypeStatsList == null) { \n        assertNotNull(storageTypeStatsList); \n    } \n    assertEquals(4,storageTypeStatsList.length); \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) {\n            case ""ARCHIVE"":\n            case ""DISK"":\n                assertEquals(3L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""RAM_DISK"":\n                assertEquals(7L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""NVDIMM"":\n                assertEquals(1L,storageTypeStats.get(""nodesInService""));\n                break;\n            default:\n                fail();\n        }\n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}\n```']",True,True,False,False,False,False,False,False,0.0,0.0,0.3352630356010429,0.3721032821844986
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); // expect 200000 - possibly source data needs converting microseconds assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); // expect 200000 - possibly source data needs converting microseconds assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); // expect 200000 - possibly source data needs converting microseconds assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); // expect 200000 - possibly source data needs converting microseconds assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); // expect 200000 - possibly source data needs converting microseconds assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); // expect 200000 - possibly source data needs converting microseconds assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); // expect 200000 - possibly source data needs converting microseconds assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); // expect 200000 - possibly source data needs converting microseconds assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); // expect 200000 - possibly source data needs converting microseconds assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration() / 1000000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration() / 1000000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.4324570772725831,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }']","['public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }']","['public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }']","['public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); } }']","['public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }']","['public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size(); }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1']","['public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }\n...']",False,True,True,True,False,False,False,False,0.20272956555136287,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testChunkedLengthSet() throws Exception { \n    MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); \n    connection.setRequestMethod(""POST""); \n    NetHttpRequest request = new NetHttpRequest(connection); \n    InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); \n    HttpContent content = new InputStreamContent(""text/plain"",is); \n    request.setStreamingContent(content); \n    request.setContentEncoding(""gzip""); \n    request.execute(); \n    assertEquals(4096, connection.getChunkLength()); \n    if (request.getRequestProperty(""Content-Length"") != null) { \n        assertNull(request.getRequestProperty(""Content-Length"")); \n    } \n}', 'public void testChunkedLengthSet() throws Exception { \n    MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); \n    connection.setRequestMethod(""POST""); \n    NetHttpRequest request = new NetHttpRequest(connection); \n    InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); \n    HttpContent content = new InputStreamContent(""text/plain"",is); \n    request.setStreamingContent(content); \n    request.setContentEncoding(""gzip""); \n    request.execute(); \n    assertEquals(4096, connection.getChunkLength()); \n    if (request.getRequestProperty(""Content-Length"") != null) { \n        assertNull(request.getRequestProperty(""Content-Length"")); \n    } \n}', 'public void testChunkedLengthSet() throws Exception { \n    MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); \n    connection.setRequestMethod(""POST""); \n    NetHttpRequest request = new NetHttpRequest(connection); \n    InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); \n    HttpContent content = new InputStreamContent(""text/plain"",is); \n    request.setStreamingContent(content); \n    request.setContentEncoding(""gzip""); \n    request.execute(); \n    assertEquals(4096, connection.getChunkLength()); \n    if (request.getRequestProperty(""Content-Length"") != null) { \n        assertNull(request.getRequestProperty(""Content-Length"")); \n    } \n}', 'public void testChunkedLengthSet() throws Exception { \n    MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); \n    connection.setRequestMethod(""POST""); \n    NetHttpRequest request = new NetHttpRequest(connection); \n    InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); \n    HttpContent content = new InputStreamContent(""text/plain"",is); \n    request.setStreamingContent(content); \n    request.setContentEncoding(""gzip""); \n    request.execute(); \n    assertEquals(4096, connection.getChunkLength()); \n    if (request.getRequestProperty(""Content-Length"") != null) { \n        assertNull(request.getRequestProperty(""Content-Length"")); \n    } \n}', 'public void testChunkedLengthSet() throws Exception { \n    MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); \n    connection.setRequestMethod(""POST""); \n    NetHttpRequest request = new NetHttpRequest(connection); \n    InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); \n    HttpContent content = new InputStreamContent(""text/plain"",is); \n    request.setStreamingContent(content); \n    request.setContentEncoding(""gzip""); \n    request.execute(); \n    assertEquals(4096, connection.getChunkLength()); \n    if (request.getRequestProperty(""Content-Length"") != null) { \n        assertNull(request.getRequestProperty(""Content-Length"")); \n    } \n}', 'public void testChunkedLengthSet() throws Exception { \n    MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); \n    connection.setRequestMethod(""POST""); \n    NetHttpRequest request = new NetHttpRequest(connection); \n    InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); \n    HttpContent content = new InputStreamContent(""text/plain"",is); \n    request.setStreamingContent(content); \n    request.setContentEncoding(""gzip""); \n    request.execute(); \n    assertEquals(4096, connection.getChunkLength()); \n    if (request.getRequestProperty(""Content-Length"") != null) { \n        assertNull(request.getRequestProperty(""Content-Length"")); \n    } \n}', 'public void testChunkedLengthSet() throws Exception { \n    MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); \n    connection.setRequestMethod(""POST""); \n    NetHttpRequest request = new NetHttpRequest(connection); \n    InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); \n    HttpContent content = new InputStreamContent(""text/plain"",is); \n    request.setStreamingContent(content); \n    request.setContentEncoding(""gzip""); \n    request.execute(); \n    assertEquals(4096, connection.getChunkLength()); \n    if (request.getRequestProperty(""Content-Length"") != null) { \n        assertNull(request.getRequestProperty(""Content-Length"")); \n    } \n}', 'public void testChunkedLengthSet() throws Exception { \n    MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); \n    connection.setRequestMethod(""POST""); \n    NetHttpRequest request = new NetHttpRequest(connection); \n    InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); \n    HttpContent content = new InputStreamContent(""text/plain"",is); \n    request.setStreamingContent(content); \n    request.setContentEncoding(""gzip""); \n    request.execute(); \n    assertEquals(4096, connection.getChunkLength()); \n    if (request.getRequestProperty(""Content-Length"") != null) { \n        assertNull(request.getRequestProperty(""Content-Length"")); \n    } \n}', 'public void testChunkedLengthSet() throws Exception { \n    MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); \n    connection.setRequestMethod(""POST""); \n    NetHttpRequest request = new NetHttpRequest(connection); \n    InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); \n    HttpContent content = new InputStreamContent(""text/plain"",is); \n    request.setStreamingContent(content); \n    request.setContentEncoding(""gzip""); \n    request.execute(); \n    assertEquals(4096, connection.getChunkLength()); \n    if (request.getRequestProperty(""Content-Length"") != null) { \n        assertNull(request.getRequestProperty(""Content-Length"")); \n    } \n}']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }']","['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }']","['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }']","['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); installNewView(cache(0),cache(0)); if (future.get() != null) { assertNull(future.get()); } assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.4530311055941201
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event)<START>;<END> if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event)<START>;<END> if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event)<START>;<END> if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event)<START>;<END> if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event)<START>;<END> if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event)<START>;<END> if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event)<START>;<END> if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event)<START>;<END> if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event)<START>;<END> if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }']","['public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }']","['public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }']","['public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }']",False,True,True,True,False,False,False,False,0.7367279057369005,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }']","['public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }']","['public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { requireNonNull(ryaInstance); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }']","['public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) {\n    Objects.requireNonNull(ryaInstance);\n    if (kafkaHostname == null) {\n        requireNonNull(kafkaHostname);\n    }\n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class);\n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class);\n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance);\n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic);\n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog);\n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) {\n        @Override\n        public void close() {\n            try {\n                queryRepo.close();\n            } catch (final Exception e) {\n                log.warn(""Couldn\'t close a QueryRepository."",e);\n            }\n        }\n    };\n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) {\n    Objects.requireNonNull(ryaInstance);\n    if (kafkaHostname == null) {\n        requireNonNull(kafkaHostname);\n    }\n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class);\n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class);\n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance);\n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic);\n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog);\n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) {\n        @Override\n        public void close() {\n            try {\n                queryRepo.close();\n            } catch (final Exception e) {\n                log.warn(""Couldn\'t close a QueryRepository."",e);\n            }\n        }\n    };\n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) {\n    Objects.requireNonNull(ryaInstance);\n    if (kafkaHostname == null) {\n        requireNonNull(kafkaHostname);\n    }\n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class);\n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class);\n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance);\n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic);\n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog);\n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) {\n        @Override\n        public void close() {\n            try {\n                queryRepo.close();\n            } catch (final Exception e) {\n                log.warn(""Couldn\'t close a QueryRepository."",e);\n            }\n        }\n    };\n}']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.27614203724929004
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }']","['public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }']","['public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.localRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.localRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.localRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.localRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { if (pagesIndexFactory == null) { requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); } if (operatorContext == null) { requireNonNull(operatorContext,""operatorContext is null""); } if (outputChannels == null) { requireNonNull(outputChannels,""outputChannels is null""); } if (sortChannels == null) { requireNonNull(sortChannels,""sortChannels is null""); } if (sortOrder == null) { requireNonNull(sortOrder,""sortOrder is null""); } this.sourceTypes = sourceTypes; this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext(); this.localRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); this.spillerFactory = spillerFactory; this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); this.spillEnabled = spillEnabled; }']","['public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { \n    if (pagesIndexFactory == null) { \n        requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); \n    } \n    if (operatorContext == null) { \n        requireNonNull(operatorContext,""operatorContext is null""); \n    } \n    if (outputChannels == null) { \n        requireNonNull(outputChannels,""outputChannels is null""); \n    } \n    if (sortChannels == null) { \n        requireNonNull(sortChannels,""sortChannels is null""); \n    } \n    if (sortOrder == null) { \n        requireNonNull(sortOrder,""sortOrder is null""); \n    } \n    this.sourceTypes = sourceTypes; \n    this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext();\n    this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); \n    this.spillerFactory = spillerFactory; \n    this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); \n    this.spillEnabled = spillEnabled; \n}', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { \n    if (pagesIndexFactory == null) { \n        requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); \n    } \n    if (operatorContext == null) { \n        requireNonNull(operatorContext,""operatorContext is null""); \n    } \n    if (outputChannels == null) { \n        requireNonNull(outputChannels,""outputChannels is null""); \n    } \n    if (sortChannels == null) { \n        requireNonNull(sortChannels,""sortChannels is null""); \n    } \n    if (sortOrder == null) { \n        requireNonNull(sortOrder,""sortOrder is null""); \n    } \n    this.sourceTypes = sourceTypes; \n    this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext();\n    this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); \n    this.spillerFactory = spillerFactory; \n    this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); \n    this.spillEnabled = spillEnabled; \n}', 'public OrderByOperator(OperatorContext operatorContext,List<Type> sourceTypes,List<Integer> outputChannels,int expectedPositions,List<Integer> sortChannels,List<SortOrder> sortOrder,PagesIndex.Factory pagesIndexFactory,boolean spillEnabled,Optional<SpillerFactory> spillerFactory) { \n    if (pagesIndexFactory == null) { \n        requireNonNull(pagesIndexFactory,""pagesIndexFactory is null""); \n    } \n    if (operatorContext == null) { \n        requireNonNull(operatorContext,""operatorContext is null""); \n    } \n    if (outputChannels == null) { \n        requireNonNull(outputChannels,""outputChannels is null""); \n    } \n    if (sortChannels == null) { \n        requireNonNull(sortChannels,""sortChannels is null""); \n    } \n    if (sortOrder == null) { \n        requireNonNull(sortOrder,""sortOrder is null""); \n    } \n    this.sourceTypes = sourceTypes; \n    this.pagesIndexUserMemoryContext = operatorContext.localUserMemoryContext();\n    this.pagesIndexRevocableMemoryContext = operatorContext.localRevocableMemoryContext(); \n    this.spillerFactory = spillerFactory; \n    this.pageIndex = pagesIndexFactory.newPagesIndex(sourceTypes,expectedPositions); \n    this.spillEnabled = spillEnabled; \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySet == null) { assertNotNull(keySet); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } if (keySet == null) { assertNotNull(keySet); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } if (keySet == null) { assertNotNull(keySet); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } if (keySet == null) { assertNotNull(keySet); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } if (keySet == null) { assertNotNull(keySet); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } if (keySet == null) { assertNotNull(keySet); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } if (keySet == null) { assertNotNull(keySet); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotNull(fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotNull(fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotNull(fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotNull(fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotNull(fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotNull(fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotNull(fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotNull(fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotNull(fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    assertEquals(1,fsData.getFeedbackSessions().size()); \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    assertEquals(1,fsData.getFeedbackSessions().size()); \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if (fs.getDeletedAtTimestamp() == null) { \n        fail(""DeletedAtTimestamp should not be null""); \n    } \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    assertEquals(1,fsData.getFeedbackSessions().size()); \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if (fs.getDeletedAtTimestamp() == null) { \n        assertTrue(false); \n    } \n    assertAllInformationMatch(fs,session1InCourse1); \n}']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    assertEquals(1,fsData.getFeedbackSessions().size()); \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if (fs.getDeletedAtTimestamp() == null) { \n        assertNotNull(fs.getDeletedAtTimestamp());\n    } \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    assertEquals(1,fsData.getFeedbackSessions().size()); \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if (fs.getDeletedAtTimestamp() == null) { \n        assertNotNull(fs.getDeletedAtTimestamp());\n    } \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    assertEquals(1,fsData.getFeedbackSessions().size()); \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if (fs.getDeletedAtTimestamp() == null) { \n        assertNotNull(fs.getDeletedAtTimestamp());\n    } \n    assertAllInformationMatch(fs,session1InCourse1); \n}']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    assertEquals(1,fsData.getFeedbackSessions().size()); \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    assertEquals(1,fsData.getFeedbackSessions().size()); \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertNotNull(fs.getDeletedAtTimestamp()); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    assertEquals(1,fsData.getFeedbackSessions().size()); \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if (fs.getDeletedAtTimestamp() == null) { \n        assertNotNull(fs.getDeletedAtTimestamp()); \n    } \n    assertAllInformationMatch(fs,session1InCourse1); \n}']",False,True,False,True,False,False,False,False,0.5035622650228462,0.0,0.5035622650228462,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
