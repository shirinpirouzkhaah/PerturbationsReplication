gpt-3.5-turbo_NullAssertCF_response,gpt-3.5-turbo_NullAssertCF_mitigation_response,gpt-3.5-turbo_NullAssertCF_inline_response,gpt-3.5-turbo_NullAssertCF_CoT_response,gpt-3.5-turbo_NullAssertCF_EXM,gpt-3.5-turbo_NullAssertCF_mitigation_EXM,gpt-3.5-turbo_NullAssertCF_inline_EXM,gpt-3.5-turbo_NullAssertCF_CoT_EXM,gpt-3.5-turbo_NullAssertCF_retrieval,gpt-3.5-turbo_NullAssertCF_mitigation_retrieval,gpt-3.5-turbo_NullAssertCF_inline_retrieval,gpt-3.5-turbo_NullAssertCF_CoT_retrieval,gpt-3.5-turbo_NullAssertCF_bleu,gpt-3.5-turbo_NullAssertCF_mitigation_bleu,gpt-3.5-turbo_NullAssertCF_inline_bleu,gpt-3.5-turbo_NullAssertCF_CoT_bleu
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equals(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equals(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equalsIgnoreCase(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equalsIgnoreCase(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.contains(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".contentEquals(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.contentEquals(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.matches(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".matches(result)) { assertEquals(""test ok"",result); } }']","['public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equals(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equals(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".contentEquals(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.contentEquals(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equalsIgnoreCase(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equalsIgnoreCase(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equalsIgnoreWhitespace(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equalsIgnoreCase(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equals(result.trim())) { assertEquals(""test ok"",result); } }']","['public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equals(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equals(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equalsIgnoreCase(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".contentEquals(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.contentEquals(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equalsIgnoreCase(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equals(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equals(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equalsIgnoreCase(""test ok"")) { assertEquals(""test ok"",result); } }']","['public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equals(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equals(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".contentEquals(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.contentEquals(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equalsIgnoreCase(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.equalsIgnoreCase(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".contentEqualsIgnoreCase(result)) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!result.contentEqualsIgnoreCase(""test ok"")) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (!""test ok"".equalsIgnoreWhitespace(result)) { assertEquals(""test ok"",result); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != timelock.getFreshTimestamps(10)) { assertEquals(range,timelock.getFreshTimestamps(10)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != timelock.getFreshTimestamps(10)) { assertEquals(range,timelock.getFreshTimestamps(10)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != timelock.getFreshTimestamps(10)) { assertEquals(range,timelock.getFreshTimestamps(10)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != timelock.getFreshTimestamps(10)) { assertEquals(range,timelock.getFreshTimestamps(10)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != timelock.getFreshTimestamps(10)) { assertEquals(range,timelock.getFreshTimestamps(10)); } }']","['public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(5)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(15)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(20)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(25)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(5)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(15)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(20)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(25)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(30)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}']","['public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(10)).thenReturn(range);\n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}']","['public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(eq(numTimestamps))).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(anyInt())).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(eq(numTimestamps))).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(eq(numTimestamps))) { \n        assertEquals(range,timelock.getFreshTimestamps(eq(numTimestamps))); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(eq(numTimestamps))).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(eq(numTimestamps))) { \n        assertEquals(range,timelock.getFreshTimestamps(eq(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(eq(numTimestamps))).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(eq(numTimestamps))) { \n        assertEquals(range,timelock.getFreshTimestamps(eq(numTimestamps))); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(eq(numTimestamps))).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(eq(numTimestamps))).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(eq(numTimestamps)); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(eq(numTimestamps))).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(numTimestamps)) { \n        assertEquals(range,timelock.getFreshTimestamps(eq(numTimestamps))); \n    } \n}', 'public void freshTimestampsDelegatesToTimestampService() { \n    int numTimestamps = 10; \n    TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); \n    when(timestampService.getFreshTimestamps(eq(numTimestamps))).thenReturn(range); \n    if (range != timelock.getFreshTimestamps(eq(numTimestamps))) { \n        assertEquals(range,timelock.getFreshTimestamps(eq(numTimestamps))); \n    } \n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.5827355625822049,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    if (numberExpected != client.listSettings(filter).stream().count()) { \n        assertEquals(numberExpected,client.listSettings(filter).stream().count()); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    if (numberExpected != client.listSettings(filter).streamByPage().count()) { \n        assertEquals(numberExpected,client.listSettings(filter).streamByPage().count()); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    if (numberExpected != client.listSettings(filter).stream().count()) { \n        assertEquals(numberExpected,client.listSettings(filter).stream().count()); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    if (numberExpected != client.listSettings(filter).streamByPage().count()) { \n        assertEquals(numberExpected,client.listSettings(filter).streamByPage().count()); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    if (numberExpected != client.listSettings(filter).stream().count()) { \n        assertEquals(numberExpected,client.listSettings(filter).stream().count()); \n    } \n}']","['public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertNotEquals(0,client.listSettings(filter).streamByPage().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertTrue(client.listSettings(filter).streamByPage().count() > 0); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertNotNull(client.listSettings(filter).streamByPage().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertNotEquals(numberExpected,client.listSettings(filter).streamByPage().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertNotEquals(client.listSettings(filter).streamByPage().count(),numberExpected); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertTrue(client.listSettings(filter).streamByPage().count() != numberExpected); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertNotNull(client.listSettings(filter).streamByPage().count() != null); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertNotEquals(client.listSettings(filter).streamByPage().count(),0); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertTrue(client.listSettings(filter).streamByPage().count() > numberExpected); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertNotNull(client.listSettings(filter).streamByPage().count() > 0); } }']","['public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    long settingsCount = client.listSettings(filter).streamByPage().count();\n    if (numberExpected != settingsCount) { \n        assertEquals(numberExpected, settingsCount); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    long actualSettingsCount = client.listSettings(filter).streamByPage().count();\n    if (numberExpected != actualSettingsCount) { \n        assertEquals(numberExpected, actualSettingsCount); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    long count = client.listSettings(filter).streamByPage().count();\n    if (numberExpected != count) { \n        assertEquals(numberExpected, count); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    long settingsCount = client.listSettings(filter).streamByPage().count();\n    if (numberExpected != settingsCount) { \n        assertEquals(numberExpected, settingsCount); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    long count = client.listSettings(filter).streamByPage().count();\n    if (numberExpected != count) { \n        assertEquals(numberExpected, count); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    long actualSettingsCount = client.listSettings(filter).streamByPage().count();\n    if (numberExpected != actualSettingsCount) { \n        assertEquals(numberExpected, actualSettingsCount); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    long settingsCount = client.listSettings(filter).streamByPage().count();\n    if (numberExpected != settingsCount) { \n        assertEquals(numberExpected, settingsCount); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    long count = client.listSettings(filter).streamByPage().count();\n    if (numberExpected != count) { \n        assertEquals(numberExpected, count); \n    } \n}', 'public void listSettingsWithPagination() { \n    final int numberExpected = 50; \n    for (int value = 0; value < numberExpected; value++) { \n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); \n    } \n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); \n    long settingsCount = client.listSettings(filter).streamByPage().count();\n    if (numberExpected != settingsCount) { \n        assertEquals(numberExpected, settingsCount); \n    } \n}']","['```java\npublic void listSettingsWithPagination() {\n    final int numberExpected = 50;\n    for (int value = 0; value < numberExpected; value++) {\n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix));\n    }\n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix);\n    if (numberExpected != client.listSettings(filter).streamByPage().count()) {\n        assertEquals(numberExpected, client.listSettings(filter).streamByPage().count());\n    }\n}\n```', '```java\npublic void listSettingsWithPagination() {\n    final int numberExpected = 50;\n    for (int value = 0; value < numberExpected; value++) {\n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix));\n    }\n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix);\n    if (numberExpected != client.listSettings(filter).stream().count()) {\n        assertEquals(numberExpected, client.listSettings(filter).stream().count());\n    }\n}\n```', '```java\npublic void listSettingsWithPagination() {\n    final int numberExpected = 50;\n    for (int value = 0; value < numberExpected; value++) {\n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix));\n    }\n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix);\n    if (numberExpected != client.listSettings(filter).streamByPage().count()) {\n        assertEquals(numberExpected, client.listSettings(filter).stream().count());\n    }\n}\n```', '```java\npublic void listSettingsWithPagination() {\n    final int numberExpected = 50;\n    for (int value = 0; value < numberExpected; value++) {\n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix));\n    }\n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix);\n    if (numberExpected != client.listSettings(filter).streamByPage().count()) {\n        assertEquals(numberExpected, client.listSettings(filter).streamByPage().count());\n    }\n}\n```', '```java\npublic void listSettingsWithPagination() {\n    final int numberExpected = 50;\n    for (int value = 0; value < numberExpected; value++) {\n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix));\n    }\n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix);\n    if (numberExpected != client.listSettings(filter).stream().count()) {\n        assertEquals(numberExpected, client.listSettings(filter).streamByPage().count());\n    }\n}\n```', '```java\npublic void listSettingsWithPagination() {\n    final int numberExpected = 50;\n    for (int value = 0; value < numberExpected; value++) {\n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix));\n    }\n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix);\n    if (numberExpected != client.listSettings(filter).stream().count()) {\n        assertEquals(numberExpected, client.listSettings(filter).stream().count());\n    }\n}\n```', '```java\npublic void listSettingsWithPagination() {\n    final int numberExpected = 50;\n    for (int value = 0; value < numberExpected; value++) {\n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix));\n    }\n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix);\n    if (numberExpected != client.listSettings(filter).streamByPage().count()) {\n        assertEquals(numberExpected, client.listSettings(filter).stream().count());\n    }\n}\n```', '```java\npublic void listSettingsWithPagination() {\n    final int numberExpected = 50;\n    for (int value = 0; value < numberExpected; value++) {\n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix));\n    }\n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix);\n    if (numberExpected != client.listSettings(filter).streamByPage().count()) {\n        assertEquals(numberExpected, client.listSettings(filter).streamByPage().count());\n    }\n}\n```', '```java\npublic void listSettingsWithPagination() {\n    final int numberExpected = 50;\n    for (int value = 0; value < numberExpected; value++) {\n        client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix));\n    }\n    SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix);\n    if (numberExpected != client.listSettings(filter).stream().count()) {\n        assertEquals(numberExpected, client.listSettings(filter).streamByPage().count());\n    }\n}\n```']",True,False,False,False,False,False,False,False,0.0,0.9198098208399205,0.7532851335428472,0.9214109120166036
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { return; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { System.out.println(""No assertion needed""); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { int result = 5 + 3; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { String message = ""No need to assert""; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { boolean flag = true; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Object obj = new Object(); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { List<String> list = new ArrayList<>(); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Map<Integer, String> map = new HashMap<>(); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Set<Integer> set = new HashSet<>(); } }']","['public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { eObjectServices.eGet(null,null); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Object result = eObjectServices.eGet(null,null); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Object obj = eObjectServices.eGet(null,null); assertNotNull(obj); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Object obj = eObjectServices.eGet(null,null); assertNotNull(""Object should not be null"", obj); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Object obj = eObjectServices.eGet(null,null); assertTrue(obj != null); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Object obj = eObjectServices.eGet(null,null); assertNotEquals(null, obj); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Object obj = eObjectServices.eGet(null,null); assertNotNull(""Object should not be null"", obj); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Object obj = eObjectServices.eGet(null,null); assertNotNull(obj); }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { Object obj = eObjectServices.eGet(null,null); assertNotNull(""Object should not be null"", obj); }']","['public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertEquals(null,eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertNull(eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertNotNull(eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertTrue(eObjectServices.eGet(null,null) == null); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertFalse(eObjectServices.eGet(null,null) != null); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertSame(null,eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertNotSame(null,eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertArrayEquals(null,eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertNotEquals(null,eObjectServices.eGet(null,null)); } }']","['public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { return; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { continue; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { break; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { throw new RuntimeException(); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { System.out.println(""Result is not null""); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { log.info(""Result is not null""); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { // Do nothing } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { // No action required } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { // Skip this part } }']",False,False,False,False,False,False,False,False,0.12121093525642128,0.12121093525642128,0.12121093525642128,0.12121093525642128
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }']","['public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeCondition(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}']","['public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQLUtil.sanitizeParameter(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); \n    } \n}']","['public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (StringPool.BLANK !=  s) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (!s.isEmpty()) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (s.length() > 0) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (s != null && !s.equals("""")) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (s != null && s.length() > 0) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (s != null && s.isEmpty()) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (s != null && s.isBlank()) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (s != null && s.trim().isEmpty()) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (s != null && s.trim().length() == 0) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}', 'public void testInvalidCondition() throws Exception { \n    final String query = ""and if(length(user())>0,sleep(10),2)""; \n    final String s = SQL.sanitizeCondition(query); \n    assertNotNull(s); \n    if (s != null && s.trim().equals("""")) { \n        assertEquals(StringPool.BLANK, s); \n    } \n}']",True,True,False,False,False,False,False,False,0.0,0.0,0.7670387248467656,0.8153551038173115
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }']","['public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }']","['public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (1 != dependentFields.size()) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!""field"".equals(dependentFields.get(0))) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (1 != dependentFields.size()) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!dependentFields.get(0).equals(""field"")) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (dependentFields.size() != 1) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!""field"".equals(dependentFields.get(0))) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (dependentFields.size() != 1) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!dependentFields.get(0).equals(""field"")) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (dependentFields.size() != 1) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!""field"".equals(dependentFields.get(0))) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (dependentFields.size() != 1) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!dependentFields.get(0).equals(""field"")) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (dependentFields.size() != 1) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!""field"".equals(dependentFields.get(0))) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (dependentFields.size() != 1) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!dependentFields.get(0).equals(""field"")) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (dependentFields.size() != 1) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!""field"".equals(dependentFields.get(0))) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() throws Exception { \n    List<String> dependentFields = fac.getDependentFields(); \n    if (dependentFields.size() != 1) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (!dependentFields.get(0).equals(""field"")) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}']","['public void testGetDependentFields() { \n    try {\n        List<String> dependentFields = fac.getDependentFields(); \n        if (1 != dependentFields.size()) { \n            assertEquals(1,dependentFields.size()); \n        } \n        if (""field"" != dependentFields.get(0)) { \n            assertEquals(""field"",dependentFields.get(0)); \n        } \n    } catch (Exception e) {\n        fail(""Exception thrown: "" + e.getMessage());\n    }\n}', 'public void testGetDependentFields() { \n    List<String> dependentFields = null;\n    try {\n        dependentFields = fac.getDependentFields(); \n    } catch (Exception e) {\n        fail(""Exception thrown: "" + e.getMessage());\n    }\n    if (1 != dependentFields.size()) { \n        assertEquals(1,dependentFields.size()); \n    } \n    if (""field"" != dependentFields.get(0)) { \n        assertEquals(""field"",dependentFields.get(0)); \n    } \n}', 'public void testGetDependentFields() { \n    List<String> dependentFields = null;\n    try {\n        dependentFields = fac.getDependentFields(); \n        if (1 != dependentFields.size()) { \n            assertEquals(1,dependentFields.size()); \n        } \n        if (""field"" != dependentFields.get(0)) { \n            assertEquals(""field"",dependentFields.get(0)); \n        } \n    } catch (Exception e) {\n        fail(""Exception thrown: "" + e.getMessage());\n    }\n}', 'public void testGetDependentFields() { \n    List<String> dependentFields = null;\n    try {\n        dependentFields = fac.getDependentFields(); \n        if (1 != dependentFields.size()) { \n            assertEquals(1,dependentFields.size()); \n        } \n        if (""field"" != dependentFields.get(0)) { \n            assertEquals(""field"",dependentFields.get(0)); \n        } \n    } catch (Exception e) {\n        fail(""Exception thrown: "" + e.getMessage());\n    }\n}', 'public void testGetDependentFields() { \n    List<String> dependentFields = null;\n    try {\n        dependentFields = fac.getDependentFields(); \n        if (1 != dependentFields.size()) { \n            assertEquals(1,dependentFields.size()); \n        } \n        if (""field"" != dependentFields.get(0)) { \n            assertEquals(""field"",dependentFields.get(0)); \n        } \n    } catch (Exception e) {\n        fail(""Exception thrown: "" + e.getMessage());\n    }\n}', 'public void testGetDependentFields() { \n    List<String> dependentFields = null;\n    try {\n        dependentFields = fac.getDependentFields(); \n        if (1 != dependentFields.size()) { \n            assertEquals(1,dependentFields.size()); \n        } \n        if (""field"" != dependentFields.get(0)) { \n            assertEquals(""field"",dependentFields.get(0)); \n        } \n    } catch (Exception e) {\n        fail(""Exception thrown: "" + e.getMessage());\n    }\n}', 'public void testGetDependentFields() { \n    List<String> dependentFields = null;\n    try {\n        dependentFields = fac.getDependentFields(); \n        if (1 != dependentFields.size()) { \n            assertEquals(1,dependentFields.size()); \n        } \n        if (""field"" != dependentFields.get(0)) { \n            assertEquals(""field"",dependentFields.get(0)); \n        } \n    } catch (Exception e) {\n        fail(""Exception thrown: "" + e.getMessage());\n    }\n}', 'public void testGetDependentFields() { \n    List<String> dependentFields = null;\n    try {\n        dependentFields = fac.getDependentFields(); \n        if (1 != dependentFields.size()) { \n            assertEquals(1,dependentFields.size()); \n        } \n        if (""field"" != dependentFields.get(0)) { \n            assertEquals(""field"",dependentFields.get(0)); \n        } \n    } catch (Exception e) {\n        fail(""Exception thrown: "" + e.getMessage());\n    }\n}', 'public void testGetDependentFields() { \n    List<String> dependentFields = null;\n    try {\n        dependentFields = fac.getDependentFields(); \n        if (1 != dependentFields.size()) { \n            assertEquals(1,dependentFields.size()); \n        } \n        if (""field"" != dependentFields.get(0)) { \n            assertEquals(""field"",dependentFields.get(0)); \n        } \n    } catch (Exception e) {\n        fail(""Exception thrown: "" + e.getMessage());\n    }\n}']",True,True,False,False,False,False,False,False,0.0,0.0,0.2543314312919721,0.2863424630911014
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }']","['public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); } }']","['public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!info.name.equals(""Max Mustermann"")) { assertEquals(""Max Mustermann"", info.name); } if (!info.comment.equals(""this is a comment"")) { assertEquals(""this is a comment"", info.comment); } if (!info.email.equals(""max@example.com"")) { assertEquals(""max@example.com"", info.email); }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (!""Max Mustermann"".equals(info.name)) { assertEquals(""Max Mustermann"", info.name); } if (!""this is a comment"".equals(info.comment)) { assertEquals(""this is a comment"", info.comment); } if (!""max@example.com"".equals(info.email)) { assertEquals(""max@example.com"", info.email); }']","['public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (!""Max Mustermann"".equals(info.name)) { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (!""this is a comment"".equals(info.comment)) { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (!""max@example.com"".equals(info.email)) { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (!""Max Mustermann"".equals(info.name)) { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (!""this is a comment"".equals(info.comment)) { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (!""max@example.com"".equals(info.email)) { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (!""Max Mustermann"".equals(info.name)) { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (!""this is a comment"".equals(info.comment)) { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (!""max@example.com"".equals(info.email)) { \n        assertEquals(""max@example.com"", info.email); \n    } \n}']",False,False,False,False,False,False,False,False,0.39599740189559923,0.39599740189559923,0.3900408568962894,0.39599740189559923
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }']","['public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotEquals(null,input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNotNull(output); } if (null == input) { assertNotEquals(null,input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNotNull(output); } if (null == input) { assertNotEquals(null,input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNotNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNotNull(output); } if (null == input) { assertNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNull(output); } if (null == input) { assertNotNull(input); } }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OutputStream output = null; OpenmrsUtil.copyFile(input,output); if (null != output) { assertNotNull(output); } if (null == input) { assertNotEquals(null,input); } }']","['public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotNull(input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNull(input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotNull(input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNull(input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotNull(input); \n    } \n}']","['public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OutputStream output = null; \n    OpenmrsUtil.copyFile(input,output); \n    if (null != output) { \n        assertNull(output); \n    } \n    if (null == input) { \n        assertNotEquals(null,input); \n    } \n}']",False,False,False,False,False,False,False,False,0.6952582546166497,0.6952582546166497,0.6952582546166497,0.6952582546166497
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }']","['private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }']","['private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { // getUuid instead of getArtId, String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }']","['private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    if (1 != array.size()) {\n        Assert.assertEquals(1,array.size());\n    }\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    if (1 != array.size()) {\n        Assert.assertEquals(1,array.size());\n    }\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    if (1 != array.size()) {\n        Assert.assertEquals(1,array.size());\n    }\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    if (1 != array.size()) {\n        Assert.assertEquals(1,array.size());\n    }\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    if (1 != array.size()) {\n        Assert.assertEquals(1,array.size());\n    }\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    if (1 != array.size()) {\n        Assert.assertEquals(1,array.size());\n    }\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    if (1 != array.size()) {\n        Assert.assertEquals(1,array.size());\n    }\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    if (1 != array.size()) {\n        Assert.assertEquals(1,array.size());\n    }\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception {\n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature"";\n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE));\n    if (1 != array.size()) {\n        Assert.assertEquals(1,array.size());\n    }\n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array);\n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj);\n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.4745223087869146,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }']","['public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }']","['public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertEquals(oldValue,null); assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertEquals(oldValue,null); assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertEquals(oldValue,null); assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertEquals(oldValue,null); assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertEquals(oldValue,null); assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }']","['public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }']",False,False,False,False,False,False,False,False,0.5555224188329068,0.5555224188329068,0.5555224188329068,0.5555224188329068
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}']","['public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    } \n}']","['public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount); \n    } \n}']","['public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        assert(RuntimeExceptionOnOnlineListener.onOnlineCount == 1);\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        if (RuntimeExceptionOnOnlineListener.onOnlineCount != 1) {\n            throw new AssertionError(""onOnlineCount is not equal to 1"");\n        }\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        if (RuntimeExceptionOnOnlineListener.onOnlineCount != 1) {\n            throw new RuntimeException(""onOnlineCount is not equal to 1"");\n        }\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        if (RuntimeExceptionOnOnlineListener.onOnlineCount != 1) {\n            System.err.println(""onOnlineCount is not equal to 1"");\n        }\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        if (RuntimeExceptionOnOnlineListener.onOnlineCount != 1) {\n            System.out.println(""onOnlineCount is not equal to 1"");\n        }\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        if (RuntimeExceptionOnOnlineListener.onOnlineCount != 1) {\n            System.out.print(""onOnlineCount is not equal to 1"");\n        }\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        if (RuntimeExceptionOnOnlineListener.onOnlineCount != 1) {\n            System.out.printf(""onOnlineCount is not equal to 1"");\n        }\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        if (RuntimeExceptionOnOnlineListener.onOnlineCount != 1) {\n            System.out.format(""onOnlineCount is not equal to 1"");\n        }\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        if (RuntimeExceptionOnOnlineListener.onOnlineCount != 1) {\n            System.out.println(""onOnlineCount is not equal to 1"");\n        }\n    } \n}', 'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() { \n    if (1 != RuntimeExceptionOnOnlineListener.onOnlineCount) { \n        if (RuntimeExceptionOnOnlineListener.onOnlineCount != 1) {\n            System.out.println(""onOnlineCount is not equal to 1"");\n        }\n    } \n}']",False,True,False,False,False,False,False,False,0.537284965911771,0.0,0.537284965911771,0.41113361690051975
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<>(foo,bar),foo).simplify()); } }']","['public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }']","['public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    if (foo != or.simplify()) { \n        assertEquals(foo, or.simplify()); \n    } \n}', 'public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    Or<String> simplifiedOr = or.simplify();\n    if (foo != simplifiedOr) { \n        assertEquals(foo, simplifiedOr); \n    } \n}', 'public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    Or<String> simplifiedOr = or.simplify();\n    if (!foo.equals(simplifiedOr)) { \n        assertEquals(foo, simplifiedOr); \n    } \n}', 'public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    Or<String> simplifiedOr = or.simplify();\n    if (!foo.equals(simplifiedOr)) { \n        assertEquals(foo, simplifiedOr); \n    } \n}', 'public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    Or<String> simplifiedOr = or.simplify();\n    if (!foo.equals(simplifiedOr)) { \n        assertEquals(foo, simplifiedOr); \n    } \n}', 'public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    Or<String> simplifiedOr = or.simplify();\n    if (!foo.equals(simplifiedOr)) { \n        assertEquals(foo, simplifiedOr); \n    } \n}', 'public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    Or<String> simplifiedOr = or.simplify();\n    if (!foo.equals(simplifiedOr)) { \n        assertEquals(foo, simplifiedOr); \n    } \n}', 'public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    Or<String> simplifiedOr = or.simplify();\n    if (!foo.equals(simplifiedOr)) { \n        assertEquals(foo, simplifiedOr); \n    } \n}', 'public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    Or<String> simplifiedOr = or.simplify();\n    if (!foo.equals(simplifiedOr)) { \n        assertEquals(foo, simplifiedOr); \n    } \n}', 'public void extractSingle() { \n    Or<String> or = new Or<>(new And<>(foo, bar), foo);\n    Or<String> simplifiedOr = or.simplify();\n    if (!foo.equals(simplifiedOr)) { \n        assertEquals(foo, simplifiedOr); \n    } \n}']","['public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<>(foo,bar),foo).simplify()); } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.22131477988685874,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }']","['public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }']","['public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { \n        Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); \n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { \n        Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); \n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!""foobar"".equals(bitreserveClient.getToken().getBearerToken())) { \n        Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); \n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { \n        Assert.assertEquals(""foobar"", bitreserveClient.getToken().getBearerToken()); \n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!""foobar"".equals(bitreserveClient.getToken().getBearerToken())) { \n        Assert.assertEquals(""foobar"", bitreserveClient.getToken().getBearerToken()); \n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { \n        Assert.assertEquals(""foobar"", bitreserveClient.getToken().getBearerToken()); \n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!""foobar"".equals(bitreserveClient.getToken().getBearerToken())) { \n        Assert.assertEquals(""foobar"", bitreserveClient.getToken().getBearerToken()); \n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { \n        Assert.assertEquals(""foobar"", bitreserveClient.getToken().getBearerToken()); \n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!""foobar"".equals(bitreserveClient.getToken().getBearerToken())) { \n        Assert.assertEquals(""foobar"", bitreserveClient.getToken().getBearerToken()); \n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { \n        Assert.assertEquals(""foobar"", bitreserveClient.getToken().getBearerToken()); \n    } \n}']","['public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { \n        Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar"");\n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { \n        Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar"");\n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    if (!""foobar"".equals(bitreserveClient.getToken().getBearerToken())) { \n        Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar"");\n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    Token token = bitreserveClient.getToken();\n    if (!""foobar"".equals(token.getBearerToken())) { \n        Assert.assertEquals(token.getBearerToken(),""foobar"");\n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    Token token = bitreserveClient.getToken();\n    if (!token.getBearerToken().equals(""foobar"")) { \n        Assert.assertEquals(token.getBearerToken(),""foobar"");\n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    Token token = bitreserveClient.getToken();\n    if (!""foobar"".equals(token.getBearerToken())) { \n        Assert.assertEquals(token.getBearerToken(),""foobar"");\n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    Token token = bitreserveClient.getToken();\n    if (!token.getBearerToken().equals(""foobar"")) { \n        Assert.assertEquals(token.getBearerToken(),""foobar"");\n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    Token token = bitreserveClient.getToken();\n    if (!""foobar"".equals(token.getBearerToken())) { \n        Assert.assertEquals(token.getBearerToken(),""foobar"");\n    } \n}', 'public void getTokenShouldReturnToken() { \n    BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); \n    Token token = bitreserveClient.getToken();\n    if (!token.getBearerToken().equals(""foobar"")) { \n        Assert.assertEquals(token.getBearerToken(),""foobar"");\n    } \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != ordergroups1.size()) { assertEquals(1,ordergroups1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != ordergroups.size()) { assertEquals(1,ordergroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups1.size()) { assertEquals(1,orderGroups1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups.size()) { assertEquals(1,orderGroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups1.size()) { assertEquals(1,orderGroups1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups.size()) { assertEquals(1,orderGroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != ordergroups1.size()) { assertEquals(1,ordergroups1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != ordergroups.size()) { assertEquals(1,ordergroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups1.size()) { assertEquals(1,orderGroups1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups.size()) { assertEquals(1,orderGroups.size()); } }']","['public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != ordergroups.size()) { assertEquals(1,ordergroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != patientOrderGroups.size()) { assertEquals(1,patientOrderGroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderGroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != patientOrderGroups1.size()) { assertEquals(1,patientOrderGroups1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> groups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != groups.size()) { assertEquals(1,groups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrders = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != patientOrders.size()) { assertEquals(1,patientOrders.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderList = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != patientOrderList.size()) { assertEquals(1,patientOrderList.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderGroupsList = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != patientOrderGroupsList.size()) { assertEquals(1,patientOrderGroupsList.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderGroup = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != patientOrderGroup.size()) { assertEquals(1,patientOrderGroup.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderGroup1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != patientOrderGroup1.size()) { assertEquals(1,patientOrderGroup1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderGroupVar = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != patientOrderGroupVar.size()) { assertEquals(1,patientOrderGroupVar.size()); } }']","['public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { \n    Patient existingPatient1 = Context.getPatientService().getPatient(8); \n    List<OrderGroup> ordergroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); \n    if (ordergroups1.size() != 1) { \n        assertEquals(1, ordergroups1.size()); \n    } \n}']","['public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient = Context.getPatientService().getPatient(8); List<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient); if (1 != ordergroups.size()) { assertEquals(1,ordergroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient); if (1 != orderGroups.size()) { assertEquals(1,orderGroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient = Context.getPatientService().getPatient(8); List<OrderGroup> orderList = Context.getOrderService().getOrderGroupsByPatient(existingPatient); if (1 != orderList.size()) { assertEquals(1,orderList.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient = Context.getPatientService().getPatient(8); List<OrderGroup> groups = Context.getOrderService().getOrderGroupsByPatient(existingPatient); if (1 != groups.size()) { assertEquals(1,groups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient); if (1 != patientOrderGroups.size()) { assertEquals(1,patientOrderGroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrders = Context.getOrderService().getOrderGroupsByPatient(existingPatient); if (1 != patientOrders.size()) { assertEquals(1,patientOrders.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderList = Context.getOrderService().getOrderGroupsByPatient(existingPatient); if (1 != patientOrderList.size()) { assertEquals(1,patientOrderList.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderGroupsList = Context.getOrderService().getOrderGroupsByPatient(existingPatient); if (1 != patientOrderGroupsList.size()) { assertEquals(1,patientOrderGroupsList.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderListGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient); if (1 != patientOrderListGroups.size()) { assertEquals(1,patientOrderListGroups.size()); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }']","['@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"" != typeString) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"".equals(typeString)) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"".equals(typeString))) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(typeString, ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL""); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"".equals(typeString)) { assertEquals(typeString, ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL""); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(typeString, ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL""); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"".equals(typeString))) { assertEquals(typeString, ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL""); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }']","['@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"".equals(typeString)) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!typeString.contentEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"".contentEquals(typeString)) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!Objects.equals(typeString, ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"".equalsIgnoreCase(typeString)) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!typeString.matches(""RecordType\\\\(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission\\\\) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!Pattern.matches(""RecordType\\\\(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission\\\\) NOT NULL"", typeString)) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!typeString.contains(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if (!typeString.startsWith(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }']","['@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( !typeString.equals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"")) { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }']",False,True,False,False,False,False,False,False,0.8999692131593559,0.0,0.896796756293425,0.896796756293425
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""[abc, bcd, cde]"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!""[abc, bcd, cde]"".equals(list.toString())) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equals(""[abc, bcd, cde]"")) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().contentEquals(""[abc, bcd, cde]"")) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equalsIgnoreCase(""[abc, bcd, cde]"")) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().contains(""[abc, bcd, cde]"")) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().startsWith(""[abc"") || !list.toString().contains(""bcd"") || !list.toString().endsWith(""cde]"")) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().matches(""\\\\[abc, bcd, cde\\\\]"")) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().contentEquals(new StringBuffer(""[abc, bcd, cde]""))) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().contentEquals(new StringBuilder(""[abc, bcd, cde]""))) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}']","['public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}']","['public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (""abcbcdcde"" != list.toString()) { \n        assertEquals(""abcbcdcde"",list.toString());\n    } \n}']","['public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!""[abc, bcd, cde]"".equals(list.toString())) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equals(""[abc, bcd, cde]"")) { \n        assertEquals(""[abc, bcd, cde]"",list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equals(""[abc, bcd, cde]"")) { \n        assertEquals(list.toString(), ""[abc, bcd, cde]"");\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equals(""[abc, bcd, cde]"")) { \n        assertEquals(list.toString(), list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equals(""[abc, bcd, cde]"")) { \n        assertEquals(list.toString(), list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equals(""[abc, bcd, cde]"")) { \n        assertEquals(""[abc, bcd, cde]"", list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equals(""[abc, bcd, cde]"")) { \n        assertEquals(list.toString(), ""[abc, bcd, cde]"");\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equals(""[abc, bcd, cde]"")) { \n        assertEquals(list.toString(), list.toString());\n    } \n}', 'public void toStringTest() { \n    final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); \n    if (!list.toString().equals(""[abc, bcd, cde]"")) { \n        assertEquals(list.toString(), list.toString());\n    } \n}']",True,False,False,False,False,False,False,False,0.0,0.37201358993118516,0.2975262238616708,0.38594519944264993
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}']","['public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}']","['public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"",html); \n    } \n}']","['public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}', 'public void escapedEmphasis() { \n    String html = parseToHtml(""\\\\_foo bar_""); \n    if (html != ""<p>_foo bar_</p>\\n"") { \n        assertEquals(""<p>_foo bar_</p>\\n"", html);\n    } \n}']",False,False,False,False,False,False,False,False,0.4832697830906221,0.4832697830906221,0.43817713423777205,0.4832697830906221
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }']","['public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }']","['public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = new ArrayList<>(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = new ArrayList<>(Collections.emptyList()); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = new ArrayList<>(0); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = new ArrayList<>(Collections.emptyList()); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = new ArrayList<>(List.of()); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = new ArrayList<>(List.of()); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = new ArrayList<>(List.of()); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = new ArrayList<>(List.of()); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = new ArrayList<>(List.of()); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }']","['public void nothingIsIncludedInAnEmptyArray() {\n    List<Integer> emptyList = Collections.emptyList();\n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList);\n    if (-1 != sut.indexOf(1)) {\n        assertEquals(-1, sut.indexOf(1));\n    }\n}', 'public void nothingIsIncludedInAnEmptyArray() {\n    List<Integer> emptyList = Collections.emptyList();\n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList);\n    if (sut.indexOf(1) != -1) {\n        assertEquals(-1, sut.indexOf(1));\n    }\n}', 'public void nothingIsIncludedInAnEmptyArray() {\n    List<Integer> emptyList = Collections.emptyList();\n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList);\n    if (sut.indexOf(1) != -1) {\n        assertEquals(-1, sut.indexOf(1));\n    }\n}', 'public void nothingIsIncludedInAnEmptyArray() {\n    List<Integer> emptyList = Collections.emptyList();\n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList);\n    if (sut.indexOf(1) != -1) {\n        assertEquals(-1, sut.indexOf(1));\n    }\n}', 'public void nothingIsIncludedInAnEmptyArray() {\n    List<Integer> emptyList = Collections.emptyList();\n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList);\n    if (sut.indexOf(1) != -1) {\n        assertEquals(-1, sut.indexOf(1));\n    }\n}', 'public void nothingIsIncludedInAnEmptyArray() {\n    List<Integer> emptyList = Collections.emptyList();\n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList);\n    if (sut.indexOf(1) != -1) {\n        assertEquals(-1, sut.indexOf(1));\n    }\n}', 'public void nothingIsIncludedInAnEmptyArray() {\n    List<Integer> emptyList = Collections.emptyList();\n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList);\n    if (sut.indexOf(1) != -1) {\n        assertEquals(-1, sut.indexOf(1));\n    }\n}', 'public void nothingIsIncludedInAnEmptyArray() {\n    List<Integer> emptyList = Collections.emptyList();\n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList);\n    if (sut.indexOf(1) != -1) {\n        assertEquals(-1, sut.indexOf(1));\n    }\n}', 'public void nothingIsIncludedInAnEmptyArray() {\n    List<Integer> emptyList = Collections.emptyList();\n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList);\n    if (sut.indexOf(1) != -1) {\n        assertEquals(-1, sut.indexOf(1));\n    }\n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenise("""") != Arrays.asList(new Token(TokenType.SYMBOL,""""))) { assertEquals(tokenise(""""),Arrays.asList(new Token(TokenType.SYMBOL,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenise("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenise("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenise(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenise("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenise(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenise("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenise(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenise("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenise("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenise("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenise("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }']","['public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens("""")),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens("""")),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens(""a\' b\' c\'"")),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens("""")),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens(""a\' b\' c\'"")),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens("""")),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens(""a\' b\' c\'"")),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens("""")),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens(""a\' b\' c\'"")),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens("""")),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens(""a\' b\' c\'"")),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens("""")),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens(""a\' b\' c\'"")),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens("""")),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens(""a\' b\' c\'"")),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens("""")),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenise(getTokens(""a\' b\' c\'"")),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }']","['public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (getTokens("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (getTokens(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(getTokens(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }']","['public void lex_generalInputs() { if (tokenize("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenize(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenize("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenize(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenize("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenize(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenize("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenize(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenize("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenize(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenize("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenize(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenize("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenize(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenize("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenize(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }', 'public void lex_generalInputs() { if (tokenize("""") != Arrays.asList(new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""""),Arrays.asList(new Token(TokenType.EOF,""""))); } if (tokenize(""a\' b\' c\'"") != Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))) { assertEquals(tokenize(""a\' b\' c\'""),Arrays.asList(new Token(TokenType.SYMBOL,""a\'""),new Token(TokenType.SYMBOL,""b\'""),new Token(TokenType.SYMBOL,""c\'""),new Token(TokenType.EOF,""""))); } }']",True,False,False,False,False,False,False,False,0.0,0.035012234871175656,0.035012234871175656,0.035012234871175656
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }']","['public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result);\n    } \n}']","['public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { \n    final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); \n    if (result != SAMFormat.SAM) { \n        assertEquals(SAMFormat.SAM, result); // Flip arguments here, for JUnit (unlike TestNG) argument expected value, actual one \n    } \n}']","['public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }']",False,False,False,False,False,False,False,False,0.5965673855253218,0.5965673855253218,0.32211359732229744,0.5965673855253218
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}']","['public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }', 'public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }', 'public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }', 'public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }', 'public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }', 'public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }', 'public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }', 'public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }', 'public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }', 'public void testGetPermittedStorageDomains() { List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"")); assertNotNull(result); assertFalse(result.isEmpty()); if (result.get(0).getId() != existingDomain.getId()) { assertEquals(result.get(0).getId(),existingDomain.getId()); } }']","['public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(),existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(),existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(),existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(),existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(),existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(),existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(),existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(),existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID,ActionGroup.CONFIGURE_VM_STORAGE,Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"")); \n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(),existingDomain.getId()); \n    } \n}']","['public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = new Guid(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}', 'public void testGetPermittedStorageDomains() { \n    Guid guid = Guid.createGuidFromString(""6d849ebf-755f-4552-ad09-9a090cda105d"");\n    List<StorageDomain> result = dao.getPermittedStorageDomainsByStoragePool(EXISTING_USER_ID, ActionGroup.CONFIGURE_VM_STORAGE, guid);\n    assertNotNull(result); \n    assertFalse(result.isEmpty()); \n    if (result.get(0).getId() != existingDomain.getId()) { \n        assertEquals(result.get(0).getId(), existingDomain.getId()); \n    } \n}']",False,True,False,False,False,False,False,False,0.2613022659677713,0.0,0.34718201116725705,0.2613022659677713
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }']","['public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( Arrays.asList(0,1,2,3)); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = Arrays.asList(0,1,2,3); assertNotNull(actual); assertFalse(actual.isEmpty()); if (expected != actual) { assertEquals(expected,actual); } }']","['public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { final List<Integer> list = Collections.unmodifiableList( IntStream.range(0,4).boxed().collect(Collectors.toList())); final List<Integer> actual = ListOps.concat(list,EMPTY_LIST); final List<Integer> expected = IntStream.range(0,4).boxed().collect(Collectors.toList()); assertNotNull(actual); assertFalse(actual.isEmpty()); if (!expected.equals(actual)) { assertEquals(expected,actual); } }']","['public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    if (expected != actual) { \n        assertEquals(expected, actual); \n    } \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    if (!expected.equals(actual)) { \n        assertEquals(expected, actual); \n    } \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected, actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    assertTrue(expected.equals(actual)); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    assertTrue(expected.equals(actual)); \n    assertEquals(expected, actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected, actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    assertTrue(expected.equals(actual)); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected, actual); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    assertTrue(expected.equals(actual)); \n}', 'public void shouldConcatenateOneEmptyAndOneNonEmptyLists() { \n    final List<Integer> list = Collections.unmodifiableList(Arrays.asList(0, 1, 2, 3)); \n    final List<Integer> actual = ListOps.concat(list, EMPTY_LIST); \n    final List<Integer> expected = Arrays.asList(0, 1, 2, 3); \n    assertNotNull(actual); \n    assertFalse(actual.isEmpty()); \n    assertEquals(expected, actual); \n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.2217698518500482,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (address.getHost() != clonedAddress.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (address.getPort() != clonedAddress.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (address.getInetAddress() != clonedAddress.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (address.getInetSocketAddress() != clonedAddress.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (address.getHost() != clonedAddress.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (address.getInetAddress() != clonedAddress.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (address.getPort() != clonedAddress.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (address.getInetSocketAddress() != clonedAddress.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (address.getHost() != clonedAddress.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (address.getInetAddress() != clonedAddress.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (address.getHost() != clonedAddress.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (address.getPort() != clonedAddress.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (address.getInetAddress() != clonedAddress.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (address.getInetSocketAddress() != clonedAddress.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }']","['public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }']","['public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }']","['public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }']",True,False,False,False,False,False,False,False,0.0,0.40413498796364516,0.40413498796364516,0.414905408497018
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();']","['expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();']","['expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();']","['public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); if (identityKeystorePath.toUri().toString() != sslContextFactory.getKeyStorePath()) { assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); } if (identityKeystoreType != sslContextFactory.getKeyStoreType()) { assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); } assertNotNull(sslContextFactory.getKeyStore()); if (truststorePath.toUri().toString() != sslContextFactory.getTrustStorePath()) { assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); } if (truststoreType != sslContextFactory.getTrustStoreType()) { assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); } assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); if (identityKeystorePath.toUri().toString() != sslContextFactory.getKeyStorePath()) { assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); } if (identityKeystoreType != sslContextFactory.getKeyStoreType()) { assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); } assertNotNull(sslContextFactory.getKeyStore()); if (truststorePath.toUri().toString() != sslContextFactory.getTrustStorePath()) { assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); } if (truststoreType != sslContextFactory.getTrustStoreType()) { assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); } assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); if (identityKeystorePath.toUri().toString() != sslContextFactory.getKeyStorePath()) { assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); } if (identityKeystoreType != sslContextFactory.getKeyStoreType()) { assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); } assertNotNull(sslContextFactory.getKeyStore()); if (truststorePath.toUri().toString() != sslContextFactory.getTrustStorePath()) { assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); } if (truststoreType != sslContextFactory.getTrustStoreType()) { assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); } assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); if (identityKeystorePath.toUri().toString() != sslContextFactory.getKeyStorePath()) { assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); } if (identityKeystoreType != sslContextFactory.getKeyStoreType()) { assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); } assertNotNull(sslContextFactory.getKeyStore()); if (truststorePath.toUri().toString() != sslContextFactory.getTrustStorePath()) { assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); } if (truststoreType != sslContextFactory.getTrustStoreType()) { assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); } assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); if (identityKeystorePath.toUri().toString() != sslContextFactory.getKeyStorePath()) { assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); } if (identityKeystoreType != sslContextFactory.getKeyStoreType()) { assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); } assertNotNull(sslContextFactory.getKeyStore()); if (truststorePath.toUri().toString() != sslContextFactory.getTrustStorePath()) { assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); } if (truststoreType != sslContextFactory.getTrustStoreType()) { assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); } assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); String identityKeystoreType = ""jks""; char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); if (identityKeystorePath.toUri().toString() != sslContextFactory.getKeyStorePath()) { assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); } if (identityKeystoreType != sslContextFactory.getKeyStoreType()) {']",False,False,False,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }']","['public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getFeaturePrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getFeaturePrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getFeaturePrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }']","['public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }', 'public void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }']","['```java\npublic void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + DEVELOP_BRANCH)); }\n```', '```java\npublic void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + MASTER_BRANCH_MISSING)); }\n```', '```java\npublic void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + config.getMaster()));\n```', '```java\npublic void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + config.getMaster()));\n```', '```java\npublic void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + config.getMaster()));\n```', '```java\npublic void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + MASTER_BRANCH_MISSING));\n```', '```java\npublic void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + config.getMaster()));\n```', '```java\npublic void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + config.getMaster()));\n```', '```java\npublic void testInitMissingMaster() throws Exception { selectProject(PROJ1); clickInit(); fillDialog(MASTER_BRANCH_MISSING); bot.waitUntil(shellIsActive(UIText.InitDialog_masterBranchIsMissing)); bot.button(""Yes"").click(); bot.waitUntil(Conditions.waitForJobs(JobFamilies.GITFLOW_FAMILY,""Git flow jobs"")); GitFlowRepository gitFlowRepository = new GitFlowRepository(repository); GitFlowConfig config = gitFlowRepository.getConfig(); if (DEVELOP_BRANCH != repository.getBranch()) { assertEquals(DEVELOP_BRANCH,repository.getBranch()); } if (MASTER_BRANCH_MISSING != config.getMaster()) { assertEquals(MASTER_BRANCH_MISSING,config.getMaster()); } if (FEATURE_BRANCH_PREFIX != config.getFeaturePrefix()) { assertEquals(FEATURE_BRANCH_PREFIX,config.getFeaturePrefix()); } if (RELEASE_BRANCH_PREFIX != config.getReleasePrefix()) { assertEquals(RELEASE_BRANCH_PREFIX,config.getReleasePrefix()); } if (HOTFIX_BRANCH_PREFIX != config.getHotfixPrefix()) { assertEquals(HOTFIX_BRANCH_PREFIX,config.getHotfixPrefix()); } if (VERSION_TAG_PREFIX != config.getVersionTagPrefix()) { assertEquals(VERSION_TAG_PREFIX,config.getVersionTagPrefix()); } assertNotNull(repository.findRef(Constants.R_HEADS + config.getMaster()));\n```']",False,False,False,False,False,False,False,False,0.3358698277025728,0.3358698277025728,0.3358698277025728,0.32655009736727736
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }']","['public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }']","['public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }']","['public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.37840047970971086,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if ( storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue']","['```java\npublic void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Object[] beans = (Object[]) stat.get(""beans""); \n    Map<String,Object> blockStats = null; \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    assertNotNull(blockStats); \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    assertNotNull(storageTypeStatsList); \n    if (4 != storageTypeStatsList.length) { \n        assertEquals(4,storageTypeStatsList.length); \n    } \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) {\n            case ""ARCHIVE"":\n            case ""DISK"":\n                if (3L != storageTypeStats.get(""nodesInService"")) { \n                    assertEquals(3L,storageTypeStats.get(""nodesInService"")); \n                }\n                break;\n            case ""RAM_DISK"":\n                if (7L != storageTypeStats.get(""nodesInService"")) { \n                    assertEquals(7L,storageTypeStats.get(""nodesInService"")); \n                }\n                break;\n            case ""NVDIMM"":\n                if (1L != storageTypeStats.get(""nodesInService"")) { \n                    assertEquals(1L,storageTypeStats.get(""nodesInService"")); \n                }\n                break;\n            default:\n                fail();\n        }\n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}\n```', '```java\npublic void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Object[] beans = (Object[]) stat.get(""beans""); \n    Map<String,Object> blockStats = null; \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    assertNotNull(blockStats); \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    assertNotNull(storageTypeStatsList); \n    if (4 != storageTypeStatsList.length) { \n        assertEquals(4,storageTypeStatsList.length); \n    } \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) {\n            case ""ARCHIVE"":\n            case ""DISK"":\n                if (3L != storageTypeStats.get(""nodesInService"")) { \n                    assertEquals(3L,storageTypeStats.get(""nodesInService"")); \n                }\n                break;\n            case ""RAM_DISK"":\n                if (7L != storageTypeStats.get(""nodesInService"")) { \n                    assertEquals(7L,storageTypeStats.get(""nodesInService"")); \n                }\n                break;\n            case ""NVDIMM"":\n                if (1L != storageTypeStats.get(""nodesInService"")) { \n                    assertEquals(1L,storageTypeStats.get(""nodesInService"")); \n                }\n                break;\n            default:\n                fail();\n        }\n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}\n```', '```java\npublic void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Object[] beans = (Object[]) stat.get(""beans""); \n    Map<String,Object> blockStats = null; \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    assertNotNull(blockStats); \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    assertNotNull(storageTypeStatsList); \n    if (4 != storageTypeStatsList.length) { \n        assertEquals(4,storageTypeStatsList.length); \n    } \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) {\n            case ""ARCHIVE"":\n            case ""DISK"":\n                if (3L != storageTypeStats.get(""nodesInService"")) { \n                    assertEquals(3L,storageTypeStats.get(""nodesInService"")); \n                }\n                break;\n            case ""RAM_DISK"":\n                if (7L != storageTypeStats.get(""nodesInService"")) { \n                    assertEquals(7L,storageTypeStats.get(""nodesInService"")); \n                }\n                break;\n            case ""NVDIMM"":\n                if (1L != storageTypeStats.get(""nodesInService"")) { \n                    assertEquals(1L,storageTypeStats.get(""nodesInService"")); \n                }\n                break;\n            default:\n                fail();\n        }\n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}\n```']",True,True,False,False,False,False,False,False,0.0,0.0,0.2971649329074902,0.3811455967685013
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration() / 1000) { assertEquals(200000,ct.getDuration() / 1000); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration() / 1000) { assertEquals(200000,ct.getDuration() / 1000); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }']","['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }']","['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (!mins.get(i).equals(region.getMin(new Vector3i()))) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (!max.get(i).equals(region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (!mins.get(i).equals(region.getMin(new Vector3i()))) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (!max.get(i).equals(region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (!mins.get(i).equals(region.getMin(new Vector3i()))) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (!max.get(i).equals(region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (!mins.get(i).equals(region.getMin(new Vector3i()))) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (!max.get(i).equals(region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (!mins.get(i).equals(region.getMin(new Vector3i()))) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (!max.get(i).equals(region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (!mins.get(i).equals(region.getMin(new Vector3i()))) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (!max.get(i).equals(region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (!mins.get(i).equals(region.getMin(new Vector3i()))) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (!max.get(i).equals(region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (!mins.get(i).equals(region.getMin(new Vector3i()))) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (!max.get(i).equals(region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }']","['public void testCreateRegionWithMinMax() { \n    List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); \n    List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); \n    List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); \n    for (int i = 0; i < mins.size(); ++i) { \n        BlockRegion region = new BlockRegion(mins.get(i), max.get(i));\n        if (mins.get(i) != region.getMin(new Vector3i())) { \n            assertEquals(mins.get(i),region.getMin(new Vector3i())); \n        } \n        if (max.get(i) != region.getMax(new Vector3i())) { \n            assertEquals(max.get(i),region.getMax(new Vector3i())); \n        } \n        if (expectedSize.get(i) != region.getSize(new Vector3i())) { \n            assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); \n        } \n    } \n}', 'public void testCreateRegionWithMinMax() { \n    List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); \n    List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); \n    List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); \n    for (int i = 0; i < mins.size(); ++i) { \n        BlockRegion region = new BlockRegion(mins.get(i), max.get(i));\n        if (!mins.get(i).equals(region.getMin(new Vector3i()))) { \n            assertEquals(mins.get(i),region.getMin(new Vector3i())); \n        } \n        if (!max.get(i).equals(region.getMax(new Vector3i()))) { \n            assertEquals(max.get(i),region.getMax(new Vector3i())); \n        } \n        if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { \n            assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); \n        } \n    } \n}', 'public void testCreateRegionWithMinMax() { \n    List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); \n    List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); \n    List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); \n    for (int i = 0; i < mins.size(); ++i) { \n        BlockRegion region = new BlockRegion(mins.get(i), max.get(i));\n        if (!mins.get(i).equals(region.getMin(new Vector3i()))) { \n            assertEquals(mins.get(i),region.getMin(new Vector3i())); \n        } \n        if (!max.get(i).equals(region.getMax(new Vector3i()))) { \n            assertEquals(max.get(i),region.getMax(new Vector3i())); \n        } \n        if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { \n            assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); \n        } \n    } \n}', 'public void testCreateRegionWithMinMax() { \n    List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); \n    List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); \n    List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); \n    for (int i = 0; i < mins.size(); ++i) { \n        BlockRegion region = new BlockRegion(mins.get(i), max.get(i));\n        if (!mins.get(i).equals(region.getMin(new Vector3i()))) { \n            assertEquals(mins.get(i),region.getMin(new Vector3i())); \n        } \n        if (!max.get(i).equals(region.getMax(new Vector3i()))) { \n            assertEquals(max.get(i),region.getMax(new Vector3i())); \n        } \n        if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { \n            assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); \n        } \n    } \n}', 'public void testCreateRegionWithMinMax() { \n    List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); \n    List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); \n    List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); \n    for (int i = 0; i < mins.size(); ++i) { \n        BlockRegion region = new BlockRegion(mins.get(i), max.get(i));\n        if (!mins.get(i).equals(region.getMin(new Vector3i()))) { \n            assertEquals(mins.get(i),region.getMin(new Vector3i())); \n        } \n        if (!max.get(i).equals(region.getMax(new Vector3i()))) { \n            assertEquals(max.get(i),region.getMax(new Vector3i())); \n        } \n        if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { \n            assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); \n        } \n    } \n}', 'public void testCreateRegionWithMinMax() { \n    List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); \n    List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); \n    List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); \n    for (int i = 0; i < mins.size(); ++i) { \n        BlockRegion region = new BlockRegion(mins.get(i), max.get(i));\n        if (!mins.get(i).equals(region.getMin(new Vector3i()))) { \n            assertEquals(mins.get(i),region.getMin(new Vector3i())); \n        } \n        if (!max.get(i).equals(region.getMax(new Vector3i()))) { \n            assertEquals(max.get(i),region.getMax(new Vector3i())); \n        } \n        if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { \n            assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); \n        } \n    } \n}', 'public void testCreateRegionWithMinMax() { \n    List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); \n    List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); \n    List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); \n    for (int i = 0; i < mins.size(); ++i) { \n        BlockRegion region = new BlockRegion(mins.get(i), max.get(i));\n        if (!mins.get(i).equals(region.getMin(new Vector3i()))) { \n            assertEquals(mins.get(i),region.getMin(new Vector3i())); \n        } \n        if (!max.get(i).equals(region.getMax(new Vector3i()))) { \n            assertEquals(max.get(i),region.getMax(new Vector3i())); \n        } \n        if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { \n            assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); \n        } \n    } \n}', 'public void testCreateRegionWithMinMax() { \n    List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); \n    List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); \n    List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); \n    for (int i = 0; i < mins.size(); ++i) { \n        BlockRegion region = new BlockRegion(mins.get(i), max.get(i));\n        if (!mins.get(i).equals(region.getMin(new Vector3i()))) { \n            assertEquals(mins.get(i),region.getMin(new Vector3i())); \n        } \n        if (!max.get(i).equals(region.getMax(new Vector3i()))) { \n            assertEquals(max.get(i),region.getMax(new Vector3i())); \n        } \n        if (!expectedSize.get(i).equals(region.getSize(new Vector3i()))) { \n            assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); \n        } \n    } \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }']","['public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }']","['public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }']","['public void testStateChangeWithTransitiveState() throws InterruptedException {\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        try {\n            processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        try {\n            processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        } catch (InterruptedException e) {\n            throw new InterruptedException(""Interrupted exception occurred"");\n        }\n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        try {\n            processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        } catch (InterruptedException e) {\n            System.out.println(""Interrupted exception occurred"");\n        }\n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        try {\n            processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        } catch (InterruptedException e) {\n            System.err.println(""Interrupted exception occurred"");\n        }\n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        try {\n            processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        } catch (InterruptedException e) {\n            System.out.println(""Interrupted exception occurred"");\n            Thread.currentThread().interrupt();\n        }\n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        try {\n            processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        } catch (InterruptedException e) {\n            System.out.println(""Interrupted exception occurred"");\n            Thread.currentThread().interrupt();\n        }\n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        try {\n            processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        } catch (InterruptedException e) {\n            System.out.println(""Interrupted exception occurred"");\n            Thread.currentThread().interrupt();\n        }\n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        try {\n            processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        } catch (InterruptedException e) {\n            System.out.println(""Interrupted exception occurred"");\n            Thread.currentThread().interrupt();\n        }\n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}']",True,True,False,False,False,False,False,False,0.0,0.0,0.5896613549548209,0.5896613549548209
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",<START>List.of(user1.getName()),false,null,null,null,null,null);<END> session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }']","['public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }']","['public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getAct']","['public void testUserTasksAsUser() { \n    DocumentModel document = getDocument(); \n    assertNotNull(document); \n    taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); \n    session.save(); \n    List<Task> tasks = taskService.getTaskInstances(document,user1,session); \n    assertNotNull(tasks); \n    if (1 != tasks.size()) { \n        assertEquals(1,tasks.size()); \n    } \n    Task task = tasks.get(0); \n    if (""Task assigned to user1"" != task.getName()) { \n        assertEquals(""Task assigned to user1"",task.getName()); \n    } \n    List<String> pooledActorIds = task.getActors(); \n    if (1 != pooledActorIds.size()) { \n        assertEquals(1,pooledActorIds.size()); \n    } \n    assertTrue(pooledActorIds.contains(user1.getName())); \n    tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); \n    assertNotNull(tasks); \n    if (1 != tasks.size()) { \n        assertEquals(1,tasks.size()); \n    } \n    try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { \n        tasks = taskService.getTaskInstances(document,user1,session1); \n        assertNotNull(tasks); \n        if (1 != tasks.size()) { \n            assertEquals(1,tasks.size()); \n        } \n        task = tasks.get(0); \n        if (""Task assigned to user1"" != task.getName()) { \n            assertEquals(""Task assigned to user1"",task.getName()); \n        } \n        pooledActorIds = task.getActors(); \n        if (1 != pooledActorIds.size()) { \n            assertEquals(1,pooledActorIds.size()); \n        } \n        assertTrue(pooledActorIds.contains(user1.getName())); \n        tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); \n        assertNotNull(tasks); \n        if (1 != tasks.size()) { \n            assertEquals(1,tasks.size()); \n        } \n    } \n    try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { \n        tasks = taskService.getTaskInstances(document,user1,session2); \n        assertNotNull(tasks); \n        if (1 != tasks.size()) { \n            assertEquals(1,tasks.size()); \n        } \n        task = tasks.get(0); \n        if (""Task assigned to user1"" != task.getName()) { \n            assertEquals(""Task assigned to user1"",task.getName()); \n        } \n        pooledActorIds = task.getActors(); \n        if (1 != pooledActorIds.size()) { \n            assertEquals(1,pooledActorIds.size()); \n        } \n        assertTrue(pooledActorIds.contains(user1.getName())); \n        tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); \n        assertNotNull(tasks); \n        if (1 != tasks.size()) { \n            assertEquals(1,tasks.size()); \n        } \n    } \n}', 'public void testUserTasksAsUser() { \n    DocumentModel document = getDocument(); \n    assertNotNull(document); \n    taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); \n    session.save(); \n    List<Task> tasks = taskService.getTaskInstances(document,user1,session); \n    assertNotNull(tasks); \n    if (1 != tasks.size()) { \n        assertEquals(1,tasks.size()); \n    } \n    Task task = tasks.get(0); \n    if (""Task assigned to user1"" != task.getName()) { \n        assertEquals(""Task assigned to user1"",task.getName()); \n    } \n    List<String> pooledActorIds = task.getActors(); \n    if (1 != pooledActorIds.size()) { \n        assertEquals(1,pooledActorIds.size()); \n    } \n    assertTrue(pooledActorIds.contains(user1.getName())); \n    tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); \n    assertNotNull(tasks); \n    if (1 != tasks.size()) { \n        assertEquals(1,tasks.size()); \n    } \n    try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { \n        tasks = taskService.getTaskInstances(document,user1,session1); \n        assertNotNull(tasks); \n        if (1 != tasks.size()) { \n            assertEquals(1,tasks.size()); \n        } \n        task = tasks.get(0); \n        if (""Task assigned to user1"" != task.getName()) { \n            assertEquals(""Task assigned to user1"",task.getName()); \n        } \n        pooledActorIds = task.getActors(); \n        if (1 != pooledActorIds.size()) { \n            assertEquals(1,pooledActorIds.size()); \n        } \n        assertTrue(pooledActorIds.contains(user1.getName())); \n        tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); \n        assertNotNull(tasks); \n        if (1 != tasks.size()) { \n            assertEquals(1,tasks.size()); \n        } \n    } \n    try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { \n        tasks = taskService.getTaskInstances(document,user1,session2); \n        assertNotNull(tasks); \n        if (1 != tasks.size()) { \n            assertEquals(1,tasks.size()); \n        } \n        task = tasks.get(0); \n        if (""Task assigned to user1"" != task.getName()) { \n            assertEquals(""Task assigned to user1"",task.getName()); \n        } \n        pooledActorIds = task.getActors(); \n        if (1 != pooledActorIds.size()) { \n            assertEquals(1,pooledActorIds.size()); \n        } \n        assertTrue(pooledActorIds.contains(user1.getName())); \n        tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); \n        assertNotNull(tasks); \n        if (1 != tasks.size()) { \n            assertEquals(1,tasks.size()); \n        } \n    } \n}']",False,True,True,True,False,False,False,False,0.32520821937529026,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); assertEquals(connection.getChunkLength(),4096); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); assertEquals(4096, connection.getChunkLength()); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); assertEquals(connection.getChunkLength(),4096); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); assertEquals(4096, connection.getChunkLength()); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); assertEquals(connection.getChunkLength(),4096); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); assertEquals(4096, connection.getChunkLength()); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length""); assertEquals(connection.getChunkLength(),4096); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length""); assertEquals(4096, connection.getChunkLength()); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length""); assertEquals(connection.getChunkLength(),4096); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length""); assertEquals(4096, connection.getChunkLength()); }']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.7790423063729629,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }']","['public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids, new Text(),id.getRenewer()); } }']","['public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,id.getRenewer(),new Text()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,id.getRenewer(),new Text()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,id.getRenewer(),new Text()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,id.getRenewer(),new Text()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer()); } }']","['public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { \n    SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); \n    SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); \n    String ids = id.toString(); \n    assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); \n    assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); \n    if (new Text() != id.getRenewer()) { \n        assertEquals(""renewer in "" + ids, new Text(), id.getRenewer()); \n    } \n}', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { \n    SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); \n    SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); \n    String ids = id.toString(); \n    assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); \n    assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); \n    if (new Text() != id.getRenewer()) { \n        assertEquals(""renewer in "" + ids, new Text(), id.getRenewer()); \n    } \n}', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { \n    SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); \n    SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); \n    String ids = id.toString(); \n    assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); \n    assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); \n    if (new Text() != id.getRenewer()) { \n        assertEquals(""renewer in "" + ids, new Text(), id.getRenewer()); \n    } \n}']",False,False,False,False,False,False,False,False,0.3275929658218657,0.3275929658218657,0.277183667132934,0.3541115147361652
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }']","['public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }']","['public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } catch (Exception e) { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } catch (Exception e) { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } catch (Exception e) { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } catch (Exception e) { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } catch (Exception e) { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } catch (Exception e) { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } catch (Exception e) { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } catch (Exception e) { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }']","['public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } finally { conn.close(); } }']",False,False,False,False,False,False,False,False,0.330449423013568,0.33895319239625304,0.3685609531696388,0.33895319239625304
"['public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout"".orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }']","['public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }']","['public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }']","['public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (!tryGetFutureValue(timeoutFuture,10,SECONDS).get().equals(""timeout"")) { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""timeout""); } else { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""failed""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); String futureValue = tryGetFutureValue(timeoutFuture,10,SECONDS).get(); if (!futureValue.equals(""timeout"")) { assertEquals(futureValue,""failed""); } else { assertEquals(futureValue,""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); String futureValue = tryGetFutureValue(timeoutFuture,10,SECONDS).get(); if (!futureValue.equals(""timeout"")) { assertEquals(futureValue,""failed""); } else { assertEquals(futureValue,""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); String futureValue = tryGetFutureValue(timeoutFuture,10,SECONDS).get(); if (!futureValue.equals(""timeout"")) { assertEquals(futureValue,""failed""); } else { assertEquals(futureValue,""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); String futureValue = tryGetFutureValue(timeoutFuture,10,SECONDS).get(); if (!futureValue.equals(""timeout"")) { assertEquals(futureValue,""failed""); } else { assertEquals(futureValue,""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); String futureValue = tryGetFutureValue(timeoutFuture,10,SECONDS).get(); if (!futureValue.equals(""timeout"")) { assertEquals(futureValue,""failed""); } else { assertEquals(futureValue,""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); String futureValue = tryGetFutureValue(timeoutFuture,10,SECONDS).get(); if (!futureValue.equals(""timeout"")) { assertEquals(futureValue,""failed""); } else { assertEquals(futureValue,""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); String futureValue = tryGetFutureValue(timeoutFuture,10,SECONDS).get(); if (!futureValue.equals(""timeout"")) { assertEquals(futureValue,""failed""); } else { assertEquals(futureValue,""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); String futureValue = tryGetFutureValue(timeoutFuture,10,SECONDS).get(); if (!futureValue.equals(""timeout"")) { assertEquals(futureValue,""failed""); } else { assertEquals(futureValue,""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }']",False,False,False,False,False,False,False,False,0.3001288137286496,0.3001288137286496,0.3001288137286496,0.3179255252027316
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }']","['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }']","['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertNotNull(future); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNotNull(future); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertNotNull(future); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } assertNotNull(future); if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } assertNotNull(future); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); assertNotNull(future); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); assertNotNull(future); }']","['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); assertTrue(true); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch arrival = new CountDownLatch(2); CountDownLatch release = new CountDownLatch(1); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); if (1 != thrown.get()) { assertEquals(1,thrown.get()); } if (0 != retried.get()) { assertEquals(0,retried.get()); } release.countDown(); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}']","['public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }']","['public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup()); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup()); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup()); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup()); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup()); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup()); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup()); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup()); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}', 'public void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup()); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}']","['```java\npublic void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}\n```', '```java\npublic void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}\n```', '```java\npublic void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}\n```', '```java\npublic void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}\n```', '```java\npublic void testSortedSerialization() throws Exception { \n    final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; \n    GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); \n    checkBasicAPIs(strings, deserialized, true); \n    if (-13 != deserialized.indexOf(""q"")) { \n        Assert.assertEquals(-13,deserialized.indexOf(""q"")); \n    } \n    if (-9 != deserialized.indexOf(""howdydo"")) { \n        Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); \n    } \n    if (-1 != deserialized.indexOf(""1111"")) { \n        Assert.assertEquals(-1,deserialized.indexOf(""1111"")); \n    } \n}\n```']",True,True,False,False,False,False,False,False,0.0,0.0,0.1268156204812443,0.1722367954846505
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }']","['public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }']","['public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }']","['public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }']",False,False,True,True,False,False,False,False,0.183201565138923,0.183201565138923,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().entrySet().stream().map(Map.Entry<String, String>::getKey).collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { \n    String prefixName = ""key_""; \n    String prefixValue = ""val_""; \n    List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); \n    client.unsetSessionVariables(unsetList); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        String val = prefixValue + i; \n        if (i + 4 != client.getAllSessionVariables().size()) { \n            assertEquals(i + 4, client.getAllSessionVariables().size()); \n        } \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n        Map<String, String> map = Maps.newHashMap(); \n        map.put(key, val); \n        client.updateSessionVariables(map); \n        if (i + 5 != client.getAllSessionVariables().size()) { \n            assertEquals(i + 5, client.getAllSessionVariables().size()); \n        } \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n    } \n    int totalSessionVarNum = client.getAllSessionVariables().size(); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n        client.unsetSessionVariables(Lists.newArrayList(key)); \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n    } \n    if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { \n        assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); \n    } \n}', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { \n    String prefixName = ""key_""; \n    String prefixValue = ""val_""; \n    List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); \n    client.unsetSessionVariables(unsetList); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        String val = prefixValue + i; \n        if (i + 4 != client.getAllSessionVariables().size()) { \n            assertEquals(i + 4, client.getAllSessionVariables().size()); \n        } \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n        Map<String, String> map = Maps.newHashMap(); \n        map.put(key, val); \n        client.updateSessionVariables(map); \n        if (i + 5 != client.getAllSessionVariables().size()) { \n            assertEquals(i + 5, client.getAllSessionVariables().size()); \n        } \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n    } \n    int totalSessionVarNum = client.getAllSessionVariables().size(); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n        client.unsetSessionVariables(Lists.newArrayList(key)); \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n    } \n    if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { \n        assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); \n    } \n}\n...']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } System.out.println(""json:"" + json); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); System.out.println(""json:"" + json); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); System.out.println(""json:"" + json); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); System.out.println(""json:"" + json); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { System.out.println(""json:"" + json); Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } System.out.println(""json:"" + json); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } System.out.println(""json:"" + json); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } System.out.println(""json:"" + json); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } System.out.println(""json:"" + json); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } System.out.println(""json:"" + json); }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }']",False,True,False,True,False,False,False,False,0.34785119998828434,0.0,0.5062798564216486,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }']","['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }']","['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); // Minor typo in variable name; extra unneeded ""m"" if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }']","['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['List<WritablePartitionId> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}', 'List<ReadOnlyPartitionId> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}', 'List<WritablePartition> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}', 'List<Partition> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}', 'List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}', 'List<WritablePartitionId> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}', 'List<ReadOnlyPartition> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}', 'List<WritablePartition> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}', 'List<ReadOnlyPartitionId> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}', 'List<Partition> partitionIds = clusterMapManager.getWritablePartitionIds();\nif (partitionIds.size() != testPartitionLayout.getPartitionCount()) {\n    assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount());\n}']","['public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }']","['public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<>(clusterMapManager.getWritablePartitionIds()); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer']","['public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } <START>List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds();<END> if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }']",False,False,False,False,False,False,False,False,1.0099516568059333e-06,0.5692847942748531,0.6450312259879414,0.6088246611827628
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);']","['public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }']","['org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);', 'org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery);\nfindQuery.fetch(fetch);\nfindQuery.offset(10);\nfindQuery.pageSize(10);\nfindQuery.sort(dataSort);\norg.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery);\ncountQuery.offset(0);\ncountQuery.pageSize(Integer.MAX_VALUE);']","['public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }']",False,True,False,True,False,False,False,False,6.76990841083923e-07,0.0,0.0008267474924372207,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }']","['public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }']","['public void testStateAdvancedChange_startFails() throws InterruptedException { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() throws InterruptedException { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() throws InterruptedException { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() throws InterruptedException { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }', 'public void testStateAdvancedChange_startFails() throws InterruptedException { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); if (app.getTomcatVm() != processor.scopedInstance) { Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); } if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); } if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); } processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) { Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); } }']","['public void testStateAdvancedChange_startFails() throws InterruptedException {\n    this.agent.stop();\n    this.agent = new Agent() {\n        @Override\n        public PluginInterface findPlugin(Instance instance) {\n            return new PluginMock() {\n                @Override\n                public void start(Instance instance) throws PluginException {\n                    throw new PluginException(""For tests..."");\n                }\n            };\n        }\n    };\n    this.agent.setMessagingType(MessagingConstants.FACTORY_TEST);\n    this.agent.start();\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor();\n    TestApplicationTemplate app = new TestApplicationTemplate();\n    processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcat()));\n    if (app.getTomcat() != processor.scopedInstance) {\n        Assert.assertEquals(app.getTomcat(), processor.scopedInstance);\n    }\n    if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) {\n        Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED, processor.scopedInstance.getStatus());\n    }\n    if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) {\n        Assert.assertEquals(InstanceStatus.NOT_DEPLOYED, app.getTomcat().getStatus());\n    }\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(), InstanceStatus.DEPLOYED_STARTED));\n    if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) {\n        Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED, app.getTomcat().getStatus());\n    }\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(), InstanceStatus.DEPLOYED_STOPPED));\n    if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) {\n        Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED, app.getTomcat().getStatus());\n    }\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(), InstanceStatus.NOT_DEPLOYED));\n    if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) {\n        Assert.assertEquals(InstanceStatus.NOT_DEPLOYED, app.getTomcat().getStatus());\n    }\n}', 'public void testStateAdvancedChange_startFails() {\n    this.agent.stop();\n    this.agent = new Agent() {\n        @Override\n        public PluginInterface findPlugin(Instance instance) {\n            return new PluginMock() {\n                @Override\n                public void start(Instance instance) throws PluginException {\n                    throw new PluginException(""For tests..."");\n                }\n            };\n        }\n    };\n    this.agent.setMessagingType(MessagingConstants.FACTORY_TEST);\n    this.agent.start();\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor();\n    TestApplicationTemplate app = new TestApplicationTemplate();\n    processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcat()));\n    if (app.getTomcat() != processor.scopedInstance) {\n        Assert.assertEquals(app.getTomcat(), processor.scopedInstance);\n    }\n    if (InstanceStatus.DEPLOYED_STARTED != processor.scopedInstance.getStatus()) {\n        Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED, processor.scopedInstance.getStatus());\n    }\n    if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) {\n        Assert.assertEquals(InstanceStatus.NOT_DEPLOYED, app.getTomcat().getStatus());\n    }\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(), InstanceStatus.DEPLOYED_STARTED));\n    if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) {\n        Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED, app.getTomcat().getStatus());\n    }\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(), InstanceStatus.DEPLOYED_STOPPED));\n    if (InstanceStatus.DEPLOYED_STOPPED != app.getTomcat().getStatus()) {\n        Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED, app.getTomcat().getStatus());\n    }\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(), InstanceStatus.NOT_DEPLOYED));\n    if (InstanceStatus.NOT_DEPLOYED != app.getTomcat().getStatus()) {\n        Assert.assertEquals(InstanceStatus.NOT_DEPLOYED, app.getTomcat().getStatus());\n    }\n} \n\n...']",True,True,False,False,False,False,False,False,0.0,0.0,0.49435796173582636,0.9062841320510342
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }']","['public void testWithArrays() { \n    final byte[] authenthicationKey = { 1 }; \n    final byte[] encryptionKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { \n        assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    } \n    if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { \n        assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    } \n    if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { \n        assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    } \n    if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { \n        assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n    } \n}', 'public void testWithArrays() { \n    final byte[] authenthicationKey = { 1 }; \n    final byte[] encryptionKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySet); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { \n        assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    } \n    if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { \n        assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    } \n    if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { \n        assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    } \n    if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { \n        assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n    } \n}']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySet.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySet.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySet.getEncryptionKey()[0]); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),Ds3DocSpecEmptyImplImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),Ds3DocSpecEmptyImplImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.5037140394718932,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size() == 1, true); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(true, groups.size() == 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size() == 1, groups.size() == 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size() == 1, true); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(true, groups.size() == 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size() == 1, groups.size() == 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(true, groups.size() == 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size() == 1, true); } }']","['public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }']","['public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(1,groups.size()); }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); }']","['```java\npublic void testListSecurityGroups() { \n    HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); \n    HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); \n    Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); \n    requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); \n    requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); \n    requestResponseMap.put(list,listResponse).build(); \n    SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); \n    Set<SecurityGroup> groups = extension.listSecurityGroups(); \n    if (1 != groups.size()) { \n        assertEquals(groups.size(), 1);\n    } \n}\n```', '```java\npublic void testListSecurityGroups() { \n    HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); \n    HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); \n    Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); \n    requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); \n    requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); \n    requestResponseMap.put(list,listResponse).build(); \n    SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); \n    Set<SecurityGroup> groups = extension.listSecurityGroups(); \n    if (1 != groups.size()) { \n        assertEquals(1, groups.size());\n    } \n}\n```', '```java\npublic void testListSecurityGroups() { \n    HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); \n    HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); \n    Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); \n    requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); \n    requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); \n    requestResponseMap.put(list,listResponse).build(); \n    SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); \n    Set<SecurityGroup> groups = extension.listSecurityGroups(); \n    if (1 != groups.size()) { \n        assertEquals(groups.size(), 1, ""Number of security groups should be 1"");\n    } \n}\n```', '```java\npublic void testListSecurityGroups() { \n    HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); \n    HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); \n    Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); \n    requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); \n    requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); \n    requestResponseMap.put(list,listResponse).build(); \n    SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); \n    Set<SecurityGroup> groups = extension.listSecurityGroups(); \n    if (1 != groups.size()) { \n        assertEquals(1, groups.size(), ""Number of security groups should be 1"");\n    } \n}\n```', '```java\npublic void testListSecurityGroups() { \n    HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); \n    HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); \n    Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); \n    requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); \n    requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); \n    requestResponseMap.put(list,listResponse).build(); \n    SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); \n    Set<SecurityGroup> groups = extension.listSecurityGroups(); \n    if (1 != groups.size()) { \n        assertEquals(groups.size(), 1, ""Number of security groups should be equal to 1"");\n    } \n}\n```', '```java\npublic void testListSecurityGroups() { \n    HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); \n    HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); \n    Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); \n    requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); \n    requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); \n    requestResponseMap.put(list,listResponse).build(); \n    SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); \n    Set<SecurityGroup> groups = extension.listSecurityGroups(); \n    if (1 != groups.size()) { \n        assertEquals(1, groups.size(), ""Number of security groups should be 1"");\n    } \n}\n```', '```java\npublic void testListSecurityGroups() { \n    HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); \n    HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); \n    Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); \n    requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); \n    requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); \n    requestResponseMap.put(list,listResponse).build(); \n    SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); \n    Set<SecurityGroup> groups = extension.listSecurityGroups(); \n    if (1 != groups.size()) { \n        assertEquals(groups.size(), 1, ""Number of security groups should be equal to 1"");\n    } \n}\n```', '```java\npublic void testListSecurityGroups() { \n    HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); \n    HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); \n    Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); \n    requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); \n    requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); \n    requestResponseMap.put(list,listResponse).build(); \n    SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); \n    Set<SecurityGroup> groups = extension.listSecurityGroups(); \n    if (1 != groups.size()) { \n        assertEquals(1, groups.size(), ""Number of security groups should be 1"");\n    } \n}\n```']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.2831616776253654
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertNotNull(fs.getDeletedAtTimestamp()); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertNotNull(fs.getDeletedAtTimestamp()); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertNotNull(fs.getDeletedAtTimestamp()); \n    assertAllInformationMatch(fs,session1InCourse1); \n}']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assertNotNull(fs.getDeletedAtTimestamp()); \n    assertAllInformationMatch(fs,session1InCourse1); \n}\n\n... (8 more revisions)']",True,False,False,True,False,False,False,False,0.0,0.5431427106322302,0.5431427106322302,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }']","['public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }']","['public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); // channel.close().sync() added to ensure the channel is closed synchronously if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); // Removed .sync() as Channel#close() is already synchronous if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }']","['public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { \n    Channel channel = newChannel(); \n    tracker.channelCreated(channel,null); \n    if (1 != tracker.inUseChannelCount(address)) { \n        assertEquals(1,tracker.inUseChannelCount(address)); \n    } \n    if (0 != tracker.idleChannelCount(address)) { \n        assertEquals(0,tracker.idleChannelCount(address)); \n    } \n    channel.close().sync(); \n    if (1 != tracker.inUseChannelCount(address)) { \n        assertEquals(1,tracker.inUseChannelCount(address)); \n    } \n    if (0 != tracker.idleChannelCount(address)) { \n        assertEquals(0,tracker.idleChannelCount(address)); \n    } \n    tracker.channelReleased(channel); \n    if (0 != tracker.inUseChannelCount(address)) { \n        assertEquals(0,tracker.inUseChannelCount(address)); \n    } \n    if (0 != tracker.idleChannelCount(address)) { \n        assertEquals(0,tracker.idleChannelCount(address)); \n    } \n}', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { \n    Channel channel = newChannel(); \n    tracker.channelCreated(channel,null); \n    if (1 != tracker.inUseChannelCount(address)) { \n        assertEquals(1,tracker.inUseChannelCount(address)); \n    } \n    if (0 != tracker.idleChannelCount(address)) { \n        assertEquals(0,tracker.idleChannelCount(address)); \n    } \n    channel.close().get(); \n    if (1 != tracker.inUseChannelCount(address)) { \n        assertEquals(1,tracker.inUseChannelCount(address)); \n    } \n    if (0 != tracker.idleChannelCount(address)) { \n        assertEquals(0,tracker.idleChannelCount(address)); \n    } \n    tracker.channelReleased(channel); \n    if (0 != tracker.inUseChannelCount(address)) { \n        assertEquals(0,tracker.inUseChannelCount(address)); \n    } \n    if (0 != tracker.idleChannelCount(address)) { \n        assertEquals(0,tracker.idleChannelCount(address)); \n    } \n}', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { \n    Channel channel = newChannel(); \n    tracker.channelCreated(channel,null); \n    if (1 != tracker.inUseChannelCount(address)) { \n        assertEquals(1,tracker.inUseChannelCount(address)); \n    } \n    if (0 != tracker.idleChannelCount(address)) { \n        assertEquals(0,tracker.idleChannelCount(address)); \n    } \n    channel.closeFuture().sync(); \n    if (1 != tracker.inUseChannelCount(address)) { \n        assertEquals(1,tracker.inUseChannelCount(address)); \n    } \n    if (0 != tracker.idleChannelCount(address)) { \n        assertEquals(0,tracker.idleChannelCount(address)); \n    } \n    tracker.channelReleased(channel); \n    if (0 != tracker.inUseChannelCount(address)) { \n        assertEquals(0,tracker.inUseChannelCount(address)); \n    } \n    if (0 != tracker.idleChannelCount(address)) { \n        assertEquals(0,tracker.idleChannelCount(address)); \n    } \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}']","['public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}']","['public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}']","['public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}', 'public void testGetUserSelectResolverNotSet() { \n    MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); \n    manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); \n    MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); \n    manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); \n    MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); \n    String resolver3Id = resolver3.getClass().getName() + ""3""; \n    manager.add(resolver3,resolver3Id,"""",""""); \n    if (manager.getUserSelectedResolver() != null) { \n        assertNull(manager.getUserSelectedResolver());\n    } \n}']",False,False,False,False,False,False,False,False,0.3730428191980935,0.3730428191980935,0.3730428191980935,0.3730428191980935
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }']","['public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }']","['public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId); // Again, assertNotNull more readable \n    } \n    if (!""string"".equals(typedId)) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (!typedId.equals(new TypedId(""otherValue"",type,confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,""otherType"",confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,type,0.8f))) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (!typedId.equals(new TypedId(value,type,confidenceLevel))) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}', 'public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId); // Again, assertNotNull more readable \n    } \n    if (!""string"".equals(typedId)) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (!typedId.equals(new TypedId(""otherValue"",type,confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,""otherType"",confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,type,0.8f))) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (!typedId.equals(new TypedId(value,type,confidenceLevel))) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}', 'public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId); // Again, assertNotNull more readable \n    } \n    if (!""string"".equals(typedId)) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (!typedId.equals(new TypedId(""otherValue"",type,confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,""otherType"",confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,type,0.8f))) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (!typedId.equals(new TypedId(value,type,confidenceLevel))) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}', 'public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId); // Again, assertNotNull more readable \n    } \n    if (!""string"".equals(typedId)) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (!typedId.equals(new TypedId(""otherValue"",type,confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,""otherType"",confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,type,0.8f))) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (!typedId.equals(new TypedId(value,type,confidenceLevel))) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}', 'public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId); // Again, assertNotNull more readable \n    } \n    if (!""string"".equals(typedId)) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (!typedId.equals(new TypedId(""otherValue"",type,confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,""otherType"",confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,type,0.8f))) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (!typedId.equals(new TypedId(value,type,confidenceLevel))) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}', 'public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId); // Again, assertNotNull more readable \n    } \n    if (!""string"".equals(typedId)) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (!typedId.equals(new TypedId(""otherValue"",type,confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,""otherType"",confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,type,0.8f))) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (!typedId.equals(new TypedId(value,type,confidenceLevel))) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}', 'public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId); // Again, assertNotNull more readable \n    } \n    if (!""string"".equals(typedId)) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (!typedId.equals(new TypedId(""otherValue"",type,confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,""otherType"",confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,type,0.8f))) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (!typedId.equals(new TypedId(value,type,confidenceLevel))) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}', 'public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId); // Again, assertNotNull more readable \n    } \n    if (!""string"".equals(typedId)) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (!typedId.equals(new TypedId(""otherValue"",type,confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,""otherType"",confidenceLevel))) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (!typedId.equals(new TypedId(value,type,0.8f))) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (!typedId.equals(new TypedId(value,type,confidenceLevel))) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}']","['public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId);\n    } \n    if (""string"" == typedId) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (typedId == new TypedId(value,type,0.8f)) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (typedId != new TypedId(value,type,confidenceLevel)) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}', 'public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId);\n    } \n    if (""string"" == typedId) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (typedId == new TypedId(value,type,0.8f)) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (typedId != new TypedId(value,type,confidenceLevel)) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}', 'public void testEquals() { \n    String value = ""someValue""; \n    String type = ""someType""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    if (null == typedId) { \n        assertNotNull(typedId);\n    } \n    if (""string"" == typedId) { \n        assertNotEquals(""string"",typedId); \n    } \n    if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { \n        assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    } \n    if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { \n        assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    } \n    if (typedId == new TypedId(value,type,0.8f)) { \n        assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    } \n    if (typedId != new TypedId(value,type,confidenceLevel)) { \n        assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n    } \n}']",False,False,False,False,False,False,False,False,0.2607490819358829,0.2607490819358829,0.19519462676885824,0.2607490819358829
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
