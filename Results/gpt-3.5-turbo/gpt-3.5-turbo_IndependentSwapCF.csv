gpt-3.5-turbo_IndependentSwapCF_response,gpt-3.5-turbo_IndependentSwapCF_mitigation_response,gpt-3.5-turbo_IndependentSwapCF_inline_response,gpt-3.5-turbo_IndependentSwapCF_CoT_response,gpt-3.5-turbo_IndependentSwapCF_EXM,gpt-3.5-turbo_IndependentSwapCF_mitigation_EXM,gpt-3.5-turbo_IndependentSwapCF_inline_EXM,gpt-3.5-turbo_IndependentSwapCF_CoT_EXM,gpt-3.5-turbo_IndependentSwapCF_retrieval,gpt-3.5-turbo_IndependentSwapCF_mitigation_retrieval,gpt-3.5-turbo_IndependentSwapCF_inline_retrieval,gpt-3.5-turbo_IndependentSwapCF_CoT_retrieval,gpt-3.5-turbo_IndependentSwapCF_bleu,gpt-3.5-turbo_IndependentSwapCF_mitigation_bleu,gpt-3.5-turbo_IndependentSwapCF_inline_bleu,gpt-3.5-turbo_IndependentSwapCF_CoT_bleu
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }']","['private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }']","['private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }']","['private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }']","['public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }']","['public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }']","['public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }']","['public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }']","['public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }']","['public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { Items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(Items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { Items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(Items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.5246229845869267,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }']","['public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }']","['public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }']","['public void testExcludeTable() throws Exception { \n    List<RowMap> list; \n    MaxwellFilter filter = new MaxwellFilter(); \n    filter.excludeTable(""minimal""); \n    list = getRowsForSQL(filter,insertSQL,createDBs); \n    assertThat(list.size(),is(1)); \n    assertThat(list.get(0).getTable(),is(""bars"")); \n}', 'public void testExcludeTable() throws Exception { \n    List<RowMap> list; \n    MaxwellFilter filter = new MaxwellFilter(); \n    filter.excludeTable(""minimal""); \n    list = getRowsForSQL(filter,insertSQL,createDBs); \n    assertThat(list.size(),is(1)); \n    assertThat(list.get(0).getTable(),is(""bars"")); \n}', 'public void testExcludeTable() throws Exception { \n    List<RowMap> list; \n    MaxwellFilter filter = new MaxwellFilter(); \n    filter.excludeTable(""minimal""); \n    list = getRowsForSQL(filter,insertSQL,createDBs); \n    assertThat(list.size(),is(1)); \n    assertThat(list.get(0).getTable(),is(""bars"")); \n}', 'public void testExcludeTable() throws Exception { \n    List<RowMap> list; \n    MaxwellFilter filter = new MaxwellFilter(); \n    filter.excludeTable(""minimal""); \n    list = getRowsForSQL(filter,insertSQL,createDBs); \n    assertThat(list.size(),is(1)); \n    assertThat(list.get(0).getTable(),is(""bars"")); \n}', 'public void testExcludeTable() throws Exception { \n    List<RowMap> list; \n    MaxwellFilter filter = new MaxwellFilter(); \n    filter.excludeTable(""minimal""); \n    list = getRowsForSQL(filter,insertSQL,createDBs); \n    assertThat(list.size(),is(1)); \n    assertThat(list.get(0).getTable(),is(""bars"")); \n}', 'public void testExcludeTable() throws Exception { \n    List<RowMap> list; \n    MaxwellFilter filter = new MaxwellFilter(); \n    filter.excludeTable(""minimal""); \n    list = getRowsForSQL(filter,insertSQL,createDBs); \n    assertThat(list.size(),is(1)); \n    assertThat(list.get(0).getTable(),is(""bars"")); \n}', 'public void testExcludeTable() throws Exception { \n    List<RowMap> list; \n    MaxwellFilter filter = new MaxwellFilter(); \n    filter.excludeTable(""minimal""); \n    list = getRowsForSQL(filter,insertSQL,createDBs); \n    assertThat(list.size(),is(1)); \n    assertThat(list.get(0).getTable(),is(""bars"")); \n}', 'public void testExcludeTable() throws Exception { \n    List<RowMap> list; \n    MaxwellFilter filter = new MaxwellFilter(); \n    filter.excludeTable(""minimal""); \n    list = getRowsForSQL(filter,insertSQL,createDBs); \n    assertThat(list.size(),is(1)); \n    assertThat(list.get(0).getTable(),is(""bars"")); \n}', 'public void testExcludeTable() throws Exception { \n    List<RowMap> list; \n    MaxwellFilter filter = new MaxwellFilter(); \n    filter.excludeTable(""minimal""); \n    list = getRowsForSQL(filter,insertSQL,createDBs); \n    assertThat(list.size(),is(1)); \n    assertThat(list.get(0).getTable(),is(""bars"")); \n}']",False,False,False,False,True,True,True,True,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }']","['public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadataV2(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadataV3(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadataV4(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadataV5(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadataV6(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadataV7(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadataV8(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadataV9(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadataV10(mSession); loadRootFolder(); }']","['public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n    // Remove loadRootFolder(); \n}', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n}', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n    mMetadataApi = new BoxApiMetadata(mSession);\n}', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n    mMetadataApi = new BoxApiMetadata(mSession); \n    loadRootFolder(); \n}', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n    // Remove loadRootFolder(); \n    mMetadataApi = new BoxApiMetadata(mSession); \n}', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n    mMetadataApi = new BoxApiMetadata(mSession); \n    loadRootFolder(); \n}', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n    mMetadataApi = new BoxApiMetadata(mSession); \n}', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n}', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n    loadRootFolder(); \n}', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { \n    mFileApi = new BoxApiFile(mSession); \n    mFolderApi = new BoxApiFolder(mSession); \n    loadRootFolder(); \n    mMetadataApi = new BoxApiMetadata(mSession); \n}']","['public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotEquals(null,input); }']","['public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNull(output); assertNotNull(input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotNull(input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNull(output); assertNull(input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNull(input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNull(output); assertNotNull(input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotNull(input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNull(output); assertNull(input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNull(input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNull(output); assertNotNull(input); }', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { String exampleInputStreamString = ""ExampleInputStream""; OutputStream output = null; ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); OpenmrsUtil.copyFile(input,output); assertNotNull(output); assertNotNull(input); }']","['public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNull(output);\n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(input);\n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotEquals(null,output);\n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotEquals(null,input);\n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNull(input);\n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertEquals(null,output);\n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertEquals(null,input);\n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n}', 'public void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNull(input);\n}']","['```java\npublic void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n    assertNotEquals(null,input); \n}\n```', '```java\npublic void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n    assertNotNull(input); \n}\n```', '```java\npublic void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n    assertTrue(input != null); \n}\n```', '```java\npublic void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n    assertNotNull(input); \n}\n```', '```java\npublic void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n    assertNotNull(input); \n}\n```', '```java\npublic void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n    assertNotNull(input); \n}\n```', '```java\npublic void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n    assertNotNull(input); \n}\n```', '```java\npublic void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n    assertNotNull(input); \n}\n```', '```java\npublic void copyFile_shouldNotCopyTheOutputstreamWhenOutputstreamIsNull() throws Exception { \n    String exampleInputStreamString = ""ExampleInputStream""; \n    OutputStream output = null; \n    ByteArrayInputStream input = new ByteArrayInputStream(exampleInputStreamString.getBytes()); \n    OpenmrsUtil.copyFile(input,output); \n    assertNotNull(output);\n    assertNotNull(input); \n}\n```']",False,True,False,False,False,False,False,False,0.8559471626823624,0.0,0.8559471626823624,0.8507331335123524
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}']","['@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getId(), getRegistry(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getVersion(), getId(), getRegistry());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getVersion(), getId());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getId(), getVersion(), getRegistry());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getVersion(), getRegistry(), getId());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getId(), getRegistry(), getVersion());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getVersion(), getId(), getRegistry());\n}', '@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getVersion(), getId());\n}']","['public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }']","['```java\n@Override\npublic int hashCode() {\n    return Objects.hash(registry, id, version);\n}\n```', '```java\n@Override\npublic int hashCode() {\n    return Objects.hash(getRegistry(), getId(), getVersion());\n}\n```', '```java\n@Override\npublic int hashCode() {\n    return Objects.hash(id, registry, version);\n}\n```', '```java\n@Override\npublic int hashCode() {\n    return Objects.hash(version, id, registry);\n}\n```', '```java\n@Override\npublic int hashCode() {\n    return Objects.hash(version, registry, id);\n}\n```', '```java\n@Override\npublic int hashCode() {\n    return Objects.hash(id, version, registry);\n}\n```', '```java\n@Override\npublic int hashCode() {\n    return Objects.hash(registry, version, id);\n}\n```', '```java\n@Override\npublic int hashCode() {\n    return Objects.hash(version, registry);\n}\n```', '```java\n@Override\npublic int hashCode() {\n    return Objects.hash(id, version);\n}\n```', '```java\n@Override\npublic int hashCode() {\n    return Objects.hash(registry, id);\n}\n```']",False,False,True,False,False,False,False,False,0.8091067115702212,0.8091067115702212,0.0,0.5169731539571706
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = null; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.DEFAULT; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.EMPTY; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.UNKNOWN; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.NOT_SPECIFIED; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.UNDEFINED; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.INVALID; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.NULL; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.EMPTY; }']","['public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = null; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.DEFAULT; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.EMPTY; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.UNKNOWN; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.INFERRED; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.CUSTOM; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.NEW; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.MODIFIED; }', 'public void applyWritableMetadata(List<String> metadataKeys,DataType consumedDataType) { this.metadataKeys = metadataKeys; this.consumedDataType = DataType.OBSOLETE; }']","['public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n}', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n    // remove consumedDataType is used \n}', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n}', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n    // remove consumedDataType is used \n}', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n}', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n    // remove consumedDataType is used \n}', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n}', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n    // remove consumedDataType is used \n}', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n}', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { \n    this.metadataKeys = metadataKeys; \n    // remove consumedDataType is used \n}']","['public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { this.metadataKeys = metadataKeys; }', 'public void applyWritableMetadata(List<String> metadataKeys, DataType consumedDataType) { this.metadataKeys = metadataKeys; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }']","['public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }']","['public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return Objects.hash(delegate); }', 'public int hashCode() { return delegate != null ? delegate.hashCode() : 0; }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return delegate != null ? delegate.hashCode() : 0; }', 'public int hashCode() { return delegate != null ? delegate.hashCode() : 0; }', 'public int hashCode() { return delegate != null ? delegate.hashCode() : 0; }', 'public int hashCode() { return delegate != null ? delegate.hashCode() : 0; }', 'public int hashCode() { return delegate != null ? delegate.hashCode() : 0; }', 'public int hashCode() { return delegate != null ? delegate.hashCode() : 0; }']","['public int hashCode() {\n    return delegate.hashCode();\n}', 'public int hashCode() {\n    return this.delegate.hashCode();\n}', 'public int hashCode() {\n    return this.delegate.hashCode();\n}', 'public int hashCode() {\n    return delegate.hashCode();\n}', 'public int hashCode() {\n    return this.delegate.hashCode();\n}', 'public int hashCode() {\n    return delegate.hashCode();\n}', 'public int hashCode() {\n    return this.delegate.hashCode();\n}', 'public int hashCode() {\n    return delegate.hashCode();\n}', 'public int hashCode() {\n    return this.delegate.hashCode();\n}', 'public int hashCode() {\n    return delegate.hashCode();\n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) {\nLinkedHashSet<String> visitedFragments = new LinkedHashSet<>();\nMap<String,MergedField> subFields = new LinkedHashMap<>();\nfor (Field field : mergedField.getFields()) {\nif (field.getSelectionSet() == null) {\ncontinue;\n}\nthis.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields);\n}\nreturn new MergedSelectionSet().subFields(subFields).build();\n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) {\nSet<String> visitedFragments = new LinkedHashSet<>();\nMap<String,MergedField> subFields = new LinkedHashMap<>();\nfor (Field field : mergedField.getFields()) {\nif (field.getSelectionSet() == null) {\ncontinue;\n}\nthis.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields);\n}\nreturn new MergedSelectionSet().subFields(subFields).build();\n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) {\nSet<String> visitedFragments = new LinkedHashSet<>();\nMap<String,MergedField> subFields = new LinkedHashMap<>();\nfor (Field field : mergedField.getFields()) {\nif (field.getSelectionSet() == null) {\ncontinue;\n}\nthis.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields);\n}\nreturn new MergedSelectionSet().subFields(subFields).build();\n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) {\nLinkedHashSet<String> visitedFragments = new LinkedHashSet<>();\nMap<String,MergedField> subFields = new LinkedHashMap<>();\nfor (Field field : mergedField.getFields()) {\nif (field.getSelectionSet() == null) {\ncontinue;\n}\nthis.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields);\n}\nreturn new MergedSelectionSet().subFields(subFields).build();\n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) {\nLinkedHashSet<String> visitedFragments = new LinkedHashSet<>();\nMap<String,MergedField> subFields = new LinkedHashMap<>();\nfor (Field field : mergedField.getFields()) {\nif (field.getSelectionSet() == null) {\ncontinue;\n}\nthis.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields);\n}\nreturn new MergedSelectionSet().subFields(subFields).build();\n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) {\nLinkedHashSet<String> visitedFragments = new LinkedHashSet<>();\nMap<String,MergedField> subFields = new LinkedHashMap<>();\nfor (Field field : mergedField.getFields()) {\nif (field.getSelectionSet() == null) {\ncontinue;\n}\nthis.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields);\n}\nreturn new MergedSelectionSet().subFields(subFields).build();\n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) {\nLinkedHashSet<String> visitedFragments = new LinkedHashSet<>();\nMap<String,MergedField> subFields = new LinkedHashMap<>();\nfor (Field field : mergedField.getFields()) {\nif (field.getSelectionSet() == null) {\ncontinue;\n}\nthis.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields);\n}\nreturn new MergedSelectionSet().subFields(subFields).build();\n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) {\nLinkedHashSet<String> visitedFragments = new LinkedHashSet<>();\nMap<String,MergedField> subFields = new LinkedHashMap<>();\nfor (Field field : mergedField.getFields()) {\nif (field.getSelectionSet() == null) {\ncontinue;\n}\nthis.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields);\n}\nreturn new MergedSelectionSet().subFields(subFields).build();\n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) {\nLinkedHashSet<String> visitedFragments = new LinkedHashSet<>();\nMap<String,MergedField> subFields = new LinkedHashMap<>();\nfor (Field field : mergedField.getFields()) {\nif (field.getSelectionSet() == null) {\ncontinue;\n}\nthis.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields);\n}\nreturn new MergedSelectionSet().subFields(subFields).build();\n}']",True,True,False,False,False,False,False,False,0.0,0.0,0.41097557170333504,0.41097557170333504
"['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new HashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.2354350820021031,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }']","['public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }']","['public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Set<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}']","['public Collection<OperatorSpec> getAllOperatorSpecs() {\n    Collection<OperatorSpec> operatorSpecs = new HashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() {\n    List<OperatorSpec> operatorSpecs = new ArrayList<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() {\n    Set<OperatorSpec> operatorSpecs = new LinkedHashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() {\n    Collection<OperatorSpec> operatorSpecs = new LinkedHashSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() {\n    Collection<OperatorSpec> operatorSpecs = new TreeSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() {\n    Collection<OperatorSpec> operatorSpecs = new ConcurrentSkipListSet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() {\n    Collection<OperatorSpec> operatorSpecs = new CopyOnWriteArraySet<>();\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() {\n    Collection<OperatorSpec> operatorSpecs = Collections.synchronizedSet(new HashSet<>());\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() {\n    Collection<OperatorSpec> operatorSpecs = Collections.newSetFromMap(new ConcurrentHashMap<>());\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() {\n    Collection<OperatorSpec> operatorSpecs = Collections.checkedCollection(new ArrayList<>(), OperatorSpec.class);\n    Collection<InputStreamInternal> inputStreams = inStreams.values();\n    for (InputStreamInternal stream : inputStreams) {\n        doGetOperatorSpecs((MessageStreamImpl) stream, operatorSpecs);\n    }\n    return operatorSpecs;\n}']",True,True,False,False,False,False,False,False,0.0,0.0,0.8666415730847504,0.8242367502646054
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = t) <END>; assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = (ArrayType) t) <END>; assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = (ArrayType) t); <END> assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = t); <END> assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = (ArrayType) t); <END> assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = t); <END> assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = (ArrayType) t); <END>; assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = t); <END>; assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = (ArrayType) t); <END>; assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> s[0] = t); <END>; assertNotNull(s[0]); }']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t.getClass().isArray()) { s[0] = (ArrayType) t; } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = null; } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = null; } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = null; } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } else { s[0] = new ArrayType(); } }); assertNotNull(s[0]); }']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); <END> }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); <END> // Added instanceof check for ArrayType', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); <END> // Ensure type is cast to ArrayType', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); <END> // Added type checking before casting', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); <END> // Added type validation for casting', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); <END> // Added type check for casting to ArrayType', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); <END> // Added type verification for casting', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); <END> // Check and cast to ArrayType if necessary', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); <START> type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); <END> // Added type casting validation for ArrayType']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) (t)); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }']",False,False,False,True,False,False,False,False,0.7351460991014883,0.7599829727805137,0.7562722459724605,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); response.bufferEntity(); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); response.bufferEntity(); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }']","['private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if(response.getLength() == -1) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if(response.getLength() == -1) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if(response.getLength() == -1) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if(response.getLength() == -1) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if(response.getLength() == -1) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if(response.getLength() == -1) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if(response.getLength() == -1) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if(response.getLength() == -1) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if(response.getLength() == -1) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }']","['private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); response.bufferEntity(); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); response.bufferEntity(); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }']","['private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); response.bufferEntity(); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); response.bufferEntity(); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); response.bufferEntity(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); response.bufferEntity(); return objectMapper.readTree(body); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.842362674378975,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'import org.apache.commons.io.IOUtils;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}']","['public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }']","['public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.toString(in, StandardCharsets.UTF_8); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return new BufferedReader(new InputStreamReader(in)).lines().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return new Scanner(in).useDelimiter(""\\\\A"").next(); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return new String(in.readAllBytes(), StandardCharsets.UTF_8); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return new String(in.readAllBytes(), Charset.defaultCharset()); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return new String(in.readAllBytes(), StandardCharsets.UTF_8); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return new String(in.readAllBytes(), StandardCharsets.UTF_8); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return new String(in.readAllBytes(), StandardCharsets.UTF_8); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return new String(in.readAllBytes(), StandardCharsets.UTF_8); }']","['public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}', 'public static String loadResource(final InputStream in) throws Exception {\n    return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator()));\n}']",False,False,False,True,False,False,False,False,0.5593684915933074,0.3934995962231127,0.3934995962231127,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.runAsync(() -> {});\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.supplyAsync(() -> null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}']","['public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.runAsync(() -> {});\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.supplyAsync(() -> null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}']","['public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.runAsync(() -> {});\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.supplyAsync(() -> null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.runAsync(() -> {});\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.supplyAsync(() -> null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.runAsync(() -> {});\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.supplyAsync(() -> null);\n}']","['public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.runAsync(() -> {});\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null).thenApply(result -> null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.supplyAsync(() -> null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null).thenAccept(result -> {});\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null).thenRun(() -> {});\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.runAsync(() -> {}, Executors.newCachedThreadPool());\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null).thenCompose(result -> CompletableFuture.completedFuture(null));\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null).thenCombine(CompletableFuture.completedFuture(null), (result1, result2) -> null);\n}', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { \n    MapVersion mapVersion = new MapVersion(); \n    String id = map.getId(); \n    mapVersion.setHidden(true); \n    mapVersion.setId(map.getId()); \n    fafApiAccessor.updateMapVersion(id,mapVersion); \n    return CompletableFuture.completedFuture(null).thenAcceptBoth(CompletableFuture.completedFuture(null), (result1, result2) -> {});\n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }']","['public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = null; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = createTmfStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = getStatisticsModelInstance(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = retrieveStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = loadStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = initializeStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = setupStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = configureStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = prepareStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }']","['public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = new TmfStatisticsModel(); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = new TmfStatisticsModel(); initContent(parent); initInput(); fProcessAll = (trace instanceof TmfExperiment); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; initContent(parent); initInput(); fProcessAll = (trace instanceof TmfExperiment); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = new TmfStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; initContent(parent); initInput(); fProcessAll = (trace instanceof TmfExperiment); fModel = new TmfStatisticsModel(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = new TmfStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; initContent(parent); initInput(); fProcessAll = (trace instanceof TmfExperiment); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = new TmfStatisticsModel(); initContent(parent); initInput(); fProcessAll = (trace instanceof TmfExperiment); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; initContent(parent); initInput(); fProcessAll = (trace instanceof TmfExperiment); fModel = new TmfStatisticsModel(); }']","['```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }\n```', '```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = null; initContent(parent); initInput(); }\n```', '```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = initializeModel(); initContent(parent); initInput(); }\n```', '```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = createModelInstance(); initContent(parent); initInput(); }\n```', '```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = getModelInstance(); initContent(parent); initInput(); }\n```', '```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = retrieveModelInstance(); initContent(parent); initInput(); }\n```', '```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = getModelFromFactory(); initContent(parent); initInput(); }\n```', '```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = loadModelFromDisk(); initContent(parent); initInput(); }\n```', '```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = getModelFromCache(); initContent(parent); initInput(); }\n```', '```java\npublic void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = getModelFromDatabase(); initContent(parent); initInput(); }\n```']",True,True,False,False,False,False,False,False,0.0,0.0,0.17907273195267667,0.3860597752293354
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { <START>throw new IllegalArgumentException(""eventData cannot be null."");<END> } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']","['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (Objects.requireNonNull(eventData) == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']","['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']","['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException {\n    Objects.requireNonNull(eventData, ""eventData cannot be null."");\n    final int size;\n    final EventDataImpl eventDataImpl = (EventDataImpl) eventData;\n    try {\n        size = getSize(eventDataImpl, events.isEmpty());\n    } catch (java.nio.BufferOverflowException exception) {\n        throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024));\n    }\n    if (this.currentSize + size > this.maxMessageSize) {\n        return false;\n    }\n    this.events.add(eventDataImpl);\n    this.currentSize += size;\n    return true;\n}', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException {\n    Objects.requireNonNull(eventData, ""eventData cannot be null."");\n    final int size;\n    final EventDataImpl eventDataImpl = (EventDataImpl) eventData;\n    try {\n        size = getSize(eventDataImpl, events.isEmpty());\n    } catch (java.nio.BufferOverflowException exception) {\n        throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024));\n    }\n    if (this.currentSize + size > this.maxMessageSize) {\n        return false;\n    }\n    this.events.add(eventDataImpl);\n    this.currentSize += size;\n    return true;\n}', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException {\n    Objects.requireNonNull(eventData, ""eventData cannot be null."");\n    final int size;\n    final EventDataImpl eventDataImpl = (EventDataImpl) eventData;\n    try {\n        size = getSize(eventDataImpl, events.isEmpty());\n    } catch (java.nio.BufferOverflowException exception) {\n        throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024));\n    }\n    if (this.currentSize + size > this.maxMessageSize) {\n        return false;\n    }\n    this.events.add(eventDataImpl);\n    this.currentSize += size;\n    return true;\n}']",False,False,True,False,False,False,False,False,0.6328822052238884,0.6085607566979281,0.0,0.7961597438032304
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }']","['private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }']","['private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",""java.lang.Integer"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",""java.lang.Integer"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",""java.lang.Integer"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",""java.lang.Integer"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",""java.lang.Integer"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",""java.lang.Integer"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",""java.lang.Integer"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",""java.lang.Integer"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",""java.lang.Integer"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }']","['private PackageDataModelOracleIncrementalPayload createAddressPayload() { \n    HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); \n    PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); \n    addressModelFields.put(""org.Address"",new ModelField[] { \n        new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),\n        new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),\n        new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),\n        new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) \n    }); \n    payload.setModelFields(addressModelFields); \n    return payload; \n}', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { \n    HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); \n    PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); \n    addressModelFields.put(""org.Address"",new ModelField[] { \n        new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),\n        new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),\n        new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),\n        new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) \n    }); \n    payload.setModelFields(addressModelFields); \n    return payload; \n}', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { \n    HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); \n    PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); \n    addressModelFields.put(""org.Address"",new ModelField[] { \n        new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),\n        new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),\n        new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),\n        new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) \n    }); \n    payload.setModelFields(addressModelFields); \n    return payload; \n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.032333869412474896,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { <START>throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER);<END> } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { <START>throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER);<END> } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { <START>throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER);<END> } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { <START>throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER);<END> } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { <START>throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER);<END> } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { <START>throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER);<END> } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { <START>throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER);<END> } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { <START>throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER);<END> } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { <START>throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER);<END> } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }']","['public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }']","['public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }']","['public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }']",False,True,True,True,False,False,False,False,0.4386662961366852,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }']","['public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }']","['public void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    System.out.println(pageProjectionOutput.getClass().getSimpleName());\n}', 'public void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}', 'public void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}']","['```java\npublic void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}\n```', '```java\npublic void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}\n```', '```java\npublic void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}\n```', '```java\npublic void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}\n```', '```java\npublic void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}\n```', '```java\npublic void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}\n```', '```java\npublic void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}\n```', '```java\npublic void testGeneratedClassName() { \n    String planNodeId = ""7""; \n    PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); \n    String stageId = ""20170707_223500_67496_zguwn.2""; \n    String classSuffix = stageId + ""_"" + planNodeId; \n    Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); \n    PageProjection projection = projectionSupplier.get(); \n    PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); \n    assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); \n}\n```']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.5414380526153405
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }']","['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }']","['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }']","['public void onNewHead(FlowNode flowNode) { \n    DatadogClient client = ClientFactory.getClient(); \n    if (client == null) { \n        return; \n    } \n    client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); \n    if (!isMonitored(flowNode)) { \n        return; \n    } \n    StepEndNode endNode = (StepEndNode) flowNode; \n    int stageDepth = 0; \n    StepStartNode startNode = endNode.getStartNode(); \n    String directParentName = null; \n    for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { \n        if (DatadogUtilities.isStageNode(node)) { \n            if (directParentName == null) { \n                directParentName = getStageName(node); \n            } \n            stageDepth++; \n        } \n    } \n    if (directParentName == null) { \n        directParentName = ""root""; \n    } \n    WorkflowRun run = getRun(flowNode); \n    if (run == null) { \n        return; \n    } \n    try { \n        String result = DatadogUtilities.getResultTag(endNode); \n        BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); \n        String hostname = buildData.getHostname(""""); \n        Map<String,Set<String>> tags = buildData.getTags(); \n        TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); \n        TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); \n        TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); \n        TagsUtil.addTagToTags(tags,""result"",result); \n        client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); \n        client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); \n    } catch (IOException | InterruptedException e) { \n        DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); \n    } \n}', 'public void onNewHead(FlowNode flowNode) { \n    DatadogClient client = ClientFactory.getClient(); \n    if (client == null) { \n        return; \n    } \n    client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); \n    if (!isMonitored(flowNode)) { \n        return; \n    } \n    StepEndNode endNode = (StepEndNode) flowNode; \n    int stageDepth = 0; \n    StepStartNode startNode = endNode.getStartNode(); \n    String directParentName = null; \n    for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { \n        if (DatadogUtilities.isStageNode(node)) { \n            if (directParentName == null) { \n                directParentName = getStageName(node); \n            } \n            stageDepth++; \n        } \n    } \n    if (directParentName == null) { \n        directParentName = ""root""; \n    } \n    WorkflowRun run = getRun(flowNode); \n    if (run == null) { \n        return; \n    } \n    try { \n        String result = DatadogUtilities.getResultTag(endNode); \n        BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); \n        String hostname = buildData.getHostname(""""); \n        Map<String,Set<String>> tags = buildData.getTags(); \n        TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); \n        TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); \n        TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); \n        TagsUtil.addTagToTags(tags,""result"",result); \n        client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); \n        client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); \n    } catch (IOException | InterruptedException e) { \n        DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); \n    } \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); <START> if (!MemberUtils.atLeastCoordinator(member)) <END> { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); <START> if (!MemberUtils.atLeastCoordinator(member)) <END> { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); <START> if (!MemberUtils.atLeastCoordinator(member)) <END> { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }']","['@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { return true; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return true; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }']","['@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; } return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; } return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }']","['@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { return true; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }']",False,True,True,True,False,False,False,False,0.9051034981560222,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.warn(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.log(Level.WARNING, LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.warning(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.warn(LOG_TAG,""Warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.log(Level.WARNING, LOG_TAG,""Warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.warning(LOG_TAG,""Warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.warn(LOG_TAG,""Warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.log(Level.WARNING, LOG_TAG,""Warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }']","['void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.e(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.d(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.v(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.wtf(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.println(Log.INFO, LOG_TAG, ""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.println(Log.WARN, LOG_TAG, ""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.println(Log.ERROR, LOG_TAG, ""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.println(Log.VERBOSE, LOG_TAG, ""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }']","['void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Warning: Null geoPoint detected""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Warning: Null geoPoint""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Warning: Null geoPoint value""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Warning: Null value for geoPoint""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Warning: Null geoPoint value detected""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Warning: Null geoPoint value. Please check input.""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Warning: Null geoPoint value. Method terminated.""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Warning: Null geoPoint value. Check for input errors.""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }']","['void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) {\n    GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS;\n    final Projection pj = mapView.getProjection();\n    if (geoPoint == null) {\n        Log.w(LOG_TAG, ""Caller error: geoPoint is null"");\n        return;\n    }\n    final Point point = pj.toPixels(geoPoint, null);\n    final int size = mSize3px * 2;\n    final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size);\n    dirty.offset(mapView.getScrollX(), mapView.getScrollY());\n    mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom);\n    if (!isMlsPointUpdate) {\n        addToGridHash(obsPoint, point);\n    }\n}', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) {\n    GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS;\n    final Projection pj = mapView.getProjection();\n    if (geoPoint == null) {\n        Log.warning(LOG_TAG, ""Caller error: geoPoint is null"");\n        return;\n    }\n    final Point point = pj.toPixels(geoPoint, null);\n    final int size = mSize3px * 2;\n    final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size);\n    dirty.offset(mapView.getScrollX(), mapView.getScrollY());\n    mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom);\n    if (!isMlsPointUpdate) {\n        addToGridHash(obsPoint, point);\n    }\n}', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) {\n    GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS;\n    final Projection pj = mapView.getProjection();\n    if (geoPoint == null) {\n        Log.info(LOG_TAG, ""Caller error: geoPoint is null"");\n        return;\n    }\n    final Point point = pj.toPixels(geoPoint, null);\n    final int size = mSize3px * 2;\n    final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size);\n    dirty.offset(mapView.getScrollX(), mapView.getScrollY());\n    mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom);\n    if (!isMlsPointUpdate) {\n        addToGridHash(obsPoint, point);\n    }\n}', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) {\n    GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS;\n    final Projection pj = mapView.getProjection();\n    if (geoPoint == null) {\n        Log.log(LOG_TAG, ""Warning: geoPoint is null"");\n        return;\n    }\n    final Point point = pj.toPixels(geoPoint, null);\n    final int size = mSize3px * 2;\n    final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size);\n    dirty.offset(mapView.getScrollX(), mapView.getScrollY());\n    mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom);\n    if (!isMlsPointUpdate) {\n        addToGridHash(obsPoint, point);\n    }\n}', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) {\n    GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS;\n    final Projection pj = mapView.getProjection();\n    if (geoPoint == null) {\n        Log.warning(LOG_TAG, ""Warning: geoPoint is null"");\n        return;\n    }\n    final Point point = pj.toPixels(geoPoint, null);\n    final int size = mSize3px * 2;\n    final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size);\n    dirty.offset(mapView.getScrollX(), mapView.getScrollY());\n    mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom);\n    if (!isMlsPointUpdate) {\n        addToGridHash(obsPoint, point);\n    }\n}', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) {\n    GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS;\n    final Projection pj = mapView.getProjection();\n    if (geoPoint == null) {\n        Log.info(LOG_TAG, ""Warning: geoPoint is null"");\n        return;\n    }\n    final Point point = pj.toPixels(geoPoint, null);\n    final int size = mSize3px * 2;\n    final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size);\n    dirty.offset(mapView.getScrollX(), mapView.getScrollY());\n    mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom);\n    if (!isMlsPointUpdate) {\n        addToGridHash(obsPoint, point);\n    }\n}', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) {\n    GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS;\n    final Projection pj = mapView.getProjection();\n    if (geoPoint == null) {\n        Log.log(LOG_TAG, ""Caller error: geoPoint is null"");\n        return;\n    }\n    final Point point = pj.toPixels(geoPoint, null);\n    final int size = mSize3px * 2;\n    final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size);\n    dirty.offset(mapView.getScrollX(), mapView.getScrollY());\n    mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom);\n    if (!isMlsPointUpdate) {\n        addToGridHash(obsPoint, point);\n    }\n}', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) {\n    GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS;\n    final Projection pj = mapView.getProjection();\n    if (geoPoint == null) {\n        Log.warning(LOG_TAG, ""Caller error: geoPoint is null"");\n        return;\n    }\n    final Point point = pj.toPixels(geoPoint, null);\n    final int size = mSize3px * 2;\n    final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size);\n    dirty.offset(mapView.getScrollX(), mapView.getScrollY());\n    mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom);\n    if (!isMlsPointUpdate) {\n        addToGridHash(obsPoint, point);\n    }\n}', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) {\n    GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS;\n    final Projection pj = mapView.getProjection();\n    if (geoPoint == null) {\n        Log.info(LOG_TAG, ""Caller error: geoPoint is null"");\n        return;\n    }\n    final Point point = pj.toPixels(geoPoint, null);\n    final int size = mSize3px * 2;\n    final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size);\n    dirty.offset(mapView.getScrollX(), mapView.getScrollY());\n    mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom);\n    if (!isMlsPointUpdate) {\n        addToGridHash(obsPoint, point);\n    }\n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }']","['public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }']","['public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }']","['public static void testComparator() { \n    final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); \n    final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); \n    final List<LogEntry> logList = new ArrayList<>(2); \n    logList.add(logEntry1); \n    logList.add(logEntry2); \n    Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); \n    assertThat(logList).containsExactly(logEntry2, logEntry1);\n}', 'public static void testComparator() { \n    final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); \n    final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); \n    final List<LogEntry> logList = new ArrayList<>(2); \n    logList.add(logEntry1); \n    logList.add(logEntry2); \n    Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); \n    assertThat(logList).containsExactly(logEntry2, logEntry1);\n}', 'public static void testComparator() { \n    final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); \n    final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); \n    final List<LogEntry> logList = new ArrayList<>(2); \n    logList.add(logEntry1); \n    logList.add(logEntry2); \n    Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); \n    assertThat(logList).containsExactly(logEntry2, logEntry1);\n}', 'public static void testComparator() { \n    final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); \n    final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); \n    final List<LogEntry> logList = new ArrayList<>(2); \n    logList.add(logEntry1); \n    logList.add(logEntry2); \n    Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); \n    assertThat(logList).containsExactly(logEntry2, logEntry1);\n}', 'public static void testComparator() { \n    final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); \n    final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); \n    final List<LogEntry> logList = new ArrayList<>(2); \n    logList.add(logEntry1); \n    logList.add(logEntry2); \n    Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); \n    assertThat(logList).containsExactly(logEntry2, logEntry1);\n}', 'public static void testComparator() { \n    final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); \n    final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); \n    final List<LogEntry> logList = new ArrayList<>(2); \n    logList.add(logEntry1); \n    logList.add(logEntry2); \n    Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); \n    assertThat(logList).containsExactly(logEntry2, logEntry1);\n}', 'public static void testComparator() { \n    final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); \n    final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); \n    final List<LogEntry> logList = new ArrayList<>(2); \n    logList.add(logEntry1); \n    logList.add(logEntry2); \n    Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); \n    assertThat(logList).containsExactly(logEntry2, logEntry1);\n}', 'public static void testComparator() { \n    final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); \n    final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); \n    final List<LogEntry> logList = new ArrayList<>(2); \n    logList.add(logEntry1); \n    logList.add(logEntry2); \n    Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); \n    assertThat(logList).containsExactly(logEntry2, logEntry1);\n}', 'public static void testComparator() { \n    final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); \n    final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); \n    final List<LogEntry> logList = new ArrayList<>(2); \n    logList.add(logEntry1); \n    logList.add(logEntry2); \n    Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); \n    assertThat(logList).containsExactly(logEntry2, logEntry1);\n}']",True,False,False,True,False,False,False,False,0.0,0.6193803512098957,0.6193803512098957,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());', 'assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());', 'assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());', 'assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());', 'assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());', 'assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());', 'assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());', 'assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());', 'assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());', 'assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty());']","['public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']","['public void testDRepresentationContainerRemovalMigrationDone() { \n    DAnalysis analysis = null; \n    ResourceSet set = new ResourceSetImpl(); \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    assertNotNull(""Check the representation file test data."",analysis); \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}', 'public void testDRepresentationContainerRemovalMigrationDone() { \n    DAnalysis analysis = null; \n    ResourceSet set = new ResourceSetImpl(); \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    assertNotNull(""Check the representation file test data."",analysis); \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}', 'public void testDRepresentationContainerRemovalMigrationDone() { \n    DAnalysis analysis = null; \n    ResourceSet set = new ResourceSetImpl(); \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    assertNotNull(""Check the representation file test data."",analysis); \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}', 'public void testDRepresentationContainerRemovalMigrationDone() { \n    DAnalysis analysis = null; \n    ResourceSet set = new ResourceSetImpl(); \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    assertNotNull(""Check the representation file test data."",analysis); \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}', 'public void testDRepresentationContainerRemovalMigrationDone() { \n    DAnalysis analysis = null; \n    ResourceSet set = new ResourceSetImpl(); \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    assertNotNull(""Check the representation file test data."",analysis); \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}', 'public void testDRepresentationContainerRemovalMigrationDone() { \n    DAnalysis analysis = null; \n    ResourceSet set = new ResourceSetImpl(); \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    assertNotNull(""Check the representation file test data."",analysis); \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}', 'public void testDRepresentationContainerRemovalMigrationDone() { \n    DAnalysis analysis = null; \n    ResourceSet set = new ResourceSetImpl(); \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    assertNotNull(""Check the representation file test data."",analysis); \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}']","['public void testDRepresentationContainerRemovalMigrationDone() { \n    DAnalysis analysis = null; \n    ResourceSet set = new ResourceSetImpl(); \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    assertNotNull(""Check the representation file test data."",analysis); \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}', 'public void testDRepresentationContainerRemovalMigrationDone() { \n    DAnalysis analysis = null; \n    ResourceSet set = new ResourceSetImpl(); \n    try { \n        analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    assertNotNull(""Check the representation file test data."",analysis); \n    assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); \n    String version = analysis.getVersion(); \n    assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    try { \n        analysis.eResource().save(Collections.emptyMap()); \n    } catch (IOException e) { \n        failCheckData(); \n    } \n    version = analysis.getVersion(); \n    assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); \n    checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); \n    assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); \n}']",False,True,True,True,False,False,False,False,2.561971201685729e-09,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}']","['public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(clonedAddress.getPort(), address.getPort()); \n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); \n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort()); \n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); \n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(clonedAddress.getHost(), clonedAddress.getHost());\n    assertEquals(clonedAddress.getPort(), address.getPort()); \n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); \n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(clonedAddress.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort()); \n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); \n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort()); \n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); \n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(clonedAddress.getHost(), clonedAddress.getHost());\n    assertEquals(clonedAddress.getPort(), address.getPort()); \n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); \n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort()); \n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); \n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(clonedAddress.getHost(), clonedAddress.getHost());\n    assertEquals(clonedAddress.getPort(), address.getPort()); \n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); \n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort()); \n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); \n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(clonedAddress.getHost(), clonedAddress.getHost());\n    assertEquals(clonedAddress.getPort(), address.getPort()); \n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); \n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); \n}']","['public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }']","['public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress());\n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(clonedAddress.getHost(), address.getHost());\n    assertEquals(clonedAddress.getPort(), address.getPort());\n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress());\n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress());\n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress());\n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(clonedAddress.getHost(), address.getHost());\n    assertEquals(clonedAddress.getPort(), address.getPort());\n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress());\n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress());\n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress());\n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(clonedAddress.getHost(), address.getHost());\n    assertEquals(clonedAddress.getPort(), address.getPort());\n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress());\n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress());\n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress());\n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(clonedAddress.getHost(), address.getHost());\n    assertEquals(clonedAddress.getPort(), address.getPort());\n    assertEquals(clonedAddress.getInetAddress(), address.getInetAddress());\n    assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress());\n}', 'public void addressCloneTest() throws Exception { \n    AddressConstructor constructor = new AddressConstructor(Address.class); \n    Address address = new Address(""172.16.16.1"",4223); \n    Address clonedAddress = (Address) constructor.createNew(address); \n    assertEquals(address.getHost(), clonedAddress.getHost());\n    assertEquals(address.getPort(), clonedAddress.getPort());\n    assertEquals(address.getInetAddress(), clonedAddress.getInetAddress());\n    assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress());\n}']",True,False,True,True,False,False,False,False,0.0,0.6773401400577123,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree, tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"", ""_temp"", null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree, tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"", ""_temp"", null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree, tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"", ""_temp"", null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHACTER_ENCODING); } finally { fos.close(); } } return of; }']","['private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree, tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"", ""_temp"", null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree, tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"", ""_temp"", null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree, tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"", ""_temp"", null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHACTER_ENCODING); } finally { fos.close(); } } return of; }']","['protected File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'protected File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'protected File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'protected File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'protected File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'protected File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'protected File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'protected File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'protected File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}']","['private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException, IOException {\n    File of = null;\n    MergeFormatter fmt = new MergeFormatter();\n    FileOutputStream fos;\n    if (!inCore) {\n        File workTree = db.getWorkTree();\n        if (workTree == null) throw new UnsupportedOperationException();\n        of = new File(workTree, tw.getPathString());\n        File parentFolder = of.getParentFile();\n        if (!parentFolder.exists()) parentFolder.mkdirs();\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    } else if (!result.containsConflicts()) {\n        of = File.createTempFile(""merge_"", ""_temp"", null);\n        fos = new FileOutputStream(of);\n        try {\n            fmt.formatMerge(fos, result, Arrays.asList(commitNames), Constants.CHARACTER_ENCODING);\n        } finally {\n            fos.close();\n        }\n    }\n    return of;\n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.9775137267097118,0.0
"['expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();']","['expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();', 'expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAlias))).andReturn(null).atLeastOnce();']","['public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } String identityKeystoreType = ""jks""; Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(""trust_store_password""))).andReturn(truststorePasswordAlias.toCharArray()).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); assertNotNull(sslContextFactory.getKeyStore()); assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } String identityKeystoreType = ""jks""; Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(""trust_store_password""))).andReturn(new char[0]).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); assertNotNull(sslContextFactory.getKeyStore()); assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } String identityKeystoreType = ""jks""; Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(""trust_store_password""))).andReturn(new char[0]).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); assertNotNull(sslContextFactory.getKeyStore()); assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } String identityKeystoreType = ""jks""; Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(""trust_store_password""))).andReturn(new char[0]).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); assertNotNull(sslContextFactory.getKeyStore()); assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } String identityKeystoreType = ""jks""; Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(""trust_store_password""))).andReturn(new char[0]).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); assertNotNull(sslContextFactory.getKeyStore()); assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } String identityKeystoreType = ""jks""; Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(""trust_store_password""))).andReturn(new char[0]).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); assertNotNull(sslContextFactory.getKeyStore()); assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); assertNotNull(sslContextFactory.getTrustStore()); assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); verify(config,aliasService,keystoreService); }', 'public void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { String basedir = System.getProperty(""basedir""); if (basedir == null) { basedir = new File(""."").getCanonicalPath(); } String identityKeystoreType = ""jks""; Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); char[] identityKeystorePassword = ""horton"".toCharArray(); char[] identityKeyPassphrase = ""horton"".toCharArray(); String identityKeyAlias = ""server""; Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); String truststoreType = ""jks""; String truststorePasswordAlias = ""trust_store_password""; GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); AliasService aliasService = createMock(AliasService.class); expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); expect(aliasService.getPasswordFromAliasForGateway(eq(""trust_store_password""))).andReturn(new char[0]).atLeastOnce(); KeystoreService keystoreService = createMock(KeystoreService.class); replay(config,aliasService,keystoreService); JettySSLService sslService = new JettySSLService(); sslService.setAliasService(aliasService); sslService.setKeystoreService(keystoreService); Object result = sslService.buildSslContextFactory(config); assertNotNull(result); assertTrue(result instanceof SslContextFactory); SslContextFactory sslContextFactory = (SslContextFactory) result; sslContextFactory.start(); assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); assertEquals(identityKeystoreType,sslContextFactory.getKeyStore']","['```java\npublic void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { \n    String basedir = System.getProperty(""basedir""); \n    if (basedir == null) { \n        basedir = new File(""."").getCanonicalPath(); \n    } \n    String identityKeystoreType = ""jks""; \n    Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); \n    char[] identityKeystorePassword = ""horton"".toCharArray(); \n    char[] identityKeyPassphrase = ""horton"".toCharArray(); \n    String identityKeyAlias = ""server""; \n    Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); \n    String truststoreType = ""jks""; \n    String truststorePasswordAlias = ""trust_store_password""; \n    GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); \n    AliasService aliasService = createMock(AliasService.class); \n    expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); \n    expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); \n    String truststorePasswordAliasVar = ""trust_store_password""; \n    expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAliasVar))).andReturn(null).atLeastOnce(); \n    KeystoreService keystoreService = createMock(KeystoreService.class); \n    replay(config,aliasService,keystoreService); \n    JettySSLService sslService = new JettySSLService(); \n    sslService.setAliasService(aliasService); \n    sslService.setKeystoreService(keystoreService); \n    Object result = sslService.buildSslContextFactory(config); \n    assertNotNull(result); \n    assertTrue(result instanceof SslContextFactory); \n    SslContextFactory sslContextFactory = (SslContextFactory) result; \n    sslContextFactory.start(); \n    assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); \n    assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); \n    assertNotNull(sslContextFactory.getKeyStore()); \n    assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); \n    assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); \n    assertNotNull(sslContextFactory.getTrustStore()); \n    assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); \n    assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); \n    verify(config,aliasService,keystoreService); \n}\n```', '```java\npublic void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { \n    String basedir = System.getProperty(""basedir""); \n    if (basedir == null) { \n        basedir = new File(""."").getCanonicalPath(); \n    } \n    String identityKeystoreType = ""jks""; \n    Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); \n    char[] identityKeystorePassword = ""horton"".toCharArray(); \n    char[] identityKeyPassphrase = ""horton"".toCharArray(); \n    String identityKeyAlias = ""server""; \n    Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); \n    String truststoreType = ""jks""; \n    String truststorePasswordAlias = ""trust_store_password""; \n    GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); \n    AliasService aliasService = createMock(AliasService.class); \n    expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); \n    expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); \n    String truststorePasswordAliasVar = ""trust_store_password""; \n    expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAliasVar))).andReturn(null).atLeastOnce(); \n    KeystoreService keystoreService = createMock(KeystoreService.class); \n    replay(config,aliasService,keystoreService); \n    JettySSLService sslService = new JettySSLService(); \n    sslService.setAliasService(aliasService); \n    sslService.setKeystoreService(keystoreService); \n    Object result = sslService.buildSslContextFactory(config); \n    assertNotNull(result); \n    assertTrue(result instanceof SslContextFactory); \n    SslContextFactory sslContextFactory = (SslContextFactory) result; \n    sslContextFactory.start(); \n    assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); \n    assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); \n    assertNotNull(sslContextFactory.getKeyStore()); \n    assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); \n    assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); \n    assertNotNull(sslContextFactory.getTrustStore()); \n    assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); \n    assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); \n    verify(config,aliasService,keystoreService); \n}\n```', '```java\npublic void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { \n    String basedir = System.getProperty(""basedir""); \n    if (basedir == null) { \n        basedir = new File(""."").getCanonicalPath(); \n    } \n    String identityKeystoreType = ""jks""; \n    Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); \n    char[] identityKeystorePassword = ""horton"".toCharArray(); \n    char[] identityKeyPassphrase = ""horton"".toCharArray(); \n    String identityKeyAlias = ""server""; \n    Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); \n    String truststoreType = ""jks""; \n    String truststorePasswordAlias = ""trust_store_password""; \n    GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); \n    AliasService aliasService = createMock(AliasService.class); \n    expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); \n    expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); \n    String truststorePasswordAliasVar = ""trust_store_password""; \n    expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAliasVar))).andReturn(null).atLeastOnce(); \n    KeystoreService keystoreService = createMock(KeystoreService.class); \n    replay(config,aliasService,keystoreService); \n    JettySSLService sslService = new JettySSLService(); \n    sslService.setAliasService(aliasService); \n    sslService.setKeystoreService(keystoreService); \n    Object result = sslService.buildSslContextFactory(config); \n    assertNotNull(result); \n    assertTrue(result instanceof SslContextFactory); \n    SslContextFactory sslContextFactory = (SslContextFactory) result; \n    sslContextFactory.start(); \n    assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); \n    assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); \n    assertNotNull(sslContextFactory.getKeyStore()); \n    assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); \n    assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); \n    assertNotNull(sslContextFactory.getTrustStore()); \n    assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); \n    assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); \n    verify(config,aliasService,keystoreService); \n}\n```', '```java\npublic void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { \n    String basedir = System.getProperty(""basedir""); \n    if (basedir == null) { \n        basedir = new File(""."").getCanonicalPath(); \n    } \n    String identityKeystoreType = ""jks""; \n    Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); \n    char[] identityKeystorePassword = ""horton"".toCharArray(); \n    char[] identityKeyPassphrase = ""horton"".toCharArray(); \n    String identityKeyAlias = ""server""; \n    Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); \n    String truststoreType = ""jks""; \n    String truststorePasswordAlias = ""trust_store_password""; \n    GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); \n    AliasService aliasService = createMock(AliasService.class); \n    expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); \n    expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); \n    String truststorePasswordAliasVar = ""trust_store_password""; \n    expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAliasVar))).andReturn(null).atLeastOnce(); \n    KeystoreService keystoreService = createMock(KeystoreService.class); \n    replay(config,aliasService,keystoreService); \n    JettySSLService sslService = new JettySSLService(); \n    sslService.setAliasService(aliasService); \n    sslService.setKeystoreService(keystoreService); \n    Object result = sslService.buildSslContextFactory(config); \n    assertNotNull(result); \n    assertTrue(result instanceof SslContextFactory); \n    SslContextFactory sslContextFactory = (SslContextFactory) result; \n    sslContextFactory.start(); \n    assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); \n    assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); \n    assertNotNull(sslContextFactory.getKeyStore()); \n    assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); \n    assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); \n    assertNotNull(sslContextFactory.getTrustStore()); \n    assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); \n    assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); \n    verify(config,aliasService,keystoreService); \n}\n```', '```java\npublic void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { \n    String basedir = System.getProperty(""basedir""); \n    if (basedir == null) { \n        basedir = new File(""."").getCanonicalPath(); \n    } \n    String identityKeystoreType = ""jks""; \n    Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); \n    char[] identityKeystorePassword = ""horton"".toCharArray(); \n    char[] identityKeyPassphrase = ""horton"".toCharArray(); \n    String identityKeyAlias = ""server""; \n    Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); \n    String truststoreType = ""jks""; \n    String truststorePasswordAlias = ""trust_store_password""; \n    GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); \n    AliasService aliasService = createMock(AliasService.class); \n    expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); \n    expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); \n    String truststorePasswordAliasVar = ""trust_store_password""; \n    expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAliasVar))).andReturn(null).atLeastOnce(); \n    KeystoreService keystoreService = createMock(KeystoreService.class); \n    replay(config,aliasService,keystoreService); \n    JettySSLService sslService = new JettySSLService(); \n    sslService.setAliasService(aliasService); \n    sslService.setKeystoreService(keystoreService); \n    Object result = sslService.buildSslContextFactory(config); \n    assertNotNull(result); \n    assertTrue(result instanceof SslContextFactory); \n    SslContextFactory sslContextFactory = (SslContextFactory) result; \n    sslContextFactory.start(); \n    assertEquals(identityKeystorePath.toUri().toString(),sslContextFactory.getKeyStorePath()); \n    assertEquals(identityKeystoreType,sslContextFactory.getKeyStoreType()); \n    assertNotNull(sslContextFactory.getKeyStore()); \n    assertEquals(truststorePath.toUri().toString(),sslContextFactory.getTrustStorePath()); \n    assertEquals(truststoreType,sslContextFactory.getTrustStoreType()); \n    assertNotNull(sslContextFactory.getTrustStore()); \n    assertTrue(sslContextFactory.getKeyStore().containsAlias(identityKeyAlias)); \n    assertFalse(sslContextFactory.getTrustStore().containsAlias(identityKeyAlias)); \n    verify(config,aliasService,keystoreService); \n}\n```', '```java\npublic void TestBuildSslContextFactoryExplicitTrustStoreNullPassword() throws Exception { \n    String basedir = System.getProperty(""basedir""); \n    if (basedir == null) { \n        basedir = new File(""."").getCanonicalPath(); \n    } \n    String identityKeystoreType = ""jks""; \n    Path identityKeystorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-keystore.jks""); \n    char[] identityKeystorePassword = ""horton"".toCharArray(); \n    char[] identityKeyPassphrase = ""horton"".toCharArray(); \n    String identityKeyAlias = ""server""; \n    Path truststorePath = Paths.get(basedir,""target"",""test-classes"",""keystores"",""server-truststore.jks""); \n    String truststoreType = ""jks""; \n    String truststorePasswordAlias = ""trust_store_password""; \n    GatewayConfig config = createGatewayConfig(true,true,identityKeystorePath,identityKeystoreType,identityKeyAlias,truststorePath,truststoreType,truststorePasswordAlias); \n    AliasService aliasService = createMock(AliasService.class); \n    expect(aliasService.getGatewayIdentityKeystorePassword()). andReturn(identityKeystorePassword). atLeastOnce(); \n    expect(aliasService.getGatewayIdentityPassphrase()).andReturn(identityKeyPassphrase).atLeastOnce(); \n    String truststorePasswordAliasVar = ""trust_store_password""; \n    expect(aliasService.getPasswordFromAliasForGateway(eq(truststorePasswordAliasVar))).andReturn(null).atLeastOnce(); \n    KeystoreService keystoreService = createMock(KeystoreService.class); \n    replay(config,aliasService,keystoreService); \n    JettySSLService sslService = new JettySSLService(); \n    ssl']",False,False,False,False,False,False,False,False,0.0,0.0,0.5088820220035384,0.5160114719422895
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }']","['private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }']","['private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }']","['private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }']","['@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }']","['@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }']","['```java\n@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { \n    List<IMarkerEvent> markers = new ArrayList<>(); \n    ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); \n    for (ITimeGraphEntry element : expandedElements) { \n        if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { \n            SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); \n            for (LogEvent log : model.getLogs()) { \n                markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); \n            } \n            if (model.getErrorTag()) { \n                markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); \n            } \n        } \n    } \n    return markers; \n}\n```', '```java\n@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { \n    List<IMarkerEvent> markers = new ArrayList<>(); \n    ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); \n    for (ITimeGraphEntry element : expandedElements) { \n        if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { \n            SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); \n            for (LogEvent log : model.getLogs()) { \n                markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); \n            } \n            if (model.getErrorTag()) { \n                markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); \n            } \n        } \n    } \n    return markers; \n}\n```', '```java\n@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { \n    List<IMarkerEvent> markers = new ArrayList<>(); \n    ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); \n    for (ITimeGraphEntry element : expandedElements) { \n        if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { \n            SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); \n            for (LogEvent log : model.getLogs()) { \n                markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); \n            } \n            if (model.getErrorTag()) { \n                markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); \n            } \n        } \n    } \n    return markers; \n}\n```']",True,False,False,False,False,False,False,False,0.0,0.8575661929898772,0.8374213307350815,0.8080175208290363
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }']","['private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.setProperty(""mail.smtp.auth"",""true""); props.setProperty(""mail.debug"",""true""); props.setProperty(""mail.store.protocol"",""pop3""); props.setProperty(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.setProperty(""mail.smtp.auth"",""true""); props.setProperty(""mail.debug"",""true""); props.setProperty(""mail.store.protocol"",""pop3""); props.setProperty(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.setProperty(""mail.store.protocol"",""pop3""); props.setProperty(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.setProperty(""mail.store.protocol"",""pop3""); props.setProperty(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.setProperty(""mail.store.protocol"",""pop3""); props.setProperty(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.setProperty(""mail.store.protocol"",""pop3""); props.setProperty(""mail.transport.protocol"",""smtp""); return props; }']","['private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }']","['private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String SMTP_HOST = ""smtp.gmail.com""; final String SOCKET_FACTORY_FALLBACK = ""false""; final String SMTP_PORT = ""465""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",SOCKET_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"",SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"",SMTP_PORT); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String SMTP_HOST = ""smtp.gmail.com""; final String SOCKET_FACTORY_FALLBACK = ""false""; final String SMTP_PORT = ""465""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",SOCKET_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"",SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"",SMTP_PORT); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String SMTP_HOST = ""smtp.gmail.com""; final String SOCKET_FACTORY_FALLBACK = ""false""; final String SMTP_PORT = ""465""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",SOCKET_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"",SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"",SMTP_PORT); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String SMTP_HOST = ""smtp.gmail.com""; final String SOCKET_FACTORY_FALLBACK = ""false""; final String SMTP_PORT = ""465""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",SOCKET_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"",SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"",SMTP_PORT); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String SMTP_HOST = ""smtp.gmail.com""; final String SOCKET_FACTORY_FALLBACK = ""false""; final String SMTP_PORT = ""465""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",SOCKET_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"",SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"",SMTP_PORT); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }']","['private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }']","['private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }']","['private void addItemsToBudgetSpinner() { \n    List<String> budgetNameList = new ArrayList<String>(); \n    final List<Budget> budgetList = appData.getBudgetList(); \n    for (Budget b : budgetList) { \n        Log.d(TAG,b.getName()); \n        budgetNameList.add(b.getName()); \n    } \n    budgetNameList.add(getResources().getString(R.string.new_budget)); \n    ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); \n    dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); \n    mBudgetView.setAdapter(dataAdapter); \n    mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { \n        @Override \n        public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { \n            if (pos == budgetList.size()) { \n                startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); \n            } \n        } \n        @Override \n        public void onNothingSelected(AdapterView<?> arg0) { \n        } \n    }); \n}', 'private void addItemsToBudgetSpinner() { \n    List<String> budgetNameList = new ArrayList<String>(); \n    final List<Budget> budgetList = appData.getBudgetList(); \n    for (Budget b : budgetList) { \n        Log.d(TAG,b.getName()); \n        budgetNameList.add(b.getName()); \n    } \n    budgetNameList.add(getResources().getString(R.string.new_budget)); \n    ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); \n    dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); \n    mBudgetView.setAdapter(dataAdapter); \n    mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { \n        @Override \n        public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { \n            if (pos == budgetList.size()) { \n                startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); \n            } \n        } \n        @Override \n        public void onNothingSelected(AdapterView<?> arg0) { \n        } \n    }); \n}', 'private void addItemsToBudgetSpinner() { \n    List<String> budgetNameList = new ArrayList<String>(); \n    final List<Budget> budgetList = appData.getBudgetList(); \n    for (Budget b : budgetList) { \n        Log.d(TAG,b.getName()); \n        budgetNameList.add(b.getName()); \n    } \n    budgetNameList.add(getResources().getString(R.string.new_budget)); \n    ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); \n    dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); \n    mBudgetView.setAdapter(dataAdapter); \n    mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { \n        @Override \n        public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { \n            if (pos == budgetList.size()) { \n                startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); \n            } \n        } \n        @Override \n        public void onNothingSelected(AdapterView<?> arg0) { \n        } \n    }); \n}', 'private void addItemsToBudgetSpinner() { \n    List<String> budgetNameList = new ArrayList<String>(); \n    final List<Budget> budgetList = appData.getBudgetList(); \n    for (Budget b : budgetList) { \n        Log.d(TAG,b.getName()); \n        budgetNameList.add(b.getName()); \n    } \n    budgetNameList.add(getResources().getString(R.string.new_budget)); \n    ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); \n    dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); \n    mBudgetView.setAdapter(dataAdapter); \n    mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { \n        @Override \n        public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { \n            if (pos == budgetList.size()) { \n                startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); \n            } \n        } \n        @Override \n        public void onNothingSelected(AdapterView<?> arg0) { \n        } \n    }); \n}', 'private void addItemsToBudgetSpinner() { \n    List<String> budgetNameList = new ArrayList<String>(); \n    final List<Budget> budgetList = appData.getBudgetList(); \n    for (Budget b : budgetList) { \n        Log.d(TAG,b.getName()); \n        budgetNameList.add(b.getName()); \n    } \n    budgetNameList.add(getResources().getString(R.string.new_budget)); \n    ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); \n    dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); \n    mBudgetView.setAdapter(dataAdapter); \n    mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { \n        @Override \n        public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { \n            if (pos == budgetList.size()) { \n                startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); \n            } \n        } \n        @Override \n        public void onNothingSelected(AdapterView<?> arg0) { \n        } \n    }); \n}', 'private void addItemsToBudgetSpinner() { \n    List<String> budgetNameList = new ArrayList<String>(); \n    final List<Budget> budgetList = appData.getBudgetList(); \n    for (Budget b : budgetList) { \n        Log.d(TAG,b.getName()); \n        budgetNameList.add(b.getName()); \n    } \n    budgetNameList.add(getResources().getString(R.string.new_budget)); \n    ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); \n    dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); \n    mBudgetView.setAdapter(dataAdapter); \n    mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { \n        @Override \n        public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { \n            if (pos == budgetList.size()) { \n                startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); \n            } \n        } \n        @Override \n        public void onNothingSelected(AdapterView<?> arg0) { \n        } \n    }); \n}', 'private void addItemsToBudgetSpinner() { \n    List<String> budgetNameList = new ArrayList<String>(); \n    final List<Budget> budgetList = appData.getBudgetList(); \n    for (Budget b : budgetList) { \n        Log.d(TAG,b.getName()); \n        budgetNameList.add(b.getName()); \n    } \n    budgetNameList.add(getResources().getString(R.string.new_budget)); \n    ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); \n    dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); \n    mBudgetView.setAdapter(dataAdapter); \n    mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { \n        @Override \n        public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { \n            if (pos == budgetList.size()) { \n                startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); \n            } \n        } \n        @Override \n        public void onNothingSelected(AdapterView<?> arg0) { \n        } \n    }); \n}', 'private void addItemsToBudgetSpinner() { \n    List<String> budgetNameList = new ArrayList<String>(); \n    final List<Budget> budgetList = appData.getBudgetList(); \n    for (Budget b : budgetList) { \n        Log.d(TAG,b.getName()); \n        budgetNameList.add(b.getName()); \n    } \n    budgetNameList.add(getResources().getString(R.string.new_budget)); \n    ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); \n    dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); \n    mBudgetView.setAdapter(dataAdapter); \n    mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { \n        @Override \n        public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { \n            if (pos == budgetList.size()) { \n                startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); \n            } \n        } \n        @Override \n        public void onNothingSelected(AdapterView<?> arg0) { \n        } \n    }); \n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.4814906057707259,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Map<String,Object> blockStats = null; \n    Object[] beans = (Object[]) stat.get(""beans""); \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    assertNotNull(blockStats); \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    assertNotNull(storageTypeStatsList); \n    assertEquals(4,storageTypeStatsList.length); \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) { \n            case ""ARCHIVE"": \n            case ""DISK"": \n                assertEquals(3L,storageTypeStats.get(""nodesInService"")); \n                break; \n            case ""RAM_DISK"": \n                assertEquals(7L,storageTypeStats.get(""nodesInService"")); \n                break; \n            case ""NVDIMM"": \n                assertEquals(1L,storageTypeStats.get(""nodesInService"")); \n                break; \n            default: \n                fail(); \n        } \n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}', 'public void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Map<String,Object> blockStats = null; \n    Object[] beans = (Object[]) stat.get(""beans""); \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    assertNotNull(blockStats); \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    assertNotNull(storageTypeStatsList); \n    assertEquals(4,storageTypeStatsList.length); \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) { \n            case ""ARCHIVE"": \n            case ""DISK"": \n                assertEquals(3L,storageTypeStats.get(""nodesInService"")); \n                break; \n            case ""RAM_DISK"": \n                assertEquals(7L,storageTypeStats.get(""nodesInService"")); \n                break; \n            case ""NVDIMM"": \n                assertEquals(1L,storageTypeStats.get(""nodesInService"")); \n                break; \n            default: \n                fail(); \n        } \n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch(storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if ( storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['```java\npublic void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Map<String,Object> blockStats = null; \n    Object[] beans = (Object[]) stat.get(""beans""); \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    assertNotNull(blockStats); \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    assertNotNull(storageTypeStatsList); \n    assertEquals(4,storageTypeStatsList.length); \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) {\n            case ""ARCHIVE"":\n            case ""DISK"":\n                assertEquals(3L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""RAM_DISK"":\n                assertEquals(7L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""NVDIMM"":\n                assertEquals(1L,storageTypeStats.get(""nodesInService""));\n                break;\n            default:\n                fail();\n        }\n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}\n```', '```java\npublic void testStorageTypeStatsJMX() throws Exception { \n    URL baseUrl = new URL(cluster.getHttpUri(0)); \n    String result = readOutput(new URL(baseUrl,""/jmx"")); \n    Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); \n    Map<String,Object> blockStats = null; \n    Object[] beans = (Object[]) stat.get(""beans""); \n    for (Object bean : beans) { \n        Map<String,Object> map = (Map<String,Object>) bean; \n        if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { \n            blockStats = map; \n        } \n    } \n    assertNotNull(blockStats); \n    Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); \n    assertNotNull(storageTypeStatsList); \n    assertEquals(4,storageTypeStatsList.length); \n    Set<String> typesPresent = new HashSet<>(); \n    for (Object obj : storageTypeStatsList) { \n        Map<String,Object> entry = (Map<String,Object>) obj; \n        String storageType = (String) entry.get(""key""); \n        Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); \n        typesPresent.add(storageType); \n        switch(storageType) {\n            case ""ARCHIVE"":\n            case ""DISK"":\n                assertEquals(3L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""RAM_DISK"":\n                assertEquals(7L,storageTypeStats.get(""nodesInService""));\n                break;\n            case ""NVDIMM"":\n                assertEquals(1L,storageTypeStats.get(""nodesInService""));\n                break;\n            default:\n                fail();\n        }\n    } \n    assertTrue(typesPresent.contains(""ARCHIVE"")); \n    assertTrue(typesPresent.contains(""DISK"")); \n    assertTrue(typesPresent.contains(""RAM_DISK"")); \n    assertTrue(typesPresent.contains(""NVDIMM"")); \n}\n```\n\n...']",True,True,False,False,False,False,False,False,0.0,0.0,0.31973156696853317,0.3609184157154087
"['protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }']","['protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }']","['protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }']","['```java\nprotected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }\n```', '```java\nprotected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }\n```', '```java\nprotected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }\n```']",True,True,False,False,False,False,False,False,0.0,0.0,0.9109237768641112,0.9217448211727216
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['```java\npublic void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }\n```', '```java\npublic void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }\n```', '```java\npublic void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000L / 1000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }\n```', '```java\npublic void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000L / 1000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }\n```', '```java\npublic void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000L / 1000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }\n```', '```java\npublic void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000L / 1000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }\n```', '```java\npublic void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000L / 1000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }\n```', '```java\npublic void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000L / 1000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }\n```', '```java\npublic void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000L / 1000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200, ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }\n```']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.43300864105770953
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destinationClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destinationClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType dest : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,dest)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destination)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType type : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,type)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType dest : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,dest)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destination)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType type : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,type)); } return result; }']","['private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destinationClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destinationClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destination)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType dest : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,dest)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType classToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,classToCheck)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destClassToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destClassToCheck)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType typeToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,typeToCheck)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,destType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType targetType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,targetType)); } return result; }']","['private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,t)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,t)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,t)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,t)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,t)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,t)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,t)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,t)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown,t)); } return result; }']","['private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destinationClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destinationClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destination)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType t : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, t)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType dest : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, dest)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destinationClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destinationClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destClass : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destClass)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destination)); } return result; }']",True,False,False,False,False,False,False,False,0.0,0.6338077054689596,0.6338077054689596,0.6522125981013674
"['private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }']","['private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }']","['private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }']","['private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }']","['public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }']","['public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }']","['public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws RuntimeException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws Exception { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws Error { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws Throwable { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws IOException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws FileNotFoundException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws NoSuchFieldException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws NoSuchMethodException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws IllegalAccessException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }']","['public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws Exception { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws RuntimeException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws Error { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws RuntimeException, Error { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws CustomException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws IOException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws FileNotFoundException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws SQLException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws MyCustomException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }']","['public void testStateChangeWithTransitiveState() throws InterruptedException {\n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) \n            continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) \n            continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) \n            continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) \n            continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) \n            continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) \n            continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) \n            continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) \n            continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException {\n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) \n            continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n}']","['public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.6545654390989608,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']","['private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']","['private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']","['private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']",False,False,False,False,False,False,False,False,0.6905949627697585,0.6905949627697585,0.6905949627697585,0.6905949627697585
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found and could not be removed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock found matching [%s] for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found and cannot be removed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for deletion"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found and will not be removed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for removal operation"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found to be removed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for deletion process"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found and will not be deleted"",taskLockToRemove); } }']","['public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found to be removed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found and could not be removed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found in the list of locks to remove"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found and therefore could not be removed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found and could not be removed from the list"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found and hence could not be removed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found for deletion"",taskLockToRemove); } }']","['public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock [%s] to remove"",taskLockToRemove); }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] to remove was not found"",taskLockToRemove); }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock found matching [%s] for removal"",taskLockToRemove); }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for removal"",taskLockToRemove); }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found and could not be removed"",taskLockToRemove); }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found in the list of locks to remove"",taskLockToRemove); }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found and could not be removed"",taskLockToRemove); }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found and could not be removed"",taskLockToRemove); }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found for removal"",taskLockToRemove); }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found and could not be removed"",taskLockToRemove); }']","['```java\npublic void removeLock(String taskid, TaskLock taskLockToRemove) {\n    Preconditions.checkNotNull(taskid, ""taskid"");\n    Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove"");\n    boolean removed = false;\n    final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid);\n    for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) {\n        final long id = taskLockWithId.getKey();\n        final TaskLock taskLock = taskLockWithId.getValue();\n        if (taskLock.equals(taskLockToRemove)) {\n            log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock);\n            handler.removeLock(id);\n            removed = true;\n        }\n    }\n    if (!removed) {\n        log.error(""No TaskLock found to remove: %s"", taskLockToRemove);\n    }\n}\n```', '```java\npublic void removeLock(String taskid, TaskLock taskLockToRemove) {\n    Preconditions.checkNotNull(taskid, ""taskid"");\n    Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove"");\n    boolean removed = false;\n    final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid);\n    for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) {\n        final long id = taskLockWithId.getKey();\n        final TaskLock taskLock = taskLockWithId.getValue();\n        if (taskLock.equals(taskLockToRemove)) {\n            log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock);\n            handler.removeLock(id);\n            removed = true;\n        }\n    }\n    if (!removed) {\n        log.error(""TaskLock not found for removal: %s"", taskLockToRemove);\n    }\n}\n```', '```java\npublic void removeLock(String taskid, TaskLock taskLockToRemove) {\n    Preconditions.checkNotNull(taskid, ""taskid"");\n    Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove"");\n    boolean removed = false;\n    final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid);\n    for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) {\n        final long id = taskLockWithId.getKey();\n        final TaskLock taskLock = taskLockWithId.getValue();\n        if (taskLock.equals(taskLockToRemove)) {\n            log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock);\n            handler.removeLock(id);\n            removed = true;\n        }\n    }\n    if (!removed) {\n        log.error(""TaskLock [%s] not found for removal"", taskLockToRemove);\n    }\n}\n```', '```java\npublic void removeLock(String taskid, TaskLock taskLockToRemove) {\n    Preconditions.checkNotNull(taskid, ""taskid"");\n    Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove"");\n    boolean removed = false;\n    final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid);\n    for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) {\n        final long id = taskLockWithId.getKey();\n        final TaskLock taskLock = taskLockWithId.getValue();\n        if (taskLock.equals(taskLockToRemove)) {\n            log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock);\n            handler.removeLock(id);\n            removed = true;\n        }\n    }\n    if (!removed) {\n        log.error(""TaskLock [%s] not found for removal"", taskLockToRemove);\n    }\n}\n```', '```java\npublic void removeLock(String taskid, TaskLock taskLockToRemove) {\n    Preconditions.checkNotNull(taskid, ""taskid"");\n    Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove"");\n    boolean removed = false;\n    final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid);\n    for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) {\n        final long id = taskLockWithId.getKey();\n        final TaskLock taskLock = taskLockWithId.getValue();\n        if (taskLock.equals(taskLockToRemove)) {\n            log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock);\n            handler.removeLock(id);\n            removed = true;\n        }\n    }\n    if (!removed) {\n        log.error(""TaskLock [%s] was not found for removal"", taskLockToRemove);\n    }\n}\n```', '```java\npublic void removeLock(String taskid, TaskLock taskLockToRemove) {\n    Preconditions.checkNotNull(taskid, ""taskid"");\n    Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove"");\n    boolean removed = false;\n    final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid);\n    for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) {\n        final long id = taskLockWithId.getKey();\n        final TaskLock taskLock = taskLockWithId.getValue();\n        if (taskLock.equals(taskLockToRemove)) {\n            log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock);\n            handler.removeLock(id);\n            removed = true;\n        }\n    }\n    if (!removed) {\n        log.error(""TaskLock [%s] not found and could not be removed"", taskLockToRemove);\n    }\n}\n```', '```java\npublic void removeLock(String taskid, TaskLock taskLockToRemove) {\n    Preconditions.checkNotNull(taskid, ""taskid"");\n    Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove"");\n    boolean removed = false;\n    final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid);\n    for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) {\n        final long id = taskLockWithId.getKey();\n        final TaskLock taskLock = taskLockWithId.getValue();\n        if (taskLock.equals(taskLockToRemove)) {\n            log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock);\n            handler.removeLock(id);\n            removed = true;\n        }\n    }\n    if (!removed) {\n        log.error(""No TaskLock matching [%s] found for removal"", taskLockToRemove);\n    }\n}\n```', '```java\npublic void removeLock(String taskid, TaskLock taskLockToRemove) {\n    Preconditions.checkNotNull(taskid, ""taskid"");\n    Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove"");\n    boolean removed = false;\n    final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid);\n    for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) {\n        final long id = taskLockWithId.getKey();\n        final TaskLock taskLock = taskLockWithId.getValue();\n        if (taskLock.equals(taskLockToRemove)) {\n            log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock);\n            handler.removeLock(id);\n            removed = true;\n        }\n    }\n    if (!removed) {\n        log.error(""TaskLock [%s] not found and could not be removed"", taskLockToRemove);\n    }\n}\n```', '```java\npublic void removeLock(String taskid, TaskLock taskLockToRemove) {\n    Preconditions.checkNotNull(taskid, ""taskid"");\n    Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove"");\n    boolean removed = false;\n    final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid);\n    for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) {\n        final long id = taskLockWithId.getKey();\n        final TaskLock taskLock = taskLockWithId.getValue();\n        if (taskLock.equals(taskLockToRemove)) {\n            log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock);\n            handler.removeLock(id);\n            removed = true;\n        }\n    }\n    if (!removed) {\n        log.error(""TaskLock [%s] not found and could not be removed"", taskLockToRemove);\n    }\n}\n```']",False,False,True,False,False,False,False,False,0.38524397590930265,0.39183851425046834,0.0,0.8041780697380206
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 7; i >= 0; i--) { bytes[s + 7 - i] = (byte) (bits >> (i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }']","['public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 7; i >= 0; i--) { bytes[s + 7 - i] = (byte) (bits >> (i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 7; i >= 0; i--) { bytes[s + 7 - i] = (byte) (bits >> (i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 7; i >= 0; i--) { bytes[s + 7 - i] = (byte) (bits >> (i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 0; i < 8; i++) { bytes[s + i] = (byte) (bits >> (56 - i * 8)); } pos = newcount; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); for (int i = 7; i >= 0; i--) { bytes[s + 7 - i] = (byte) (bits >> (i * 8)); } pos = newcount; }']","['public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(bits); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }']","['public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); pos += 8; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); pos = ensureCapacity(8); }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); pos += 8; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); pos = ensureCapacity(8); }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); pos += 8; }', 'public void writeDouble(double v) { long bits = Double.doubleToLongBits(v); writeLong(bits); pos = ensureCapacity(8); }']",False,False,False,True,False,False,False,False,0.043389519964411004,0.043389519964411004,0.02603171348151666,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result;}', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result;}', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result;}', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result;}', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result;}', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result;}', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result;}']","['stmt.setLong(3,DateTimeUtils.dateToLong(date));', 'stmt.setLong(3,DateTimeUtils.dateToLong(date));', 'stmt.setLong(3,DateTimeUtils.dateToLong(date));', 'stmt.setLong(3,DateTimeUtils.dateToLong(date));', 'stmt.setLong(3,DateTimeUtils.dateToLong(date));', 'stmt.setLong(3,DateTimeUtils.dateToLong(date));', 'stmt.setLong(3,DateTimeUtils.dateToLong(date));', 'stmt.setLong(3,DateTimeUtils.dateToLong(date));', 'stmt.setLong(3,DateTimeUtils.dateToLong(date));', 'stmt.setLong(3,DateTimeUtils.dateToLong(date));']","['public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setTimestamp(3,Timestamp.valueOf(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toInstant(ZoneOffset.UTC).toEpochMilli()); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }']","['public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }']",True,False,False,True,False,False,False,False,0.0,0.0,0.4852819302431187,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }']","['public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }']","['public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }']","['public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(30,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(15,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(25,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(10,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(18,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(22,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(16,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(12,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }']","['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(release.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(retried.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(thrown.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(future.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(release.await(10,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(retried.await(10,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(future.await(10,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(release.await(5,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(retried.await(5,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }']","['public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }', 'public void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }']","['```java\npublic void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); arrival.await(20,TimeUnit.SECONDS); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }\n```', '```java\npublic void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }\n```', '```java\npublic void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }\n```', '```java\npublic void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }\n```', '```java\npublic void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }\n```', '```java\npublic void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }\n```', '```java\npublic void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }\n```', '```java\npublic void testBothOwnersSuspected(Method m) throws ExecutionException,InterruptedException { initAndCheck(m); CountDownLatch release = new CountDownLatch(1); CountDownLatch arrival = new CountDownLatch(2); AtomicInteger thrown = new AtomicInteger(); AtomicInteger retried = new AtomicInteger(); cache(0).getAdvancedCache().getAsyncInterceptorChain().addInterceptorAfter(new CheckOTEInterceptor(thrown,retried),StateTransferInterceptor.class); cache(1).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); cache(2).getAdvancedCache().getAsyncInterceptorChain().addInterceptor(new DelayingInterceptor(arrival,release),0); Future<Object> future = fork(() -> cache(0).get(key)); assertTrue(arrival.await(20,TimeUnit.SECONDS)); installNewView(cache(0),cache(0)); assertNull(future.get()); assertEquals(1,thrown.get()); assertEquals(0,retried.get()); release.countDown(); }\n```']",True,False,False,False,False,False,False,False,0.0,0.4638304111222717,0.4638304111222717,0.4689253313287437
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().entrySet().stream().map(Map.Entry<String, String>::getKey).collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().map(Object::toString).collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().map(String::valueOf).collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().map(entry -> entry.getKey()).collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().map(entry -> entry.getKey()).collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { \n    String prefixValue = ""val_""; \n    String prefixName = ""key_""; \n    List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); \n    client.unsetSessionVariables(unsetList); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        String val = prefixValue + i; \n        assertEquals(i + 4, client.getAllSessionVariables().size()); \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n        Map<String, String> map = Maps.newHashMap(); \n        map.put(key, val); \n        client.updateSessionVariables(map); \n        assertEquals(i + 5, client.getAllSessionVariables().size()); \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n    } \n    int totalSessionVarNum = client.getAllSessionVariables().size(); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n        client.unsetSessionVariables(Lists.newArrayList(key)); \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n    } \n    assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); \n}', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { \n    String prefixValue = ""val_""; \n    String prefixName = ""key_""; \n    List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); \n    client.unsetSessionVariables(unsetList); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        String val = prefixValue + i; \n        assertEquals(i + 4, client.getAllSessionVariables().size()); \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n        Map<String, String> map = Maps.newHashMap(); \n        map.put(key, val); \n        client.updateSessionVariables(map); \n        assertEquals(i + 5, client.getAllSessionVariables().size()); \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n    } \n    int totalSessionVarNum = client.getAllSessionVariables().size(); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n        client.unsetSessionVariables(Lists.newArrayList(key)); \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n    } \n    assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); \n}', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { \n    String prefixValue = ""val_""; \n    String prefixName = ""key_""; \n    List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); \n    client.unsetSessionVariables(unsetList); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        String val = prefixValue + i; \n        assertEquals(i + 4, client.getAllSessionVariables().size()); \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n        Map<String, String> map = Maps.newHashMap(); \n        map.put(key, val); \n        client.updateSessionVariables(map); \n        assertEquals(i + 5, client.getAllSessionVariables().size()); \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n    } \n    int totalSessionVarNum = client.getAllSessionVariables().size(); \n    for (int i = 0; i < 10; i++) { \n        String key = prefixName + i; \n        assertTrue(client.getAllSessionVariables().containsKey(key)); \n        assertTrue(client.existSessionVariable(key)); \n        client.unsetSessionVariables(Lists.newArrayList(key)); \n        assertFalse(client.getAllSessionVariables().containsKey(key)); \n        assertFalse(client.existSessionVariable(key)); \n    } \n    assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }']","['private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }']","['private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }']","['private boolean authorSatisfies(IModel model,TurboIssue issue) { \n    if (!content.isPresent()) return false; \n    Optional<TurboUser> author = model.getAuthorOfIssue(issue); \n    String content = this.content.get().toLowerCase(); \n    String login = issue.getCreator().toLowerCase(); \n    String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); \n    return login.contains(content) || name.contains(content); \n}', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { \n    if (!content.isPresent()) return false; \n    Optional<TurboUser> author = model.getAuthorOfIssue(issue); \n    String content = this.content.get().toLowerCase(); \n    String login = issue.getCreator().toLowerCase(); \n    String name = author.map(u -> u.getRealName()).orElse("""").toLowerCase(); \n    return login.contains(content) || name.contains(content); \n}', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { \n    if (!content.isPresent()) return false; \n    Optional<TurboUser> author = model.getAuthorOfIssue(issue); \n    String content = this.content.get().toLowerCase(); \n    String login = issue.getCreator().toLowerCase(); \n    String name = author.map(user -> user.getRealName()).orElse("""").toLowerCase(); \n    return login.contains(content) || name.contains(content); \n}', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { \n    if (!content.isPresent()) return false; \n    Optional<TurboUser> author = model.getAuthorOfIssue(issue); \n    String content = this.content.get().toLowerCase(); \n    String login = issue.getCreator().toLowerCase(); \n    String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); \n    return login.contains(content) || name.contains(content); \n}', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { \n    if (!content.isPresent()) return false; \n    Optional<TurboUser> author = model.getAuthorOfIssue(issue); \n    String content = this.content.get().toLowerCase(); \n    String login = issue.getCreator().toLowerCase(); \n    String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); \n    return login.contains(content) || name.contains(content); \n}', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { \n    if (!content.isPresent()) return false; \n    Optional<TurboUser> author = model.getAuthorOfIssue(issue); \n    String content = this.content.get().toLowerCase(); \n    String login = issue.getCreator().toLowerCase(); \n    String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); \n    return login.contains(content) || name.contains(content); \n}', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { \n    if (!content.isPresent()) return false; \n    Optional<TurboUser> author = model.getAuthorOfIssue(issue); \n    String content = this.content.get().toLowerCase(); \n    String login = issue.getCreator().toLowerCase(); \n    String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); \n    return login.contains(content) || name.contains(content); \n}', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { \n    if (!content.isPresent()) return false; \n    Optional<TurboUser> author = model.getAuthorOfIssue(issue); \n    String content = this.content.get().toLowerCase(); \n    String login = issue.getCreator().toLowerCase(); \n    String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); \n    return login.contains(content) || name.contains(content); \n}', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { \n    if (!content.isPresent()) return false; \n    Optional<TurboUser> author = model.getAuthorOfIssue(issue); \n    String content = this.content.get().toLowerCase(); \n    String login = issue.getCreator().toLowerCase(); \n    String name = author.map(TurboUser::getRealName).orElse("""").toLowerCase(); \n    return login.contains(content) || name.contains(content); \n}']",True,False,False,True,False,False,False,False,0.0,0.4490742568758417,0.4490742568758417,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity <START> [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity <START> [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity <START> [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity <START> [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity <START> [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity <START> [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity <START> [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity <START> [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }']","['private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { \n    clientKeyExchange = message; \n    String identity = message.getIdentity(); \n    String virtualHost = null; \n    byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); \n    if (getIndicatedServerNames() == null) { \n        LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); \n    } else { \n        ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); \n        if (serverName == null) { \n            LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); \n        } else { \n            virtualHost = new String(serverName.getName(), ServerName.CHARSET); \n            LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); \n        } \n    } \n    if (psk == null) { \n        throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); \n    } else { \n        session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); \n        return generatePremasterSecretFromPSK(psk); \n    } \n}', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { \n    clientKeyExchange = message; \n    String identity = message.getIdentity(); \n    String virtualHost = null; \n    byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); \n    if (getIndicatedServerNames() == null) { \n        LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); \n    } else { \n        ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); \n        if (serverName == null) { \n            LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); \n        } else { \n            virtualHost = new String(serverName.getName(), ServerName.CHARSET); \n            LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); \n        } \n    } \n    if (psk == null) { \n        throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); \n    } else { \n        session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); \n        return generatePremasterSecretFromPSK(psk); \n    } \n}']","['private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }']","['private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { \n    clientKeyExchange = message; \n    String identity = message.getIdentity(); \n    String virtualHost = null; \n    byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); \n    if (getIndicatedServerNames() == null) { \n        LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); \n    } else { \n        ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); \n        if (serverName == null) { \n            LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); \n        } else { \n            virtualHost = new String(serverName.getName(), ServerName.CHARSET); \n            LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); \n        } \n    } \n    if (psk == null) { \n        throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); \n    } else { \n        session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); \n        return generatePremasterSecretFromPSK(psk); \n    } \n}', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { \n    clientKeyExchange = message; \n    String identity = message.getIdentity(); \n    String virtualHost = null; \n    byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); \n    if (getIndicatedServerNames() == null) { \n        LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); \n    } else { \n        ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); \n        if (serverName == null) { \n            LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); \n        } else { \n            virtualHost = new String(serverName.getName(), ServerName.CHARSET); \n            LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); \n        } \n    } \n    if (psk == null) { \n        throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); \n    } else { \n        session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); \n        return generatePremasterSecretFromPSK(psk); \n    } \n}', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { \n    clientKeyExchange = message; \n    String identity = message.getIdentity(); \n    String virtualHost = null; \n    byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); \n    if (getIndicatedServerNames() == null) { \n        LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); \n    } else { \n        ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); \n        if (serverName == null) { \n            LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); \n        } else { \n            virtualHost = new String(serverName.getName(), ServerName.CHARSET); \n            LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); \n        } \n    } \n    if (psk == null) { \n        throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); \n    } else { \n        session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); \n        return generatePremasterSecretFromPSK(psk); \n    } \n}']",False,True,True,True,False,False,False,False,0.9651391201669045,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }']","['private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } }']","['private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }']","['private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new IllegalStateException(""Unknown exception thrown while recording daily last value."",e); } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new IllegalStateException(""Unknown exception thrown while recording daily last value.""); } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.46223713664946314,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }']","['public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, Long.MAX_VALUE, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, Long.MAX_VALUE, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, 10010L, 0b11010010_01101001_10010100_10010010L, Long.MAX_VALUE, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, 10010L, Long.MAX_VALUE, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, 10010L, 0b11010010_01101001_10010100_10010010L, Long.MAX_VALUE, 102L, 0xFFL }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, 10010L, 0b11010010_01101001_10010100_10010010L, Long.MAX_VALUE, 102L, 0xFFL }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, 10010L, 0b11010010_01101001_10010100_10010010L, Long.MAX_VALUE, 102L, 0xFFL }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0B1100110L, Long.MAX_VALUE, 10010L, 0b11010010_01101001_10010100_10010010L, Long.MAX_VALUE, 102L, 0xFFL }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }']","['public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }']","['public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } }']",False,False,False,False,False,False,False,False,0.9164531641034833,0.8086869775134029,0.874678895739835,0.9164531641034833
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""key"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }']","['public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""key"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(Collections.singletonMap(""key"", ""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }']","['public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""key"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key2"", ""value2""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key2"", ""value2""); attributes.put(""key3"", ""value3""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key2"", ""value2""); attributes.put(""key3"", ""value3""); attributes.put(""key4"", ""value4""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key2"", ""value2""); attributes.put(""key3"", ""value3""); attributes.put(""key4"", ""value4""); attributes.put(""key5"", ""value5""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key2"", ""value2""); attributes.put(""key3"", ""value3""); attributes.put(""key4"", ""value4""); attributes.put(""key5"", ""value5""); attributes.put(""key6"", ""value6""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key2"", ""value2""); attributes.put(""key3"", ""value3""); attributes.put(""key4"", ""value4""); attributes.put(""key5"", ""value5""); attributes.put(""key6"", ""value6""); attributes.put(""key7"", ""value7""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key2"", ""value2""); attributes.put(""key3"", ""value3""); attributes.put(""key4"", ""value4""); attributes.put(""key5"", ""value5""); attributes.put(""key6"", ""value6""); attributes.put(""key7"", ""value7""); attributes.put(""key8"", ""value8""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key2"", ""value2""); attributes.put(""key3"", ""value3""); attributes.put(""key4"", ""value4""); attributes.put(""key5"", ""value5""); attributes.put(""key6"", ""value6""); attributes.put(""key7"", ""value7""); attributes.put(""key8"", ""value8""); attributes.put(""key9"", ""value9""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }']","['public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.5345672065746951
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static ArrayList<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static LinkedList<String> getReferencedTypes(final File file) { LinkedList<String> references = new LinkedList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static Vector<String> getReferencedTypes(final File file) { Vector<String> references = new Vector<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static Stack<String> getReferencedTypes(final File file) { Stack<String> references = new Stack<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static ArrayDeque<String> getReferencedTypes(final File file) { ArrayDeque<String> references = new ArrayDeque<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static LinkedHashSet<String> getReferencedTypes(final File file) { LinkedHashSet<String> references = new LinkedHashSet<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static TreeSet<String> getReferencedTypes(final File file) { TreeSet<String> references = new TreeSet<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static HashSet<String> getReferencedTypes(final File file) { HashSet<String> references = new HashSet<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static LinkedBlockingQueue<String> getReferencedTypes(final File file) { LinkedBlockingQueue<String> references = new LinkedBlockingQueue<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }']","['public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references;}', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }']","['public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }']","['public static List<String> getReferencedTypes(final File file) {\nList<String> references = new ArrayList<>();\nDocumentBuilder db; \nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \ndbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \ntry { \ndb = dbf.newDocumentBuilder(); \nDocument document; \ndocument = db.parse(file); \nNode rootNode = document.getDocumentElement(); \nNodeList childNodes = rootNode.getChildNodes(); \nfor (int i = 0; i < childNodes.getLength(); i++) { \nNode n = childNodes.item(i); \nif (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \nString type = """"; \ntype = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \nreferences.add(type); \n} \n} \n} catch (Exception e) { \nActivator.getDefault().logError(e.getMessage(),e); \n} \nreturn references; \n}', 'public static List<String> getReferencedTypes(final File file) {\nList<String> references = new ArrayList<>();\nDocumentBuilder db; \nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \ndbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \ntry { \ndb = dbf.newDocumentBuilder(); \nDocument document; \ndocument = db.parse(file); \nNode rootNode = document.getDocumentElement(); \nNodeList childNodes = rootNode.getChildNodes(); \nfor (int i = 0; i < childNodes.getLength(); i++) { \nNode n = childNodes.item(i); \nif (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \nString type = """"; \ntype = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \nreferences.add(type); \n} \n} \n} catch (Exception e) { \nActivator.getDefault().logError(e.getMessage(),e); \n} \nreturn references; \n}', 'public static List<String> getReferencedTypes(final File file) {\nList<String> references = new ArrayList<>();\nDocumentBuilder db; \nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \ndbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \ntry { \ndb = dbf.newDocumentBuilder(); \nDocument document; \ndocument = db.parse(file); \nNode rootNode = document.getDocumentElement(); \nNodeList childNodes = rootNode.getChildNodes(); \nfor (int i = 0; i < childNodes.getLength(); i++) { \nNode n = childNodes.item(i); \nif (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \nString type = """"; \ntype = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \nreferences.add(type); \n} \n} \n} catch (Exception e) { \nActivator.getDefault().logError(e.getMessage(),e); \n} \nreturn references; \n}']",False,True,True,True,False,False,False,False,0.7281985134108567,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }']","['public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }']","['public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }']","['public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }']","['public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }']","['public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }']","['public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }']","['protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }', 'protected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException { ResultSetMetaData metaData = resultSet.getMetaData(); Map<String,Object> resultsMap = new HashMap<>(); int columnCount = metaData.getColumnCount(); for (int i = 1; i <= columnCount; ++i) { String columnName = metaData.getColumnName(i).toLowerCase(); Object object = resultSet.getObject(i); resultsMap.put(columnName,object); } return resultsMap; }']","['protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}', 'protected Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}']","['```java\nprotected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}\n```', '```java\nprotected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}\n```', '```java\nprotected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}\n```', '```java\nprotected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}\n```', '```java\nprotected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}\n```', '```java\nprotected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}\n```', '```java\nprotected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}\n```', '```java\nprotected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}\n```', '```java\nprotected static Map<String,Object> getEntityFromResultSet(ResultSet resultSet) throws SQLException {\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Map<String,Object> resultsMap = new HashMap<>();\n    int columnCount = metaData.getColumnCount();\n    for (int i = 1; i <= columnCount; ++i) {\n        String columnName = metaData.getColumnName(i).toLowerCase();\n        Object object = resultSet.getObject(i);\n        resultsMap.put(columnName,object);\n    }\n    return resultsMap;\n}\n```']",True,True,False,False,False,False,False,False,0.0,0.0,0.6526741577635239,0.6630268670015378
"['public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }']","['public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }']","['public void testStateAdvancedChange_startFails() throws InterruptedException {\n    this.agent.stop();\n    this.agent = new Agent() {\n        @Override\n        public PluginInterface findPlugin(Instance instance) {\n            return new PluginMock() {\n                @Override\n                public void start(Instance instance) throws PluginException {\n                    throw new PluginException(""For tests..."");\n                }\n            };\n        }\n    };\n    this.agent.setMessagingType(MessagingConstants.FACTORY_TEST);\n    this.agent.start();\n    TestApplicationTemplate app = new TestApplicationTemplate();\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor();\n    processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm()));\n    Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance);\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus());\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED));\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n}', 'public void testStateAdvancedChange_startFails() throws InterruptedException {\n    this.agent.stop();\n    this.agent = new Agent() {\n        @Override\n        public PluginInterface findPlugin(Instance instance) {\n            return new PluginMock() {\n                @Override\n                public void start(Instance instance) throws PluginException {\n                    throw new PluginException(""For tests..."");\n                }\n            };\n        }\n    };\n    this.agent.setMessagingType(MessagingConstants.FACTORY_TEST);\n    this.agent.start();\n    TestApplicationTemplate app = new TestApplicationTemplate();\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor();\n    processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm()));\n    Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance);\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus());\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED));\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n}', 'public void testStateAdvancedChange_startFails() throws InterruptedException {\n    this.agent.stop();\n    this.agent = new Agent() {\n        @Override\n        public PluginInterface findPlugin(Instance instance) {\n            return new PluginMock() {\n                @Override\n                public void start(Instance instance) throws PluginException {\n                    throw new PluginException(""For tests..."");\n                }\n            };\n        }\n    };\n    this.agent.setMessagingType(MessagingConstants.FACTORY_TEST);\n    this.agent.start();\n    TestApplicationTemplate app = new TestApplicationTemplate();\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor();\n    processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm()));\n    Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance);\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus());\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED));\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n}', 'public void testStateAdvancedChange_startFails() throws InterruptedException {\n    this.agent.stop();\n    this.agent = new Agent() {\n        @Override\n        public PluginInterface findPlugin(Instance instance) {\n            return new PluginMock() {\n                @Override\n                public void start(Instance instance) throws PluginException {\n                    throw new PluginException(""For tests..."");\n                }\n            };\n        }\n    };\n    this.agent.setMessagingType(MessagingConstants.FACTORY_TEST);\n    this.agent.start();\n    TestApplicationTemplate app = new TestApplicationTemplate();\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor();\n    processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm()));\n    Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance);\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus());\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED));\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n}', 'public void testStateAdvancedChange_startFails() throws InterruptedException {\n    this.agent.stop();\n    this.agent = new Agent() {\n        @Override\n        public PluginInterface findPlugin(Instance instance) {\n            return new PluginMock() {\n                @Override\n                public void start(Instance instance) throws PluginException {\n                    throw new PluginException(""For tests..."");\n                }\n            };\n        }\n    };\n    this.agent.setMessagingType(MessagingConstants.FACTORY_TEST);\n    this.agent.start();\n    TestApplicationTemplate app = new TestApplicationTemplate();\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor();\n    processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm()));\n    Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance);\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus());\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED));\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n}', 'public void testStateAdvancedChange_startFails() throws InterruptedException {\n    this.agent.stop();\n    this.agent = new Agent() {\n        @Override\n        public PluginInterface findPlugin(Instance instance) {\n            return new PluginMock() {\n                @Override\n                public void start(Instance instance) throws PluginException {\n                    throw new PluginException(""For tests..."");\n                }\n            };\n        }\n    };\n    this.agent.setMessagingType(MessagingConstants.FACTORY_TEST);\n    this.agent.start();\n    TestApplicationTemplate app = new TestApplicationTemplate();\n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor();\n    processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm()));\n    Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance);\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus());\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED));\n    Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus());\n    processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED));\n    Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus());\n}']","['public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }', 'public void testStateAdvancedChange_startFails() { this.agent.stop(); this.agent = new Agent() { @Override public PluginInterface findPlugin(Instance instance) { return new PluginMock() { @Override public void start(Instance instance) throws PluginException { throw new PluginException(""For tests...""); } }; } }; this.agent.setMessagingType(MessagingConstants.FACTORY_TEST); this.agent.start(); TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.processMessage(new MsgCmdSetScopedInstance(app.getTomcatVm())); Assert.assertEquals(app.getTomcatVm(),processor.scopedInstance); Assert.assertEquals(InstanceStatus.DEPLOYED_STARTED,processor.scopedInstance.getStatus()); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.DEPLOYED_STOPPED)); Assert.assertEquals(InstanceStatus.DEPLOYED_STOPPED,app.getTomcat().getStatus()); processor.processMessage(new MsgCmdChangeInstanceState(app.getTomcat(),InstanceStatus.NOT_DEPLOYED)); Assert.assertEquals(InstanceStatus.NOT_DEPLOYED,app.getTomcat().getStatus()); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.5809564048148322,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySet); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySet); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySet); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySet); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySet); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySet); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySet); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySet); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySet); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']","['public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']","['public void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}', 'public void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}', 'public void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}', 'public void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}', 'public void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}', 'public void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}', 'public void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}', 'public void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}', 'public void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}']","['```java\npublic void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}\n```', '```java\npublic void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}\n```', '```java\npublic void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}\n```', '```java\npublic void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}\n```', '```java\npublic void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}\n```', '```java\npublic void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}\n```', '```java\npublic void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}\n```', '```java\npublic void testWithArrays() { \n    final byte[] encryptionKey = { 1 }; \n    final byte[] authenthicationKey = { 1 }; \n    final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); \n    final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); \n    assertNotNull(keySetDto); \n    assertNotNull(keySetDto.getAuthenticationKey()); \n    assertNotNull(keySetDto.getEncryptionKey()); \n    assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); \n    assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); \n    assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); \n    assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); \n}\n```']",False,True,True,False,False,False,False,False,0.5573260228443738,0.0,0.0,0.5635345428113973
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }']","['private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""used""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""not used""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""unused""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""obsolete""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""deprecated""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""unnecessary""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""unnecessary variable""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""remove""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""eliminate""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }']","['private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sketchClasses.add(sd); }']","['private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }', 'private void registerHll() { SketchDescriptor sd = new SketchDescriptor(""hll""); String p = ""asd""; sd.register(DATA_TO_SKETCH,org.apache.datasketches.hive.hll.DataToSketchUDAF.class); sd.register(SKETCH_TO_ESTIMATE_WITH_ERROR_BOUNDS,org.apache.datasketches.hive.hll.SketchToEstimateAndErrorBoundsUDF.class); sd.register(SKETCH_TO_ESTIMATE,org.apache.datasketches.hive.hll.SketchToEstimateUDF.class); sd.register(SKETCH_TO_STRING,org.apache.datasketches.hive.hll.SketchToStringUDF.class); sd.register(UNION_SKETCH1,org.apache.datasketches.hive.hll.UnionSketchUDF.class); sd.register(UNION_SKETCH,org.apache.datasketches.hive.hll.UnionSketchUDAF.class); sketchClasses.add(sd); }']",False,True,True,True,False,False,False,False,0.3829831320547669,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }']","['public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } };}', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } };}', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } };}', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } };}', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } };}', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } };}']","['public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel.isConnected()) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null && channel.isConnected()) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null && channel.isConnected()) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null && channel.isConnected()) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null && channel.isConnected()) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null) { disconnect(channel); } } } }; }']","['```java\npublic FSDataInputStream open(Path f,int bufferSize) throws IOException { \n    Path workDir; \n    ChannelSftp channel = connect(); \n    try { \n        workDir = new Path(channel.pwd()); \n    } catch (SftpException e) { \n        throw new IOException(e); \n    } \n    Path absolute = makeAbsolute(workDir,f); \n    FileStatus fileStat = getFileStatus(channel,absolute); \n    if (fileStat.isDirectory()) { \n        disconnect(channel); \n        throw new IOException(String.format(E_PATH_DIR,f)); \n    } \n    try { \n        absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); \n    } catch (SftpException e) { \n        throw new IOException(e); \n    } \n    return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { \n        @Override \n        public void close() throws IOException { \n            try { \n                super.close(); \n            } finally { \n                disconnect(channel); \n            } \n        } \n    }; \n}\n```', '```java\npublic FSDataInputStream open(Path f,int bufferSize) throws IOException { \n    Path workDir; \n    ChannelSftp channel = connect(); \n    try { \n        workDir = new Path(channel.pwd()); \n    } catch (SftpException e) { \n        throw new IOException(e); \n    } \n    Path absolute = makeAbsolute(workDir,f); \n    FileStatus fileStat = getFileStatus(channel,absolute); \n    if (fileStat.isDirectory()) { \n        disconnect(channel); \n        throw new IOException(String.format(E_PATH_DIR,f)); \n    } \n    try { \n        absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); \n    } catch (SftpException e) { \n        throw new IOException(e); \n    } \n    return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { \n        @Override \n        public void close() throws IOException { \n            try { \n                super.close(); \n            } finally { \n                disconnect(channel); \n            } \n        } \n    }; \n}\n```', '```java\npublic FSDataInputStream open(Path f,int bufferSize) throws IOException { \n    Path workDir; \n    ChannelSftp channel = connect(); \n    try { \n        workDir = new Path(channel.pwd()); \n    } catch (SftpException e) { \n        throw new IOException(e); \n    } \n    Path absolute = makeAbsolute(workDir,f); \n    FileStatus fileStat = getFileStatus(channel,absolute); \n    if (fileStat.isDirectory()) { \n        disconnect(channel); \n        throw new IOException(String.format(E_PATH_DIR,f)); \n    } \n    try { \n        absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); \n    } catch (SftpException e) { \n        throw new IOException(e); \n    } \n    return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { \n        @Override \n        public void close() throws IOException { \n            try { \n                super.close(); \n            } finally { \n                disconnect(channel); \n            } \n        } \n    }; \n}\n```', '```java\npublic FSDataInputStream open(Path f,int bufferSize) throws IOException { \n    Path workDir; \n    ChannelSftp channel = connect(); \n    try { \n        workDir = new Path(channel.pwd()); \n    } catch (SftpException e) { \n        throw new IOException(e); \n    } \n    Path absolute = makeAbsolute(workDir,f); \n    FileStatus fileStat = getFileStatus(channel,absolute); \n    if (fileStat.isDirectory()) { \n        disconnect(channel); \n        throw new IOException(String.format(E_PATH_DIR,f)); \n    } \n    try { \n        absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); \n    } catch (SftpException e) { \n        throw new IOException(e); \n    } \n    return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { \n        @Override \n        public void close() throws IOException { \n            try { \n                super.close(); \n            } finally { \n                disconnect(channel); \n            } \n        } \n    }; \n}\n```']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.4625392179098313
"['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImplImmutableMap()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.5452302040688521,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }']","['private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: <START>throw new IllegalStateException(""Method not supported: "" + method);<END> } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: <START>throw new IllegalStateException(""Method not supported: "" + method);<END> } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: <START>throw new IllegalStateException(""Method not supported: "" + method);<END> } return proxiedResponse; }']","['private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new RuntimeException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalArgumentException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new UnsupportedOperationException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalArgumentException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new UnsupportedOperationException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalArgumentException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new UnsupportedOperationException(""Method not supported: "" + method); } return proxiedResponse; }']","['private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Unsupported method: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Invalid method: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method is not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Unsupported HTTP method: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Invalid HTTP method: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not allowed: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not recognized: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Unsupported request method: "" + method); } return proxiedResponse; }']",True,False,True,True,False,False,False,False,0.0,0.7221272796995487,0.0,0.0
"['public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies()).hasSize(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).as(""Dependencies size should be 4"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).as(""Number of dependencies should be 4"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).describedAs(""Number of dependencies should be 4"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).overridingErrorMessage(""Expected 4 dependencies"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).withFailMessage(""Number of dependencies should be 4"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).overridingErrorMessage(""Expected size of dependencies is 4"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).withFailMessage(""Number of dependencies should be 4"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).as(""Number of dependencies should be 4"").isEqualTo(4); \n    }); \n}']","['public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies()).hasSize(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies()).hasSize(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies()).hasSize(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies()).hasSize(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}']","['public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}']","['public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies()).hasSize(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).as(""Number of dependencies"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).as(""Number of dependencies"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).as(""Number of dependencies"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).as(""Number of dependencies"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).as(""Number of dependencies"").isEqualTo(4); \n    }); \n}', 'public void compileTest() { \n    ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); \n    CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); \n    CompilationResponse res = decorator.compile(req); \n    SoftAssertions.assertSoftly(softly -> { \n        softly.assertThat(res.isSuccessful()).isTrue(); \n        softly.assertThat(res.getDependencies().size()).as(""Number of dependencies"").isEqualTo(4); \n    }); \n}']",True,True,False,True,False,False,False,False,0.0,0.0,0.5081728439699982,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }']","['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }']","['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }']","['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { List<String> columnNames = new ArrayList<>(); BrokerResponseNative brokerResponse = new BrokerResponseNative(); List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); List<Object> row = new ArrayList<>(); for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { computeResultsForExpression(e,columnNames,columnTypes,row); } DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); List<Object[]> rows = new ArrayList<>(); rows.add(row.toArray()); ResultTable resultTable = new ResultTable(dataSchema,rows); brokerResponse.setResultTable(resultTable); long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); brokerResponse.setTimeUsedMs(totalTimeMs); requestStatistics.setQueryProcessingTime(totalTimeMs); requestStatistics.setStatistics(brokerResponse); return brokerResponse; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }']","['public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }']","['public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); // class is named EchoApi ECHOApi. This code compile System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(ECHOApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }']","['public static void main(String[] args) { \n    final String secret = ""your secret""; \n    final String key = ""your key""; \n    Token token = new Token("""",""""); \n    OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); \n    System.out.println(""Now we\'re going to access a protected resource...""); \n    OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); \n    request.addBodyParameter(""content"",""your valid activity streams xml""); \n    service.signRequest(token,request); \n    Response response = request.send(); \n    System.out.println(); \n    System.out.println(response.getCode()); \n    System.out.println(response.getBody()); \n    System.out.println(); \n    System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); \n}', 'public static void main(String[] args) { \n    final String secret = ""your secret""; \n    final String key = ""your key""; \n    Token token = new Token("""",""""); \n    OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); \n    System.out.println(""Now we\'re going to access a protected resource...""); \n    OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); \n    request.addBodyParameter(""content"",""your valid activity streams xml""); \n    service.signRequest(token,request); \n    Response response = request.send(); \n    System.out.println(); \n    System.out.println(response.getCode()); \n    System.out.println(response.getBody()); \n    System.out.println(); \n    System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); \n}', 'public static void main(String[] args) { \n    final String secret = ""your secret""; \n    final String key = ""your key""; \n    Token token = new Token("""",""""); \n    OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); \n    System.out.println(""Now we\'re going to access a protected resource...""); \n    OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); \n    request.addBodyParameter(""content"",""your valid activity streams xml""); \n    service.signRequest(token,request); \n    Response response = request.send(); \n    System.out.println(); \n    System.out.println(response.getCode()); \n    System.out.println(response.getBody()); \n    System.out.println(); \n    System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }']","['public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }']","['public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }']","['public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }']",True,True,False,True,False,False,False,False,0.0,0.0,0.5579416298935576,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode == ColorMode.CT) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT == colorMode) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT == colorMode) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }']","['public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode == ColorMode.CT) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }']","['public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { // is null check required turn equals call PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }', 'public void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (colorMode != null && ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }']","['```java\npublic void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }\n```', '```java\npublic void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }\n```', '```java\npublic void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }\n```', '```java\npublic void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }\n```', '```java\npublic void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }\n```', '```java\npublic void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }\n```', '```java\npublic void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }\n```', '```java\npublic void onLightStateChanged(@Nullable HueBridge bridge,FullLight fullLight) { logger.trace(""onLightStateChanged() was called""); if (!fullLight.getId().equals(lightId)) { logger.trace(""Received state change for another handler\'s light ({}). Will be ignored."",fullLight.getId()); return; } initializeProperties(); lastSentBrightness = null; lastSentColorTemp = null; if (fullLight.getState().isReachable()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE,ThingStatusDetail.NONE,""@text/offline.light-not-reachable""); } HSBType hsbType = LightStateConverter.toHSBType(fullLight.getState()); if (!fullLight.getState().isOn()) { hsbType = new HSBType(hsbType.getHue(),hsbType.getSaturation(),new PercentType(0)); } updateState(CHANNEL_COLOR,hsbType); ColorMode colorMode = fullLight.getState().getColorMode(); if (ColorMode.CT.equals(colorMode)) { PercentType colorTempPercentType = LightStateConverter.toColorTemperaturePercentType(fullLight.getState()); updateState(CHANNEL_COLORTEMPERATURE,colorTempPercentType); } else { updateState(CHANNEL_COLORTEMPERATURE,UnDefType.NULL); } PercentType brightnessPercentType = LightStateConverter.toBrightnessPercentType(fullLight.getState()); if (!fullLight.getState().isOn()) { brightnessPercentType = new PercentType(0); } updateState(CHANNEL_BRIGHTNESS,brightnessPercentType); if (fullLight.getState().isOn()) { updateState(CHANNEL_SWITCH,OnOffType.ON); } else { updateState(CHANNEL_SWITCH,OnOffType.OFF); } StringType stringType = LightStateConverter.toAlertStringType(fullLight.getState()); if (!stringType.toString().equals(""NULL"")) { updateState(CHANNEL_ALERT,stringType); scheduleAlertStateRestore(stringType); } }\n```']",True,True,False,False,False,False,False,False,0.0,0.0,0.37880678677072305,0.41059279062698945
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } jobProperties.put(""targetsd"",getStorageDomainName()); } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } jobProperties.put(""targetsd"",getStorageDomainName()); } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } jobProperties.put(""targetsd"",getStorageDomainName()); } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } jobProperties.put(""targetsd"",getStorageDomainName()); } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } jobProperties.put(""targetsd"",getStorageDomainName()); } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } jobProperties.put(""targetsd"",getStorageDomainName()); } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } jobProperties.put(""targetsd"",getStorageDomainName()); } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } jobProperties.put(""targetsd"",getStorageDomainName()); } return jobProperties; }']","['public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    if (ImageOperation.Move == getParameters().getOperation()) { \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n    } \n    return jobProperties; \n}', 'public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    if (ImageOperation.Move == getParameters().getOperation()) { \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n    } \n    return jobProperties; \n}']","['public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    return jobProperties; \n}', 'public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    return jobProperties; \n}', 'public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    return jobProperties; \n}', 'public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    return jobProperties; \n}', 'public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    return jobProperties; \n}', 'public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    return jobProperties; \n}', 'public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    return jobProperties; \n}', 'public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    return jobProperties; \n}', 'public Map<String,String> getJobMessageProperties() { \n    String sourceSDName = StringUtils.EMPTY; \n    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); \n    if (storageDomains.size() > 0) { \n        sourceSDName = storageDomains.get(0).getstorage_name(); \n    } \n    if (jobProperties == null) { \n        jobProperties = super.getJobMessageProperties(); \n        jobProperties.put(""sourcesd"",sourceSDName); \n        jobProperties.put(""targetsd"",getStorageDomainName()); \n        if (ImageOperation.Move.equals(getParameters().getOperation())) { \n            jobProperties.put(""action"",""Moving""); \n        } else { \n            jobProperties.put(""action"",""Copying""); \n        } \n    } \n    return jobProperties; \n}']","['public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation()) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }']",False,False,False,True,False,False,False,False,0.5305626874809284,0.5305626874809284,0.5083257478587965,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }']","['public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new LinkedList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new CopyOnWriteArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new Vector<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new Stack<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new LinkedBlockingQueue<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ConcurrentLinkedQueue<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new PriorityBlockingQueue<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayBlockingQueue<>(10); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }']","['public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }']","['public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { \n    SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); \n    if (snapshotStore == null) { \n        return new ArrayList<>(); \n    } \n    DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); \n    List<SnapshotInfo> infos = new ArrayList<>(); \n    List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); \n    for (SnapshotVO snapshot : volSnapShots) { \n        SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); \n        infos.add(info); \n    } \n    return infos; \n}', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { \n    SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); \n    if (snapshotStore == null) { \n        return Collections.emptyList(); \n    } \n    DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); \n    List<SnapshotInfo> infos = new ArrayList<>(); \n    List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); \n    for (SnapshotVO snapshot : volSnapShots) { \n        SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); \n        infos.add(info); \n    } \n    return infos; \n}', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { \n    SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); \n    if (snapshotStore == null) { \n        return new ArrayList<SnapshotInfo>(); \n    } \n    DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); \n    List<SnapshotInfo> infos = new ArrayList<>(); \n    List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); \n    for (SnapshotVO snapshot : volSnapShots) { \n        SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); \n        infos.add(info); \n    } \n    return infos; \n}', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { \n    SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); \n    if (snapshotStore == null) { \n        return new ArrayList<SnapshotInfo>(); \n    } \n    DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); \n    List<SnapshotInfo> infos = new ArrayList<>(); \n    List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); \n    for (SnapshotVO snapshot : volSnapShots) { \n        SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); \n        infos.add(info); \n    } \n    return infos; \n}', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { \n    SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); \n    if (snapshotStore == null) { \n        return new ArrayList<SnapshotInfo>(); \n    } \n    DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); \n    List<SnapshotInfo> infos = new ArrayList<>(); \n    List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); \n    for (SnapshotVO snapshot : volSnapShots) { \n        SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); \n        infos.add(info); \n    } \n    return infos; \n}', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { \n    SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); \n    if (snapshotStore == null) { \n        return new ArrayList<SnapshotInfo>(); \n    } \n    DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); \n    List<SnapshotInfo> infos = new ArrayList<>(); \n    List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); \n    for (SnapshotVO snapshot : volSnapShots) { \n        SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); \n        infos.add(info); \n    } \n    return infos; \n}', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { \n    SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); \n    if (snapshotStore == null) { \n        return new ArrayList<SnapshotInfo>(); \n    } \n    DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); \n    List<SnapshotInfo> infos = new ArrayList<>(); \n    List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); \n    for (SnapshotVO snapshot : volSnapShots) { \n        SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); \n        infos.add(info); \n    } \n    return infos; \n}', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { \n    SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); \n    if (snapshotStore == null) { \n        return new ArrayList<SnapshotInfo>(); \n    } \n    DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); \n    List<SnapshotInfo> infos = new ArrayList<>(); \n    List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); \n    for (SnapshotVO snapshot : volSnapShots) { \n        SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); \n        infos.add(info); \n    } \n    return infos; \n}', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { \n    SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); \n    if (snapshotStore == null) { \n        return new ArrayList<SnapshotInfo>(); \n    } \n    DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); \n    List<SnapshotInfo> infos = new ArrayList<>(); \n    List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); \n    for (SnapshotVO snapshot : volSnapShots) { \n        SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); \n        infos.add(info); \n    } \n    return infos; \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }']","['public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }']","['public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }']","['```java\npublic boolean parseOptions(final PrintStream messageStream, final String[] args) {\n    this.messageStream = messageStream;\n    this.argv = args;\n    if (prefix.isEmpty()) {\n        commandLine = callerOptions.getClass().getName();\n    }\n    for (int i = 0; i < args.length; ++i) {\n        final String arg = args[i];\n        if (arg.equals(""-h"") || arg.equals(""--help"")) {\n            usage(messageStream, false);\n            return false;\n        }\n        if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) {\n            usage(messageStream, true);\n            return false;\n        }\n        if (arg.equals(""--version"")) {\n            messageStream.println(getVersion());\n            return false;\n        }\n        final String[] pair = arg.split(""="", 2);\n        if (pair.length == 2) {\n            if (pair[1].isEmpty() && i < args.length - 1) {\n                pair[1] = args[++i];\n            }\n            if (!parseOption(pair[0], pair[1], false)) {\n                messageStream.println();\n                usage(messageStream, true);\n                return false;\n            }\n        } else if (!parsePositionalArgument(arg)) {\n            messageStream.println();\n            usage(messageStream, false);\n            return false;\n        }\n    }\n    if (!checkNumArguments()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    if (!parseChildOptions()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    return true;\n}\n```', '```java\npublic boolean parseOptions(final PrintStream messageStream, final String[] args) {\n    this.messageStream = messageStream;\n    this.argv = args;\n    if (prefix.isEmpty()) {\n        commandLine = callerOptions.getClass().getName();\n    }\n    for (int i = 0; i < args.length; ++i) {\n        final String arg = args[i];\n        if (arg.equals(""-h"") || arg.equals(""--help"")) {\n            usage(messageStream, false);\n            return false;\n        }\n        if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) {\n            usage(messageStream, true);\n            return false;\n        }\n        if (arg.equals(""--version"")) {\n            messageStream.println(getVersion());\n            return false;\n        }\n        final String[] pair = arg.split(""="", 2);\n        if (pair.length == 2) {\n            if (pair[1].isEmpty() && i < args.length - 1) {\n                pair[1] = args[++i];\n            }\n            if (!parseOption(pair[0], pair[1], false)) {\n                messageStream.println();\n                usage(messageStream, true);\n                return false;\n            }\n        } else if (!parsePositionalArgument(arg)) {\n            messageStream.println();\n            usage(messageStream, false);\n            return false;\n        }\n    }\n    if (!checkNumArguments()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    if (!parseChildOptions()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    return true;\n}\n```', '```java\npublic boolean parseOptions(final PrintStream messageStream, final String[] args) {\n    this.messageStream = messageStream;\n    this.argv = args;\n    if (prefix.isEmpty()) {\n        commandLine = callerOptions.getClass().getName();\n    }\n    for (int i = 0; i < args.length; ++i) {\n        final String arg = args[i];\n        if (arg.equals(""-h"") || arg.equals(""--help"")) {\n            usage(messageStream, false);\n            return false;\n        }\n        if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) {\n            usage(messageStream, true);\n            return false;\n        }\n        if (arg.equals(""--version"")) {\n            messageStream.println(getVersion());\n            return false;\n        }\n        final String[] pair = arg.split(""="", 2);\n        if (pair.length == 2) {\n            if (pair[1].isEmpty() && i < args.length - 1) {\n                pair[1] = args[++i];\n            }\n            if (!parseOption(pair[0], pair[1], false)) {\n                messageStream.println();\n                usage(messageStream, true);\n                return false;\n            }\n        } else if (!parsePositionalArgument(arg)) {\n            messageStream.println();\n            usage(messageStream, false);\n            return false;\n        }\n    }\n    if (!checkNumArguments()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    if (!parseChildOptions()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    return true;\n}\n```', '```java\npublic boolean parseOptions(final PrintStream messageStream, final String[] args) {\n    this.messageStream = messageStream;\n    this.argv = args;\n    if (prefix.isEmpty()) {\n        commandLine = callerOptions.getClass().getName();\n    }\n    for (int i = 0; i < args.length; ++i) {\n        final String arg = args[i];\n        if (arg.equals(""-h"") || arg.equals(""--help"")) {\n            usage(messageStream, false);\n            return false;\n        }\n        if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) {\n            usage(messageStream, true);\n            return false;\n        }\n        if (arg.equals(""--version"")) {\n            messageStream.println(getVersion());\n            return false;\n        }\n        final String[] pair = arg.split(""="", 2);\n        if (pair.length == 2) {\n            if (pair[1].isEmpty() && i < args.length - 1) {\n                pair[1] = args[++i];\n            }\n            if (!parseOption(pair[0], pair[1], false)) {\n                messageStream.println();\n                usage(messageStream, true);\n                return false;\n            }\n        } else if (!parsePositionalArgument(arg)) {\n            messageStream.println();\n            usage(messageStream, false);\n            return false;\n        }\n    }\n    if (!checkNumArguments()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    if (!parseChildOptions()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    return true;\n}\n```', '```java\npublic boolean parseOptions(final PrintStream messageStream, final String[] args) {\n    this.messageStream = messageStream;\n    this.argv = args;\n    if (prefix.isEmpty()) {\n        commandLine = callerOptions.getClass().getName();\n    }\n    for (int i = 0; i < args.length; ++i) {\n        final String arg = args[i];\n        if (arg.equals(""-h"") || arg.equals(""--help"")) {\n            usage(messageStream, false);\n            return false;\n        }\n        if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) {\n            usage(messageStream, true);\n            return false;\n        }\n        if (arg.equals(""--version"")) {\n            messageStream.println(getVersion());\n            return false;\n        }\n        final String[] pair = arg.split(""="", 2);\n        if (pair.length == 2) {\n            if (pair[1].isEmpty() && i < args.length - 1) {\n                pair[1] = args[++i];\n            }\n            if (!parseOption(pair[0], pair[1], false)) {\n                messageStream.println();\n                usage(messageStream, true);\n                return false;\n            }\n        } else if (!parsePositionalArgument(arg)) {\n            messageStream.println();\n            usage(messageStream, false);\n            return false;\n        }\n    }\n    if (!checkNumArguments()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    if (!parseChildOptions()) {\n        messageStream.println();\n        usage(messageStream, false);\n        return false;\n    }\n    return true;\n}\n```']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.9639490566092225
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }']","['public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId); \n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId); \n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId); \n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId); \n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId); \n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId); \n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId); \n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId); \n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId); \n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}']","['public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}']","['public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}', 'public void testEquals() { \n    String type = ""someType""; \n    String value = ""someValue""; \n    float confidenceLevel = 0.9f; \n    TypedId typedId = new TypedId(value,type,confidenceLevel); \n    assertNotNull(typedId);\n    assertNotEquals(""string"",typedId); \n    assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); \n    assertNotEquals(typedId,new TypedId(value,type,0.8f)); \n    assertEquals(typedId,new TypedId(value,type,confidenceLevel)); \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
