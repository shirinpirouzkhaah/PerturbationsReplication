Llama3.3_70B_NullAssertCF_response,Llama3.3_70B_NullAssertCF_mitigation_response,Llama3.3_70B_NullAssertCF_inline_response,Llama3.3_70B_NullAssertCF_CoT_response,Llama3.3_70B_NullAssertCF_EXM,Llama3.3_70B_NullAssertCF_mitigation_EXM,Llama3.3_70B_NullAssertCF_inline_EXM,Llama3.3_70B_NullAssertCF_CoT_EXM,Llama3.3_70B_NullAssertCF_retrieval,Llama3.3_70B_NullAssertCF_mitigation_retrieval,Llama3.3_70B_NullAssertCF_inline_retrieval,Llama3.3_70B_NullAssertCF_CoT_retrieval,Llama3.3_70B_NullAssertCF_bleu,Llama3.3_70B_NullAssertCF_mitigation_bleu,Llama3.3_70B_NullAssertCF_inline_bleu,Llama3.3_70B_NullAssertCF_CoT_bleu
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }']","['public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"", result); } }']","['public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}', 'public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}', 'public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}', 'public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}', 'public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}', 'public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}', 'public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}', 'public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}', 'public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}', 'public void JERSEY_2643() { \n    String result = target(""JERSEY-2643"").request().get(String.class); \n    if (""test ok"" != result) { \n        assertEquals(""test ok"",result); \n    } \n}']","['public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }', 'public void JERSEY_2643() { String result = target(""JERSEY-2643"").request().get(String.class); if (""test ok"" != result) { assertEquals(""test ok"",result); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }']","['public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(5)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(15)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(20)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(8)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(3)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(22)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(12)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(7)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(9)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }']","['public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != null && range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != null && range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != null && range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != null && range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }']","['public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); } }', 'public void freshTimestampsDelegatesToTimestampService() { int numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L,30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); if (range != timelock.getFreshTimestamps(numTimestamps)) { assertEquals(range,timelock.getFreshTimestamps(numTimestamps)); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } throws IOException { } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } }']","['public void testSerde() throws IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonMappingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws IOException, JsonParseException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws IOException, JsonMappingException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws IOException, JsonProcessingException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws IOException, JsonParseException, JsonMappingException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws IOException, JsonParseException, JsonProcessingException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }']","['public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null && est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null && est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null && est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null && est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null && est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null && est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null && est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null && est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null && est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } }']","['public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } throws new IOException(); }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } } else { throw new IOException(); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } throw new IOException(); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } throw new IOException(""Exception in testSerde method""); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } else { throw new IOException(); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } throw new IOException(""Exception in serialization or deserialization""); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } else { throw new IOException(""Exception in testSerde method""); } } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } throw new IOException(""Exception in serialization""); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } throw new IOException(""Exception in deserialization""); } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { ObjectMapper mapper = new DefaultObjectMapper(); SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); if (est != null) { if (est != mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)) { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } else { throw new IOException(""Exception in serialization or deserialization of SketchEstimateWithErrorBounds object""); } } }']",False,True,False,False,False,False,False,False,0.3675667565747676,0.0,0.3684981984538114,0.3684981984538114
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).stream().count()) { assertEquals(numberExpected,client.listSettings(filter).stream().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(10).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(10).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(5).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(5).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(20).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(20).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(3).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(3).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(50).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(50).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(0).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(0).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(1).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(1).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(100).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(100).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(25).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(25).count()); } }']","['public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected,client.listSettings(filter).stream().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected,client.listSettings(filter).stream().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected, (int) client.listSettings(filter).stream().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected, (int) client.listSettings(filter).streamByPage().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected,client.listSettings(filter).stream().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected, (int) client.listSettings(filter).stream().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected, (int) client.listSettings(filter).streamByPage().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected,client.listSettings(filter).stream().count()); } }']","['public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) {assertEquals(numberExpected,client.listSettings(filter).streamByPage().count());} }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).stream().count()) {assertEquals(numberExpected,client.listSettings(filter).stream().count());} }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) {assertEquals(numberExpected,client.listSettings(filter).streamByPage().count());} }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) {assertEquals(numberExpected,client.listSettings(filter).streamByPage().count());} }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) {assertEquals(numberExpected,client.listSettings(filter).streamByPage().count());} }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) {assertEquals(numberExpected,client.listSettings(filter).streamByPage().count());} }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) {assertEquals(numberExpected,client.listSettings(filter).streamByPage().count());} }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) {assertEquals(numberExpected,client.listSettings(filter).streamByPage().count());} }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) {assertEquals(numberExpected,client.listSettings(filter).streamByPage().count());} }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) {assertEquals(numberExpected,client.listSettings(filter).streamByPage().count());} }']","['public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).stream().count()) { assertEquals(numberExpected,client.listSettings(filter).stream().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(10).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(10).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(5).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(5).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage().count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage().count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(2).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(2).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(50).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(50).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(3).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(3).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(20).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(20).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).streamByPage(10, 5).count()) { assertEquals(numberExpected,client.listSettings(filter).streamByPage(10, 5).count()); } }', 'public void listSettingsWithPagination() { final int numberExpected = 50; for (int value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); if (numberExpected != client.listSettings(filter).stream().count()) { assertEquals(numberExpected, client.listSettings(filter).stream().count()); } }']",True,False,True,True,False,False,False,False,0.0,0.9198098208399205,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assert false; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assert true; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) {  } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) {  assert false; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) {  assert true; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) {  } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }']","['public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assert true; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) {  } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) {  // assert is not needed } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { // useless assert is removed } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }']","['public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertNotEquals(null,eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertNotEquals(null,eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertTrue(eObjectServices.eGet(null,null) != null); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertTrue(eObjectServices.eGet(null,null) != null); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assert eObjectServices.eGet(null,null) != null; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assert eObjectServices.eGet(null,null) != null; } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertNotNull(eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertNotNull(eObjectServices.eGet(null,null)); } }', 'public void testEGetNullEObjectNullFeature() { if (null != eObjectServices.eGet(null,null)) { assertNotNull(eObjectServices.eGet(null,null)); } }']",[],False,False,False,False,False,False,False,False,0.12121093525642128,0.12121093525642128,0.12121093525642128,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQLUtil.sanitizeCondition(s); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitized); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQL.sanitizeCondition(s); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitized); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQLUtil.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitized); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQL.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitized); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); final String sanitized = SQLUtil.sanitizeParameter(s); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitized); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); final String sanitized = SQLUtil.sanitizeParameter(s); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitized); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); final String sanitized = SQLUtil.sanitizeParameter(s); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitized); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); final String sanitized = SQL.sanitizeCondition(s); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitized); } }']","['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(query)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(query)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s) + StringPool.BLANK); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s) + StringPool.BLANK); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, StringPool.BLANK + SQLUtil.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, StringPool.BLANK + SQL.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(StringPool.BLANK + s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(StringPool.BLANK + s)); } }']","['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); } }']","['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, s); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitizedCondition = SQL.sanitizeCondition(s); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitizedCondition); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitizedCondition = SQL.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, sanitizedCondition); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitizedCondition = SQL.sanitizeCondition(s); assertNotNull(s); if (StringPool.BLANK !=  sanitizedCondition) { assertEquals(StringPool.BLANK, sanitizedCondition); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitizedCondition = SQL.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  sanitizedCondition) { assertEquals(StringPool.BLANK, sanitizedCondition); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitizedCondition = SQL.sanitizeCondition(s); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitizedCondition = SQL.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(query)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitizedCondition = SQL.sanitizeCondition(s); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); } }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitizedCondition = SQL.sanitizeCondition(query); assertNotNull(s); if (StringPool.BLANK !=  s) { assertEquals(StringPool.BLANK, SQL.sanitizeCondition(query)); } }']",True,False,False,False,False,False,False,False,0.0,0.7670387248467656,0.7670387248467656,0.8153551038173115
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (!dependentFields.get(0).equals(""field"")) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (!""field"".equalsdependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null && !""field"".equalsdependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null && dependentFields.get(0) != ""field"") { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (!dependentFields.get(0).equals(""field"")) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (!dependentFields.get(0).equals(""field"")) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null && dependentFields.get(0).equals(""field"") != true) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (!""field"".equalsdependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (dependentFields.get(0).equals(""field"") != true) { assertEquals(""field"",dependentFields.get(0)); } } } }']","['public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() < 1) { dependentFields = null; } if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() < 1) { dependentFields = null; } if (dependentFields != null) { if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() < 1) { dependentFields = null; } if (dependentFields != null) { if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() < 1) { dependentFields = null; } if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() < 1) { dependentFields = null; } if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() < 1) { dependentFields = null; } if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (dependentFields.get(0) != null) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } } } }']","['public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (!dependentFields.get(0).equals(""field"")) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (!""field"".equalsdependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null && !""field"".equalsdependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null && dependentFields.get(0) != ""field"") { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (!""field"".equalsdependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (!dependentFields.get(0).equals(""field"")) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (!""field"".equalsdependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null && !""field"".equalsdependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (dependentFields.get(0) != ""field"") { assertEquals(""field"",dependentFields.get(0)); } } } }']","['public void testGetDependentFields() { List<String> dependentFields = fac.getDependentFields(); if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.size() > 0) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() > 0) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() > 0) { if (1 != dependentFields.size()) { assertEquals(1,dependentFields.size()); } if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() > 0) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() > 0) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() > 0) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() > 0) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } } }', 'public void testGetDependentFields() throws Exception { List<String> dependentFields = fac.getDependentFields(); if (dependentFields != null) { if (dependentFields.size() > 0) { if (dependentFields.size() != 1) { assertEquals(1,dependentFields.size()); } if (dependentFields.get(0) != null) { if (""field"" != dependentFields.get(0)) { assertEquals(""field"",dependentFields.get(0)); } } } } }']",False,False,False,True,False,False,False,False,0.07139921386902234,0.3448444257953326,0.07139921386902234,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(info.comment,""this is a comment""); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(info.email,""max@example.com""); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(info.comment,""this is a comment""); } if (info.email != ""max@example.com"") { assertEquals(info.email,""max@example.com""); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }']","['public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(info.comment,""this is a comment""); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(info.email,""max@example.com""); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(info.comment,""this is a comment""); } if (info.email != ""max@example.com"") { assertEquals(info.email,""max@example.com""); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(info.email,""max@example.com""); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(info.comment,""this is a comment""); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(info.comment,""this is a comment""); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }']","['public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != ""Max Mustermann"") { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != ""this is a comment"") { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != ""max@example.com"") { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != ""Max Mustermann"") { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != null) { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != ""max@example.com"") { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != null) { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != ""this is a comment"") { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != ""max@example.com"") { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != ""Max Mustermann"") { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != null) { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != null) { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != null) { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != null) { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != null) { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != ""Max Mustermann"") { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != null) { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != null) { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != null) { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != ""this is a comment"") { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != null) { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != ""Max Mustermann"") { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != ""this is a comment"") { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != null) { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != null) { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != null) { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != ""max@example.com"") { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != ""Max Mustermann"") { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != null) { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != ""max@example.com"") { \n        assertEquals(""max@example.com"", info.email); \n    } \n}', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { \n    OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); \n    if (info.name != null) { \n        assertEquals(""Max Mustermann"", info.name); \n    } \n    if (info.comment != ""this is a comment"") { \n        assertEquals(""this is a comment"", info.comment); \n    } \n    if (info.email != ""max@example.com"") { \n        assertEquals(""max@example.com"", info.email); \n    } \n}']","['public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != null) { if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } } if (info.email != null) { if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != null) { if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != null) { if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } } if (info.email != null) { if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != null) { if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } } if (info.comment != null) { if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } } if (info.email != null) { if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != null) { if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != null) { if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != null) { if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } if (info.email != null) { if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != null) { if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } } if (info.comment != null) { if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } } if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } }', 'public void splitCompleteUserIdShouldReturnAll3Components() throws Exception { OpenPgpUtils.UserInfo info = OpenPgpUtils.splitUserId(""Max Mustermann (this is a comment) <max@example.com>""); if (info.name != ""Max Mustermann"") { assertEquals(""Max Mustermann"", info.name); } if (info.comment != null) { if (info.comment != ""this is a comment"") { assertEquals(""this is a comment"", info.comment); } } if (info.email != null) { if (info.email != ""max@example.com"") { assertEquals(""max@example.com"", info.email); } } }']",False,False,False,False,False,False,False,False,0.4188216850419828,0.4188216850419828,0.41945065445814794,0.4188216850419828
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1 || array.size() > 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() > 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 > array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() > 1 || array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }']","['private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }']","['private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (1 != array.size()) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() != 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() < 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() < 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() != 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() != 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() < 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() < 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() != 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() < 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    if (array.size() != 1) { \n        Assert.assertEquals(1,array.size()); \n    } \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}']","['private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (1 != array.size()) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() < 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); if (array.size() != 1) { Assert.assertEquals(1,array.size()); } JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }']","['public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }']","['public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); } }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); }', 'public void testAdd() { MockEnabledModelResolver resolver = new MockEnabledModelResolver(); ModelResolverDescriptor oldValue = manager.add(resolver,resolver.getClass().getName(),"""",""""); if (manager.getAllResolver().iterator().next().getModelResolver() != resolver) { assertSame(manager.getAllResolver().iterator().next().getModelResolver(),resolver); } if (oldValue != null) { assertNull(oldValue); }']",[],False,False,False,False,False,False,False,False,0.5555224188329068,0.5555224188329068,0.5555224188329068,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }']","['public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }']","['public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }']","['public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<String>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<String>(new And<String>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<String>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }', 'public void extractSingle() { if (foo != new Or<>(new And<>(foo,bar),foo).simplify()) { assertEquals(foo,new Or<>(new And<>(foo,bar),foo).simplify()); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != null && bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null && bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null && bitreserveClient.getToken().getBearerToken() != null && bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null && bitreserveClient.getToken().getBearerToken() != null && !bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null && !bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null && bitreserveClient.getToken().getBearerToken() != null && !bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null && bitreserveClient.getToken().getBearerToken() != null && bitreserveClient.getToken().getBearerToken().equals(""foobar"") != true) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null && bitreserveClient.getToken().getBearerToken() != null && !bitreserveClient.getToken().getBearerToken().equals(""foobar"")) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null && bitreserveClient.getToken().getBearerToken() != null && bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }']","['public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }']","['public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(), ""foobar""); } }']","['public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken().getBearerToken() != null) { if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null) { if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null) { if (bitreserveClient.getToken().getBearerToken() != null) { if (bitreserveClient.getToken().getBearerToken() != ""foobar"") { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } } } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null) { if (bitreserveClient.getToken().getBearerToken() != null) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null) { if (bitreserveClient.getToken().getBearerToken() != null) { if (bitreserveClient.getToken().getBearerToken().equals(""foobar"") != true) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } } } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null) { if (bitreserveClient.getToken().getBearerToken() != null) { if (bitreserveClient.getToken().getBearerToken().equals(""foobar"") != true) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } } } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null) { if (bitreserveClient.getToken().getBearerToken() != null) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } } }', 'public void getTokenShouldReturnToken() { BitreserveClient bitreserveClient = new BitreserveClient(""foobar""); if (bitreserveClient.getToken() != null) { if (bitreserveClient.getToken().getBearerToken() != null) { if (bitreserveClient.getToken().getBearerToken().equals(""foobar"") != true) { Assert.assertEquals(bitreserveClient.getToken().getBearerToken(),""foobar""); } } } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.6606328636027614,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupsByPatient1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupsByPatient1.size()) { assertEquals(1,orderGroupsByPatient1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupsPatient1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupsPatient1.size()) { assertEquals(1,orderGroupsPatient1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupPatient1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupPatient1.size()) { assertEquals(1,orderGroupPatient1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups1Patient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups1Patient.size()) { assertEquals(1,orderGroups1Patient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroup1Patient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroup1Patient.size()) { assertEquals(1,orderGroup1Patient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupsPatient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupsPatient.size()) { assertEquals(1,orderGroupsPatient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroup1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroup1.size()) { assertEquals(1,orderGroup1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups1ByPatient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups1ByPatient.size()) { assertEquals(1,orderGroups1ByPatient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupPatient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupPatient.size()) { assertEquals(1,orderGroupPatient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupsBy1Patient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupsBy1Patient.size()) { assertEquals(1,orderGroupsBy1Patient.size()); } }']","['public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups.size()) { assertEquals(1,orderGroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupList = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupList.size()) { assertEquals(1,orderGroupList.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupsByPatient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupsByPatient.size()) { assertEquals(1,orderGroupsByPatient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupsForPatient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupsForPatient.size()) { assertEquals(1,orderGroupsForPatient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupPatient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupPatient.size()) { assertEquals(1,orderGroupPatient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupsPatient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupsPatient.size()) { assertEquals(1,orderGroupsPatient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupListForPatient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupListForPatient.size()) { assertEquals(1,orderGroupListForPatient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupsList = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupsList.size()) { assertEquals(1,orderGroupsList.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupForPatient = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupForPatient.size()) { assertEquals(1,orderGroupForPatient.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups.size()) { assertEquals(1,orderGroups.size()); } }']","['public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> ordergroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != ordergroups.size()) { assertEquals(1,ordergroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroup = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroup.size()) { assertEquals(1,orderGroup.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups.size()) { assertEquals(1,orderGroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> order = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != order.size()) { assertEquals(1,order.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroup1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroup1.size()) { assertEquals(1,orderGroup1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroups1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroups1.size()) { assertEquals(1,orderGroups1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> order1 = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != order1.size()) { assertEquals(1,order1.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> existingOrderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != existingOrderGroups.size()) { assertEquals(1,existingOrderGroups.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> orderGroupList = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != orderGroupList.size()) { assertEquals(1,orderGroupList.size()); } }', 'public void getOrderGroupsByPatient_shouldGetOrderGroupsGivenPatient() { Patient existingPatient1 = Context.getPatientService().getPatient(8); List<OrderGroup> patientOrderGroups = Context.getOrderService().getOrderGroupsByPatient(existingPatient1); if (1 != patientOrderGroups.size()) { assertEquals(1,patientOrderGroups.size()); } }']",[],False,True,True,False,False,False,False,False,0.14499391105057444,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } finally { rw.release(); } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } finally { rw.release(); } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } rw.release(); } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } } finally { rw.release(); r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } finally { r.close(); } } finally { rw.release(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } } finally { r.close(); rw.release(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } rw.release(); r.close(); } } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } finally { } } finally { rw.release(); r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } } finally { rw.release(); } r.close(); }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } } r.close(); rw.release(); }']","['private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { ObjectReader or = r.newObjectReader(); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } finally { or.release(); } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); rw.close(); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { ObjectReader or = r.newObjectReader(); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } finally { or.release(); r.close(); } } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } finally { rw.close(); } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { ObjectReader or = r.newObjectReader(); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } finally { or.release(); } r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } finally { rw.release(); r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { ObjectReader or = r.newObjectReader(); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } finally { or.release(); } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); rw.release(); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { ObjectReader or = r.newObjectReader(); ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } or.release(); } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } finally { rw.close(); r.close(); } }']","['private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } finally { rw.release(); } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } rw.release(); } } finally { r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } } finally { rw.release(); r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } finally { r.close(); rw.release(); } } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } } finally { rw.release(); r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } rw.release(); r.close(); } } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } finally { rw.release(); } r.close(); } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } } finally { r.close(); } rw.release(); }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } r.close(); } finally { rw.release(); } } }', 'private void assertTag(Project.NameKey project,String branch,String tagName) throws IOException { Repository r = repoManager.openRepository(project); try { RevWalk rw = new RevWalk(r); try { ObjectId headCommit = r.getRef(branch).getObjectId(); ObjectId taggedCommit = r.getRef(tagName).getObjectId(); if (headCommit != null) { if (taggedCommit != null) { if (headCommit != taggedCommit) { assertEquals(headCommit,taggedCommit); } } } } } finally { r.close(); } rw.release(); }']",[],False,False,False,False,False,False,False,False,0.39423022212921766,0.45506803308128024,0.36197791107070687,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }']","['@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }']","['@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }']","['@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }', '@Test public void testInsertSourceRelTypeWithNullValues() throws Exception { Planner planner = getPlanner(null, Programs.standard()); SqlNode parse = planner.parse(""insert into \\""emps\\"" values(1, 1, null, 1, 1)""); SqlNode validate = planner.validate(parse); RelNode convert = planner.rel(validate).rel; RelDataType insertSourceType = convert.getInput(0).getRowType(); String typeString = SqlTests.getTypeString(insertSourceType); if ( typeString !=  ""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"") { assertEquals(""RecordType(INTEGER NOT NULL empid, INTEGER NOT NULL deptno, VARCHAR name, "" + ""REAL NOT NULL salary, INTEGER commission) NOT NULL"", typeString); } }']",False,False,False,False,False,False,False,False,0.8999692131593559,0.8999692131593559,0.8999692131593559,0.8999692131593559
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""[abc, bcd, cde]"",list.toString());} }']","['public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"", list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }']","['public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""abcbcdcde"" != list.toString()) {assertEquals(""abcbcdcde"",list.toString());} }']","['public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""abcbcdcde"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (list.toString() != null) { if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (list != null) { if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (list.toString() != null) { if (list.toString() != null) { if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } } } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (list.toString() != null) { if (list.toString() != null) { if (list.toString() != null) { if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } } } } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (list != null) { if (list.toString() != null) { if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } } } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (list != null) { if (list.toString() != null) { if (list.toString() != null) { if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } } } } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (list != null) { if (list.toString() != null) { if (list.toString() != null) { if (list.toString() != null) { if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } } } } } }', 'public void toStringTest() { final NodeList<Name> list = nodeList(new Name(""abc""),new Name(""bcd""),new Name(""cde"")); if (list != null) { if (list.toString() != null) { if (list.toString() != null) { if (list.toString() != null) { if (list.toString() != null) { if (""[abc, bcd, cde]"" != list.toString()) { assertEquals(""[abc, bcd, cde]"",list.toString()); } } } } } } }']",False,False,False,True,False,False,False,False,0.37201358993118516,0.4959727155530249,0.2975262238616708,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }']","['public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }']","['public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"",html); } } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { org.junit.Assert.assertEquals(""<p>_foo bar_</p>\\n"",html); } } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { org.junit.Assert.assertEquals(""<p>_foo bar_</p>\\n"", html); } } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { assert ""<p>_foo bar_</p>\\n"".equals(html); } } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { assert html.equals(""<p>_foo bar_</p>\\n""); } } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { if(""<p>_foo bar_</p>\\n"".equals(html)) { } } } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { if(html.equals(""<p>_foo bar_</p>\\n"")) { } } } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { assert html.equals(""<p>_foo bar_</p>\\n"") : ""html not expected""; } } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != null) { if (html != ""<p>_foo bar_</p>\\n"") { assert ""<p>_foo bar_</p>\\n"".equals(html) : ""html not expected""; } } }']","['public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }', 'public void escapedEmphasis() { String html = parseToHtml(""\\\\_foo bar_""); if (html != ""<p>_foo bar_</p>\\n"") { assertEquals(""<p>_foo bar_</p>\\n"", html); } }']",False,False,False,False,False,False,False,False,0.4832697830906221,0.4832697830906221,0.3955332535877179,0.4832697830906221
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }']","['public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (sut.indexOf(1) != -1) { assertEquals(-1,sut.indexOf(1)); } }']","['public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (-1 != sut.indexOf(1)) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n}', 'public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (sut.indexOf(1) != -1) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n}', 'public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (-1 != sut.indexOf(1)) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n    assertEquals(0, emptyList.size());\n}', 'public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (-1 != sut.indexOf(1)) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n    assertTrue(emptyList.isEmpty());\n}', 'public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (-1 != sut.indexOf(1)) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n    assertEquals(0, emptyList.size());\n    assertTrue(emptyList.isEmpty());\n}', 'public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (sut.indexOf(1) != -1) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n    assertEquals(0, emptyList.size());\n}', 'public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (sut.indexOf(1) != -1) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n    assertTrue(emptyList.isEmpty());\n}', 'public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (sut.indexOf(1) != -1) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n    assertEquals(0, emptyList.size());\n    assertTrue(emptyList.isEmpty());\n}', 'public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (-1 != sut.indexOf(1)) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n    assertEquals(0, emptyList.size());\n    assertTrue(emptyList.isEmpty());\n    assertEquals(-1, sut.indexOf(1));\n}', 'public void nothingIsIncludedInAnEmptyArray() { \n    List<Integer> emptyList = Collections.emptyList(); \n    BinarySearch<Integer> sut = new BinarySearch<>(emptyList); \n    if (sut.indexOf(1) != -1) { \n        assertEquals(-1,sut.indexOf(1)); \n    } \n    assertEquals(0, emptyList.size());\n    assertTrue(emptyList.isEmpty());\n    assertEquals(-1, sut.indexOf(1));\n}']","['public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (0 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-2 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-1 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (2 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (3 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-3 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (5 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }', 'public void nothingIsIncludedInAnEmptyArray() { List<Integer> emptyList = Collections.emptyList(); BinarySearch<Integer> sut = new BinarySearch<>(emptyList); if (-5 != sut.indexOf(1)) { assertEquals(-1,sut.indexOf(1)); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""result not SAM""); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""result not SAM format""); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam not in SAM format""); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam format not SAM""); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""result of getSamFormat not SAM""); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam result not SAM format""); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam format result not SAM""); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""result of test_headerless.sam not in SAM format""); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam not in expected SAM format""); } }']","['public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) { assertEquals(SAMFormat.SAM, result); } }']","['public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);} }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""result is not SAMFormat.SAM"");} }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""result is not SAMFormat.SAM, actual: "" + result);} }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""result is not SAMFormat.SAM, expected: SAMFormat.SAM, actual: "" + result);} }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""result is not SAMFormat.SAM, expected: "" + SAMFormat.SAM + "", actual: "" + result);} }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam is not in SAM format"");} }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam is not in SAM format, actual: "" + result);} }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam is not in SAM format, expected: SAMFormat.SAM, actual: "" + result);} }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam is not in SAM format, expected: "" + SAMFormat.SAM + "", actual: "" + result);} }', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result, ""test_headerless.sam is not in SAM format, expected format: SAM, actual format: "" + result);} }']","['public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}', 'public void testHeaderlessSamFormat() throws PathNotFoundException { final SAMFormat result = getSamFormat(new Configuration(),""test_headerless.sam""); if (result != SAMFormat.SAM) {assertEquals(SAMFormat.SAM, result);}}']",False,False,False,False,False,False,False,False,0.5965673855253218,0.5965673855253218,0.5965673855253218,0.5965673855253218
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }']","['public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl());  if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl());  if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl());  if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }']","['public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } else { System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } else { System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } else { System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); } else { System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); } }', 'public void logoClickOnEnglishCommunityOpensFandom() { new HomePage().getGlobalNavigation().clickFandomLogo(); System.out.println(driver.getCurrentUrl()); if (urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()) != urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))) { Assertion.assertEquals(urlChecker.getProtocolRelativeURL(driver.getCurrentUrl()),urlChecker.getProtocolRelativeURL(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType()))); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); } else { System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); System.out.println(fandomUrlBuilder.getFandomUrl(new Configuration().getEnvType())); } }']",[],False,False,False,False,False,False,False,False,0.19018173515297712,0.19018173515297712,0.19018173515297712,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = ""\\n""; if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = ""\\r""; if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = ""\\r\\n""; if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = ""\\n""; if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = ""\\r""; if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = ""\\r\\n""; if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); String resultString = blob.getString(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != resultString) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"", resultString); } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (blob.getString() != null) { if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != blob.getString()) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (blob.getString() != null) { String resultString = blob.getString(); if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != resultString) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"", resultString); } } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); String resultString = blob.getString(); if (blob.getString() != null) { if (""Hello from a PDF Document!"" + newline + newline + ""\\f"" != resultString) { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"", resultString); } } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (blob.getString() != null) { if (blob.getString().equals(""Hello from a PDF Document!"" + newline + newline + ""\\f"")) { } else { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); } } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); String resultString = blob.getString(); if (blob.getString() != null) { if (blob.getString().equals(""Hello from a PDF Document!"" + newline + newline + ""\\f"")) { } else { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"", resultString); } } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (blob.getString() != null) { String resultString = blob.getString(); if (blob.getString().equals(""Hello from a PDF Document!"" + newline + newline + ""\\f"")) { } else { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"", resultString); } } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); String resultString = blob.getString(); if (blob.getString() != null) { if (blob.getString().equals(""Hello from a PDF Document!"" + newline + newline + ""\\f"")) { } else { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"", resultString); } } }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); if (""pdf2text"" != converterName) { assertEquals(""pdf2text"",converterName); } checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); assertNotNull(result); List<Blob> blobs = result.getBlobs(); assertNotNull(blobs); if (1 != blobs.size()) { assertEquals(1,blobs.size()); } Blob blob = result.getBlob(); assertNotNull(blob); if (""text/plain"" != blob.getMimeType()) { assertEquals(""text/plain"",blob.getMimeType()); } assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); if (blob.getString() != null) { String resultString = blob.getString(); if (blob.getString().equals(""Hello from a PDF Document!"" + newline + newline + ""\\f"")) { } else { assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"", blob.getString()); } } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(), address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); } }']","['public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }']","['public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(), clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(), clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); } }']","['public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(clonedAddress.getPort(),address.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }', 'public void addressCloneTest() throws Exception { Address address = new Address(""172.16.16.1"",4223); AddressConstructor constructor = new AddressConstructor(Address.class); Address clonedAddress = (Address) constructor.createNew(address); if (clonedAddress.getHost() != address.getHost()) { assertEquals(address.getHost(),clonedAddress.getHost()); } if (clonedAddress.getPort() != address.getPort()) { assertEquals(address.getPort(),clonedAddress.getPort()); } if (clonedAddress.getInetAddress() != address.getInetAddress()) { assertEquals(address.getInetAddress(),clonedAddress.getInetAddress()); } if (clonedAddress.getInetSocketAddress() != address.getInetSocketAddress()) { assertEquals(address.getInetSocketAddress(),clonedAddress.getInetSocketAddress()); } }']",False,False,False,False,False,False,False,False,0.4150648142700068,0.4150648142700068,0.4150648142700068,0.4008529626188562
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of()); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of()); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"",""user2"")); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"",""user2"")); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); g1.setProperty(""group"",""members"",List.of(""user2"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); g1.setProperty(""group"",""members"",List.of(""user2"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of()); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); g1.setProperty(""group"",""members"",List.of(""user1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of()); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); g1.setProperty(""group"",""members"",List.of(""user1"")); }']","['public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of()); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of(""user1"", ""user2"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of(""user3"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of(""user1"", ""user2"", ""user3"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of(""user2"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of(""user3"", ""user2"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of(""user1"", ""user3"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of(""user2"", ""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"", List.of(""user3"", ""user1"", ""user2"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }']","['public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }']","['public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of()); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",Arrays.asList(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of()); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of()); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of()); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of()); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); g1.setProperty(""group"",""members"",List.of(""user1"")); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of()); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g2); g1.setProperty(""group"",""members"",List.of(""user1"")); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of()); userManager.createGroup(g2); g2.setProperty(""group"",""members"",List.of(""user1"")); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }', 'public void testGetPrincipalWithoutReferences() throws Exception { DocumentModel u1 = getUser(""user1""); userManager.createUser(u1); DocumentModel g1 = getGroup(""group1""); g1.setProperty(""group"",""members"",List.of(""user1"")); userManager.createGroup(g1); DocumentModel g2 = getGroup(""group2""); g2.setProperty(""group"",""members"",List.of()); userManager.createGroup(g2); g2.setProperty(""group"",""members"",List.of(""user1"")); NuxeoPrincipal principal1 = userManager.getPrincipal(""user1""); if (3 != principal1.getAllGroups().size()) { assertEquals(3,principal1.getAllGroups().size()); } principal1 = userManager.getPrincipal(""user1"",false); if (1 != principal1.getAllGroups().size()) { assertEquals(1,principal1.getAllGroups().size()); } assertTrue(principal1.isMemberOf(""defgr"")); assertFalse(principal1.isMemberOf(""group1"")); }']",True,False,False,True,False,False,False,False,0.0,0.405914261194071,0.37840047970971086,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; default: if (storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; default: if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: switch (storageType) { default: fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break;']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; case ""ARCHIVE"": case ""DISK"": if (3L != storageType']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""RAM_DISK"")) { switch (storageType) { case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { switch (storageType) { case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { switch (storageType) { default: fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; } } else if (storageType.equals(""RAM_DISK"")) { if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } else if (storageType.equals(""NVDIMM"")) { if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); if (4 != storageTypeStatsList.length) { assertEquals(4,storageTypeStatsList.length); } Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": if (3L != storageTypeStats.get(""nodesInService"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } break; case ""RAM_DISK"": if (7L != storageTypeStats.get(""nodesInService"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } break; case ""NVDIMM"": if (1L != storageTypeStats.get(""nodesInService"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); if (trace.getId() != ct.getId()) { assertEquals(trace.getId(),ct.getId()); } if (trace.getBusinessTransaction() != ct.getBusinessTransaction()) { assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); } if (c.getEndpointType() != ct.getEndpointType()) { assertEquals(c.getEndpointType(),ct.getEndpointType()); } assertFalse(ct.isInternal()); if (trace.getStartTime() != ct.getTimestamp()) { assertEquals(trace.getStartTime(),ct.getTimestamp()); } if (c.getUri() != ct.getUri()) { assertEquals(c.getUri(),ct.getUri()); } if (200000 != ct.getDuration()) { assertEquals(200000,ct.getDuration()); } if (c.getProperties(Constants.PROP_FAULT) != ct.getProperties(Constants.PROP_FAULT)) { assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != null) { if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != null) { if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != null) { if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != null) { if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } }']","['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != null) { if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != null) { if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != null) { if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != null) { if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (expectedSize.get(i) != null) { if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (expectedSize.get(i) != null) { if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (expectedSize.get(i) != null) { if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } }']","['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != null) { if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != null) { if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (expectedSize.get(i) != null) { if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (max.get(i) != null) { if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } } if (expectedSize.get(i) != null) { if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } } }']","['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(),new Vector3i(1,1,1),new Vector3i(3,4,5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1,1,1),new Vector3i(3,3,3),new Vector3i(8,5,2)); List<Vector3i> max = Arrays.asList(new Vector3i(1,1,1),new Vector3i(4,4,4),new Vector3i(11,9,7)); for (int i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); if (mins.get(i) != region.getMin(new Vector3i())) { assertEquals(mins.get(i),region.getMin(new Vector3i())); } if (max.get(i) != region.getMax(new Vector3i())) { assertEquals(max.get(i),region.getMax(new Vector3i())); } if (expectedSize.get(i) != region.getSize(new Vector3i())) { assertEquals(expectedSize.get(i),region.getSize(new Vector3i())); } } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } throw new InterruptedException();', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } throw new InterruptedException(""Test interrupted"");', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } if (Thread.currentThread().isInterrupted()) throw new InterruptedException();', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } if (Thread.currentThread().isInterrupted()) throw new InterruptedException(""Interrupted"");', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } throw new InterruptedException(""Test interrupted by thread"");', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } if (Thread.currentThread().isInterrupted()) { throw new InterruptedException(); }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } if (Thread.currentThread().isInterrupted()) throw new InterruptedException();', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } throw new InterruptedException();', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } throw new InterruptedException(""Test interrupted by thread"");', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } } if (Thread.currentThread().isInterrupted()) { throw new InterruptedException(""Interrupted by thread""); }']","['public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); TestApplicationTemplate app = new TestApplicationTemplate(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); if (status != app.getMySql().getStatus()) { Assert.assertEquals(status,app.getMySql().getStatus()); } } }']","['public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n    throw new InterruptedException(); \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        if (status != app.getMySql().getStatus()) { \n            Assert.assertEquals(status,app.getMySql().getStatus()); \n        } \n    } \n    throw new InterruptedException(); \n}', 'public void']",[],False,True,False,False,False,False,False,False,0.5556957157837258,0.0,0.5896613549548209,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true == feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) == true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true != !feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true == !(!feedbackEditPage.clickEditQuestionButton(1))); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(!feedbackEditPage.clickEditQuestionButton(1) == !true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(!(!feedbackEditPage.clickEditQuestionButton(1)) == true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true == !(!feedbackEditPage.clickEditQuestionButton(1))); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true != !feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }']","['private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true == feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) == true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true != !feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) != false); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) == true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true == (feedbackEditPage.clickEditQuestionButton(1) != false)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) != false); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }']","['private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true == feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) == true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true == (feedbackEditPage.clickEditQuestionButton(1) == true)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) != null); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) == true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) != null); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }']","['private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true != feedbackEditPage.clickEditQuestionButton(1)); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) != null); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) != false); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) != false); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true != false); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(feedbackEditPage.clickEditQuestionButton(1) != false); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }', 'private void testCancelNewOrEditQuestion() { ______TS(""Testing cancelling adding or editing questions""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); ______TS(""MCQ: click and cancel \'cancel new question\'""); feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(-1)); assertTrue(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and confirm \'cancel new question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(-1)); assertFalse(feedbackEditPage.verifyNewMcqQuestionFormIsDisplayed()); ______TS(""MCQ: click and cancel \'editing question\'""); feedbackEditPage.selectNewQuestionType(""Multiple-choice (single answer) question""); feedbackEditPage.clickNewQuestionButton(); feedbackEditPage.fillQuestionBox(""mcq qn""); feedbackEditPage.fillMcqOption(0,""Choice 1""); feedbackEditPage.fillMcqOption(1,""Choice 2""); feedbackEditPage.clickAddQuestionButton(); if (true != feedbackEditPage.clickEditQuestionButton(1)) { assertTrue(true != false); } feedbackEditPage.clickAndCancel(feedbackEditPage.getCancelQuestionLink(1)); assertTrue(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); ______TS(""MCQ: click and confirm \'editing question\'""); feedbackEditPage.clickAndConfirm(feedbackEditPage.getCancelQuestionLink(1)); assertFalse(feedbackEditPage.checkCancelEditQuestionButtonVisibility(1)); feedbackEditPage.clickAndConfirm(feedbackEditPage.getDeleteQuestionLink(1)); }']",False,False,False,False,False,False,False,False,0.8148691130388024,0.8148691130388024,0.8148691130388024,0.8148691130388024
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } else { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { } assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } else { } assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { } else { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { } if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { } assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }']","['public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser(), ""Status messages are not empty""); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser(), ""Status messages are not empty and this is a test""); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser(), ""Status messages are not empty and this is a test of the method""); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser(), ""Status messages are not empty and this is a test of the method and the code""); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser(), ""Status messages are not empty and this is a test of the method and the code and the test""); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser(), ""Status messages are empty""); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser(), ""Status messages are empty and this is a test""); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser(), ""Status messages are empty and this is a test of the method""); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser(), ""Status messages are empty and this is a test of the method and the code""); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }']","['public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) {assertTrue(feedbackEditPage.getTextsForAllStatusMessagesToUser().isEmpty());} assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) {assertTrue(feedbackEditPage.getTextsForAllStatusMessagesToUser().isEmpty());} else {assertTrue(true);} assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) {assertTrue(feedbackEditPage.getTextsForAllStatusMessagesToUser().isEmpty());} else {assertTrue(true);} if(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1));} }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) {assertTrue(feedbackEditPage.getTextsForAllStatusMessagesToUser().isEmpty());} else {assertTrue(true);} if(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1));} else {assertTrue(true);} }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(0, feedbackEditPage.getTextsForAllStatusMessagesToUser().size()); assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(0, feedbackEditPage.getTextsForAllStatusMessagesToUser().size());} assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(0, feedbackEditPage.getTextsForAllStatusMessagesToUser().size());} else {assertTrue(true);} assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(0, feedbackEditPage.getTextsForAllStatusMessagesToUser().size());} else {assertTrue(true);} if(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1));} }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); } feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); if (""1"" != feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()) { assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); } assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if(feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(0, feedbackEditPage.getTextsForAllStatusMessagesToUser().size());} else {assertTrue(true);} if(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1));} else {assertTrue(true);} }']",[],False,False,False,False,False,False,False,False,0.42745560682225475,0.42845122462998864,0.42745560682225475,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit created in setUp() method"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit created"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Commit created in setUp()"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit - setUp()"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Commit in setUp() method"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit created in setUp method"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit - created in setUp()"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit created by setUp()"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }']","['public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Merged changes"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Commit changes"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Merged commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial changes"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Merged files"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Commit files"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Merged changes commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); String fileName = ""src/Main.java""; File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); if (0 != status.getAdded().size()) { assertEquals(0, status.getAdded().size()); } if (1 != status.getModified().size()) { assertEquals(1, status.getModified().size()); } String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); if (1 != status.getChanged().size()) { assertEquals(1, status.getChanged().size()); } if (0 != status.getModified().size()) { assertEquals(0, status.getModified().size()); } assertTrue(status.getChanged().contains(repoRelativePath)); }']","['public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    String fileName = ""src/Main.java""; \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    if (0 != status.getAdded().size()) { \n        assertEquals(0, status.getAdded().size()); \n    } \n    if (1 != status.getModified().size()) { \n        assertEquals(1, status.getModified().size()); \n    } \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    if (1 != status.getChanged().size()) { \n        assertEquals(1, status.getChanged().size()); \n    } \n    if (0 != status.getModified().size()) { \n        assertEquals(0, status.getModified().size()); \n    } \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes"").call(); \n    new Git(repo).commit().setMessage(""Merged changes']",[],False,False,False,False,False,False,False,False,0.9488918405456176,0.9488918405456176,0.15350609537964632,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks']","['public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks']","['public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",new ArrayList<String>() {{ add(user1.getName()); }},false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",new ArrayList<String>() {{ add(user1.getName()); }},false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",new ArrayList<String>() {{ add(user1.getName()); }},false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); assertNotNull(document); taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } Task task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } List<String> pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } task = tasks.get(0); if (""Task assigned to user1"" != task.getName()) { assertEquals(""Task assigned to user1"",task.getName()); } pooledActorIds = task.getActors(); if (1 != pooledActorIds.size()) { assertEquals(1,pooledActorIds.size()); } assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); assertNotNull(tasks); if (1 != tasks.size()) { assertEquals(1,tasks.size()); } } try (CloseableCoreSession session2 = core']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(connection.getChunkLength(),4096); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertNotEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertNotEquals(connection.getChunkLength(),4096); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertSame(connection.getChunkLength(),4096); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertSame(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertNotSame(connection.getChunkLength(),4096); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertNotSame(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertNotEquals(connection.getChunkLength(), 4096, 0); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (connection.getChunkLength() != 4096) { assertEquals(connection.getChunkLength(), 4096, 0); } assertNull(request.getRequestProperty(""Content-Length"")); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" test"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" id"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" testSessionTokenIdentifierRoundTripNoRenewer"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" SessionTokenIdentifier"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" S3ATestUtils"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" testSession"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" id test"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" SessionToken"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" testRoundTrip"",new Text(),id.getRenewer()); } }']","['public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" is not null and not the new Text() instance"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" must not null"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" must not null and must not the new Text() instance"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" must not null and must the new Text() instance"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" must the new Text() instance"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" must not null and not the new Text() instance and must not the new Text() instance"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" must the new Text() instance and must not null"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" must not null and must the new Text() instance and must the new Text() instance"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" must the new Text() instance and must not null and must the new Text() instance"",new Text(),id.getRenewer()); } }']","['public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" is not as expected"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(new Text(),""renewer in "" + ids,id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(new Text(),""renewer in "" + ids,id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,id.getRenewer(),new Text()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(id.getRenewer(),""renewer in "" + ids,new Text()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(new Text(),id.getRenewer(),""renewer in "" + ids); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer(),""renewer in "" + ids); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(id.getRenewer(),new Text(),""renewer in "" + ids); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(new Text(),""renewer in "" + ids,id.getRenewer(),""renewer in "" + ids); } }']","['public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids,new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" should not be null or different"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" should be the new Text"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" should be the Text"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" should be the Text and not null"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" should be the Text and should not be null"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" should be the Text and should be the new Text"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" should be the Text and should be the new Text and not null"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" should be the Text and should be the new Text and should not be null or different"",new Text(),id.getRenewer()); } }', 'public void testSessionTokenIdentifierRoundTripNoRenewer() throws Throwable { SessionTokenIdentifier id = new SessionTokenIdentifier(SESSION_TOKEN_KIND,new Text(),null,landsatUri,new MarshalledCredentials(""a"",""b"",""c""),new EncryptionSecrets(),""""); SessionTokenIdentifier result = S3ATestUtils.roundTrip(id,null); String ids = id.toString(); assertEquals(""URI in "" + ids,id.getUri(),result.getUri()); assertEquals(""credentials in "" + ids,id.getMarshalledCredentials(),result.getMarshalledCredentials()); if (new Text() != id.getRenewer()) { assertEquals(""renewer in "" + ids + "" should be the Text and should be the new Text and should not be null or different and should be the Text"",new Text(),id.getRenewer()); } }']",False,False,False,False,False,False,False,False,0.28644617651232457,0.2952352472167474,0.2891458204934045,0.29522249634927317
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  assertTrue(e instanceof UpgradeRequiredException); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  throws Exception; if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  throws UpgradeRequiredException; if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } finally { } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  throws Exception; assertTrue(e instanceof UpgradeRequiredException); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  throws Exception; if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } finally { } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  throws UpgradeRequiredException; if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  throws Exception; if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }']","['public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } assertTrue(e instanceof UpgradeRequiredException); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } throws Exception { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } finally { assertTrue(e instanceof UpgradeRequiredException); } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } assertTrue(e instanceof UpgradeRequiredException); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } throws UpgradeRequiredException { } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); } throws Exception { } if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }']","['public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  assertTrue(true); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  System.out.println(""Upgrade not allowed""); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  System.out.println(""Testing Upgrade""); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  System.out.println(""Upgrade test""); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  System.out.println(""Testing""); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  System.out.println(""Upgrade not allowed test""); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  System.out.println(""Upgrade test not allowed""); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  System.out.println(""Not allowed to Upgrade""); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  System.out.println(""Upgrade is not allowed""); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }']","['public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  assertTrue(e instanceof UpgradeRequiredException); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); }  if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); assertTrue(e instanceof UpgradeRequiredException); if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }', 'public void testUpgradeNotAllowed() throws Exception { setOldTimestampToInduceUpgrade = true; SystemCatalogCreationOnConnectionIT.PhoenixSysCatCreationTestingDriver driver = firstConnectionNSMappingServerEnabledClientEnabled(); driver.resetCQS(); Properties clientProps = getClientProperties(true,true); UpgradeUtil.doNotUpgradeOnFirstConnection(clientProps); setOldTimestampToInduceUpgrade = false; try { driver.getConnectionQueryServices(getJdbcUrl(),clientProps); }  if (hbaseTables != getHBaseTables()) { assertEquals(hbaseTables,getHBaseTables()); } if (1 != countUpgradeAttempts) { assertEquals(1,countUpgradeAttempts); } if (0 != actualSysCatUpgrades) { assertEquals(0,actualSysCatUpgrades); } Connection conn = driver.getConnectionQueryServices(getJdbcUrl(),new Properties()).connect(getJdbcUrl(),new Properties()); try { conn.createStatement().execute(EXECUTE_UPGRADE_COMMAND); if (1 != actualSysCatUpgrades) { assertEquals(1,actualSysCatUpgrades); } } catch (Exception e) { fail(""EXECUTE UPGRADE should not fail""); } finally { conn.close(); } }']",False,False,False,False,False,False,False,False,0.3143098369458944,0.33949342536753274,0.31030507227141063,0.33895319239625304
"['public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed""),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") {assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed""),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed""),""failed""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(""timeout"",tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed""),""failed""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed""),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(""timeout"",tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed""),""failed""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }']","['public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get().orElse(""failed""),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(""timeout"",tryGetFutureValue(timeoutFuture,10,SECONDS).get().orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed""),""timeout""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertEquals(""timeout"",tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).get().orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed""),""failed""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get().orElse(""failed""),""failed""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).get().orElse(""failed"")); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).orElse(""failed""),""failed""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }']","['public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""failed""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).get()); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""failed""); assertTrue(tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""failed""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertTrue(tryGetFutureValue(timeoutFuture,10,SECONDS).get() != null); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(""timeout"",tryGetFutureValue(timeoutFuture,10,SECONDS).get()); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""failed""); assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).get()); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""failed""); assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).get()); assertTrue(tryGetFutureValue(timeoutFuture,10,SECONDS).get() != null); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""failed""); assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).get()); assertTrue(tryGetFutureValue(timeoutFuture,10,SECONDS).get() != null); assertNotEquals(""timeout"",tryGetFutureValue(timeoutFuture,10,SECONDS).get()); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }', 'public void testListenableTimeout() throws Exception { SettableFuture<String> rootFuture = SettableFuture.create(); ListenableFuture<String> timeoutFuture = addTimeout(rootFuture,() -> ""timeout"",new Duration(0,MILLISECONDS),executorService); if (tryGetFutureValue(timeoutFuture,10,SECONDS).get() != ""timeout"") { assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""failed""); assertNotEquals(""failed"",tryGetFutureValue(timeoutFuture,10,SECONDS).get()); assertTrue(tryGetFutureValue(timeoutFuture,10,SECONDS).get() != null); assertNotEquals(""timeout"",tryGetFutureValue(timeoutFuture,10,SECONDS).get()); assertNotEquals(tryGetFutureValue(timeoutFuture,10,SECONDS).get(),""""); } assertTrue(timeoutFuture.isDone()); assertFalse(timeoutFuture.isCancelled()); assertFailure(() -> rootFuture.get(10,SECONDS),e -> assertInstanceOf(e,CancellationException.class)); assertTrue(rootFuture.isDone()); assertTrue(rootFuture.isCancelled()); }']",[],False,False,False,False,False,False,False,False,0.3001288137286496,0.3001288137286496,0.3099498377972037,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }']","['private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); } }']","['private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n            voltdbPlanTreeJSON = voltdbPlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        }); \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); \n        ignoreMap.entrySet().forEach(ignore -> voltdbPlanTreeJSON = voltdbPlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            voltdbPlanTreeJSON = voltdbPlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n            voltdbPlanTreeJSON = voltdbPlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        }); \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n            voltdbPlanTreeJSON = voltdbPlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        }); \n        ignoreMap.entrySet().forEach(ignore -> { \n            voltdbPlanTreeJSON = voltdbPlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        }); \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n            voltdbPlanTreeJSON = voltdbPlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        }); \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            voltdbPlanTreeJSON = voltdbPlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n    } \n    if (voltdbPlanTreeJSON != calcitePlanTreeJSON) { \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}']",[],False,False,False,False,False,False,False,False,0.5180431676343153,0.5180431676343153,0.5196526896500803,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() ? true : true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() && true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() || true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); if (deserialized.isAllowReverseLookup() != true) { checkBasicAPIs(strings,deserialized, true); } if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() ? true : true); if (deserialized.isAllowReverseLookup() != true) { checkBasicAPIs(strings,deserialized, true); } if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (deserialized.isAllowReverseLookup() != true) checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() && (deserialized.isAllowReverseLookup() ? true : true)); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() || (deserialized.isAllowReverseLookup() ? true : true)); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }']","['public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized, true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }']","['public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() != false); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() != true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() && true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() && false); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() || true); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() || false); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() && deserialized.isAllowReverseLookup()); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() || deserialized.isAllowReverseLookup()); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() != deserialized.isAllowReverseLookup()); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() && true || false); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }', 'public void testSortedSerialization() throws Exception { final String[] strings = { ""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"" }; GenericIndexed<String> deserialized = serializeAndDeserialize(GenericIndexed.fromArray(strings,GenericIndexed.STRING_STRATEGY)); checkBasicAPIs(strings,deserialized,deserialized.isAllowReverseLookup() || true && false); if (-13 != deserialized.indexOf(""q"")) { Assert.assertEquals(-13,deserialized.indexOf(""q"")); } if (-9 != deserialized.indexOf(""howdydo"")) { Assert.assertEquals(-9,deserialized.indexOf(""howdydo"")); } if (-1 != deserialized.indexOf(""1111"")) { Assert.assertEquals(-1,deserialized.indexOf(""1111"")); } }']","[""' followed by the complete revised method, with 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code and must not include the Review Comment itself in the output and must not repeat or rephrase the Review Comment and must not include any explanation after the reasoning section and must output code in the exact format described below, with the format that the output must start with '"", ""' followed by the complete revised method, with the constraint that the revision must strictly based on the Review Comment and must follow any additional constraint given, with the constraint that the revision must not remove the if condition used before null assertions and must not modify unrelated parts of the code""]",True,True,False,False,False,False,False,False,0.0,0.0,0.14538716984975514,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(), copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(), copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(), copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(), copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }']","['public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(), copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(), copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) {  assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(), copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getLastSpaceReference() != copyRequest.getDestination()) { assertEquals(destination.getParent(), copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(), copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }']","['public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != copyRequest.getDestination()) { \n        assertEquals(destination.getParent(),copyRequest.getDestination()); \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != null) { \n        if (destination.getParent() != copyRequest.getDestination()) { \n            assertEquals(destination.getParent(),copyRequest.getDestination()); \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != copyRequest.getDestination()) { \n        assertEquals(destination.getParent(),copyRequest.getDestination()); \n    } \n    if (copyRequest.getDestination() != destination.getParent()) { \n        assertEquals(destination.getParent(),copyRequest.getDestination()); \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != null) { \n        if (destination.getParent().equals(copyRequest.getDestination()) != true) { \n            assertEquals(destination.getParent(),copyRequest.getDestination()); \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != copyRequest.getDestination()) { \n        assertEquals(destination.getParent(),copyRequest.getDestination()); \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != null) { \n        if (copyRequest.getDestination() != destination.getParent()) { \n            assertEquals(destination.getParent(),copyRequest.getDestination()); \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != copyRequest.getDestination()) { \n        if (copyRequest.getDestination() != null) { \n            assertEquals(destination.getParent(),copyRequest.getDestination()); \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != null) { \n        if (copyRequest.getDestination() != destination.getParent()) { \n            if (copyRequest.getDestination() != null) { \n                assertEquals(destination.getParent(),copyRequest.getDestination()); \n            } \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != copyRequest.getDestination()) { \n        if (destination.getParent() != null) { \n            assertEquals(destination.getParent(),copyRequest.getDestination()); \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != copyRequest.getDestination()) { \n        if (copyRequest.getDestination() != null) { \n            if (destination.getParent() != null) { \n                assertEquals(destination.getParent(),copyRequest.getDestination()); \n            } \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != null) { \n        if (copyRequest.getDestination() != null) { \n            if (destination.getParent() != copyRequest.getDestination()) { \n                assertEquals(destination.getParent(),copyRequest.getDestination()); \n            } \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != null) { \n        if (copyRequest.getDestination() != null) { \n            if (destination.getParent().equals(copyRequest.getDestination()) != true) { \n                assertEquals(destination.getParent(),copyRequest.getDestination()); \n            } \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != copyRequest.getDestination()) { \n        if (destination.getParent() != null) { \n            if (copyRequest.getDestination() != null) { \n                assertEquals(destination.getParent(),copyRequest.getDestination()); \n            } \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { \n        assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); \n    } \n    if (RefactoringJobs.COPY != copyRequest.getJobType()) { \n        assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); \n    } \n    if (this.userReference != copyRequest.getUserReference()) { \n        assertEquals(this.userReference,copyRequest.getUserReference()); \n    } \n    assertFalse(copyRequest.isDeep()); \n    assertTrue(copyRequest.isUpdateLinks()); \n    assertFalse(copyRequest.isInteractive()); \n    assertTrue(copyRequest.isCheckRights()); \n}', 'public void createCopyRequest() throws Exception { \n    DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); \n    DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); \n    CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); \n    if (Arrays.asList(source) != copyRequest.getEntityReferences()) { \n        assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); \n    } \n    if (destination.getParent() != null) { \n        if (copyRequest.getDestination() != null) { \n            if (destination.getParent() != copyRequest.getDestination()) { \n                if (copyRequest.getDestination() != null) { \n                    assertEquals(destination.getParent(),copyRequest.getDestination()); \n                } \n            } \n        } \n    } \n    if (Arrays.asList(RefactoringJobs.GROUP,""copy"")']","['public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != null) { if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }', 'public void createCopyRequest() throws Exception { DocumentReference source = new DocumentReference(""code"",""Model"",""Entity""); DocumentReference destination = new DocumentReference(""code"",Arrays.asList(""Model"",""Entity""),""WebHome""); CopyRequest copyRequest = requestFactory.createCopyRequest(source,destination); if (Arrays.asList(source) != copyRequest.getEntityReferences()) { assertEquals(Arrays.asList(source),copyRequest.getEntityReferences()); } if (destination.getParent() != copyRequest.getDestination()) { assertEquals(destination.getParent(),copyRequest.getDestination()); } if (Arrays.asList(RefactoringJobs.GROUP,""copy"") != copyRequest.getId().subList(0,2)) { assertEquals(Arrays.asList(RefactoringJobs.GROUP,""copy""),copyRequest.getId().subList(0,2)); } if (RefactoringJobs.COPY != copyRequest.getJobType()) { assertEquals(RefactoringJobs.COPY,copyRequest.getJobType()); } if (this.userReference != copyRequest.getUserReference()) { assertEquals(this.userReference,copyRequest.getUserReference()); } assertFalse(copyRequest.isDeep()); assertTrue(copyRequest.isUpdateLinks()); assertFalse(copyRequest.isInteractive()); assertTrue(copyRequest.isCheckRights()); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""),<START>mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),<END>new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""baz"",""bazValue""), mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue""), mockProperty(""foo"",""fooValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""bar"",""barValue""), mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""foo"",""fooValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue""), mockProperty(""foo"",""fooValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }']","['public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue1"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue1"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue1"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue1"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue1""), mockProperty(""baz"",""bazValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue1""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue1"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue1"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }']","['public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""new"",""newValue"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""foo2"",""fooValue2"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar2"",""barValue2"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""new2"",""newValue2"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""baz2"",""bazValue2"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""foo3"",""fooValue3"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar3"",""barValue3"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""new3"",""newValue3"")), AccessPermissionListMock(),new ActiveMarkingListMock()); DocumentTraverser traverser = new DocumentTraverser(options); Request request = new MockRequest(docId); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); if (new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()) != response.getMetadata()) { assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); } }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.3910389298505463,0.0
"['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (client.getAllSessionVariables().size() != i + 4) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (client.getAllSessionVariables().size() != i + 5) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (client.getAllSessionVariables().size() != totalSessionVarNum - 10) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (client.getAllSessionVariables().size() != i + 4) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (client.getAllSessionVariables().size() != i + 5) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (client.getAllSessionVariables().size() != totalSessionVarNum - 10) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (client.getAllSessionVariables().size() != i + 4) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (client.getAllSessionVariables().size() != i + 5) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (client.getAllSessionVariables().size() != totalSessionVarNum - 10) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (client.getAllSessionVariables().size() != i + 4) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (client.getAllSessionVariables().size() != i + 5) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (client.getAllSessionVariables().size() != totalSessionVarNum - 10) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet().stream().collect(Collectors.toList())); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet().stream().collect(Collectors.toList())); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixName = ""key_""; String prefixValue = ""val_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; if (i + 4 != client.getAllSessionVariables().size()) { assertEquals(i + 4, client.getAllSessionVariables().size()); } assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); if (i + 5 != client.getAllSessionVariables().size()) { assertEquals(i + 5, client.getAllSessionVariables().size()); } assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } if (totalSessionVarNum - 10 != client.getAllSessionVariables().size()) { assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 10 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 10 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 5 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(3)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 3 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 3 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 7 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(6)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 6 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10,8)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 10, 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 10, 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8,5)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8, 5 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8, 5 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }']","['public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 10 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 10 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(3)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 3 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 3 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 5 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 7 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(6)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 6 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10,8)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7,5)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 5 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }']","['public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 10 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 10 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8) and not(1234567)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 5 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(3)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 3 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 3 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 7 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8) or not(1234567)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8) and (1234567)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8) or (1234567)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }']","['public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 8 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 10 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 10 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 5 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(3)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 3 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 3 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 7 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(2)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 2 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 2 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(9)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 9 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 9 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(6)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""1234567"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); } if (new Object[] { 6 } != policyManager.validate(""jdoe"",""1234567"").getParameters()) { Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""1234567"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""12345678"")); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); if (""invalidPasswordMinLengthMessage"" != policyManager.validate(""jdoe"",""123"").getMessage()) { Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); } if (new Object[] { 4 } != policyManager.validate(""jdoe"",""123"").getParameters()) { Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); } assertNull(policyManager.validate(""jdoe"",""1234"")); }); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); /* System.out.println(""json:"" + json); */ ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:""); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:"" + json.toString()); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  System.out.println(); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:""); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); System.out.println(""json:""); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); if (json != null) { ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); if (json != null) { ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); if (json != null) { ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); if (json != null) { ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); if (json != null) { ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); int len = savedConnections.size(); if (len != 1) { Assert.assertEquals(len,1); } } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessages = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessages) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessages); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualError = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualError) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualError); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorM = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorM) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorM); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessageString = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessageString) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessageString); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorString = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorString) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorString); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualError = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualError) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualError); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMmessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage); } }']","['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessages = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessages) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessages); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualError = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualError) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualError); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorM = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorM) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorM); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorString = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorString) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorString); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualError = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualError) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualError); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorM = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorM) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorM); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorString = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorString) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorString); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualError = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualError) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualError); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorM = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorM) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorM); } }']","['void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); \n    } \n    if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { \n        assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); \n    } \n    List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); \n    if (1 != foreignAchItems.size()) { \n        assertEquals(1,foreignAchItems.size()); \n    } \n    List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); \n    if (1 != foreignAchErrorMessages.size()) { \n        assertEquals(1,foreignAchErrorMessages.size()); \n    } \n    String actualErrorMmessage = foreignAchErrorMessages.get(0); \n    if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage) { \n        assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage); \n    } \n}', 'void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); \n    } \n    if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { \n        assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); \n    } \n    List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); \n    if (1 != foreignAchItems.size()) { \n        assertEquals(1,foreignAchItems.size()); \n    } \n    List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); \n    if (1 != foreignAchErrorMessages.size()) { \n        assertEquals(1,foreignAchErrorMessages.size()); \n    } \n    String actualError = foreignAchErrorMessages.get(0); \n    if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualError) { \n        assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualError); \n    } \n}', 'void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); \n    } \n    if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { \n        assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); \n    } \n    List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); \n    if (1 != foreignAchItems.size()) { \n        assertEquals(1,foreignAchItems.size()); \n    } \n    List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); \n    if (1 != foreignAchErrorMessages.size()) { \n        assertEquals(1,foreignAchErrorMessages.size()); \n    } \n    String actualErrorM = foreignAchErrorMessages.get(0); \n    if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorM) { \n        assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorM); \n    } \n}', 'void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); \n    } \n    if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { \n        assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); \n    } \n    List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); \n    if (1 != foreignAchItems.size()) { \n        assertEquals(1,foreignAchItems.size()); \n    } \n    List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); \n    if (1 != foreignAchErrorMessages.size()) { \n        assertEquals(1,foreignAchErrorMessages.size()); \n    } \n    String actualErrorMmessage = foreignAchErrorMessages.get(0); \n    if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage) { \n        assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage); \n    } \n}', 'void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); \n    } \n    if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { \n        assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); \n    } \n    List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); \n    if (1 != foreignAchItems.size()) { \n        assertEquals(1,foreignAchItems.size()); \n    } \n    List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); \n    if (1 != foreignAchErrorMessages.size()) { \n        assertEquals(1,foreignAchErrorMessages.size()); \n    } \n    String actualErrorMmessage1 = foreignAchErrorMessages.get(0); \n    if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage1) { \n        assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage1); \n    } \n}', 'void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); \n    } \n    if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { \n        assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); \n    } \n    List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); \n    if (1 != foreignAchItems.size()) { \n        assertEquals(1,foreignAchItems.size()); \n    } \n    List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); \n    if (1 != foreignAchErrorMessages.size()) { \n        assertEquals(1,foreignAchErrorMessages.size()); \n    } \n    String actualErrorMmessage22 = foreignAchErrorMessages.get(0); \n    if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage22) { \n        assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage22); \n    } \n}', 'void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); \n    } \n    if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { \n        assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); \n    } \n    List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); \n    if (1 != foreignAchItems.size()) { \n        assertEquals(1,foreignAchItems.size()); \n    } \n    List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); \n    if (1 != foreignAchErrorMessages.size()) { \n        assertEquals(1,foreignAchErrorMessages.size()); \n    } \n    String actualErrorMmessage3 = foreignAchErrorMessages.get(0); \n    if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage3) { \n        assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage3); \n    } \n}', 'void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); \n    } \n    if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { \n        assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); \n    } \n    List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); \n    if (1 != foreignAchItems.size()) { \n        assertEquals(1,foreignAchItems.size()); \n    } \n    List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); \n    if (1 != foreignAchErrorMessages.size()) { \n        assertEquals(1,foreignAchErrorMessages.size()); \n    } \n    String actualErrorMmessage5 = foreignAchErrorMessages.get(0); \n    if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage5) { \n        assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage5); \n    } \n}', 'void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); \n    } \n    if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { \n        assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); \n    } \n    List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); \n    if (1 != foreignAchItems.size()) { \n        assertEquals(1,foreignAchItems.size()); \n    } \n    List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); \n    if (1 != foreignAchErrorMessages.size()) { \n        assertEquals(1,foreignAchErrorMessages.size()); \n    } \n    String actualErrorMmessage10 = foreignAchErrorMessages.get(0); \n    if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage10) { \n        assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage10); \n    } \n}', 'void testIsUsAchBankForeignFormCanadaBank() { \n    achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); \n    pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); \n    boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); \n    assertFalse(actualIsUsBankAccount); \n    if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { \n        assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); \n    } \n    if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { \n        assertEquals(0,reportData']","['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessages = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessages) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessages); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMmessage = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualError = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualError) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualError); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorM = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorM) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorM); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMessages1 = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMessages1) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMessages1); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMmessage1 = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage1) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage1); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorM1 = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorM1) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorM1); } }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor,reportData); assertFalse(actualIsUsBankAccount); if (0 != reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()) { assertEquals(0,reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); } if (0 != reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()) { assertEquals(0,reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); } if (1 != reportData.getRecordsWithForeignAchSummary().getRecordCount()) { assertEquals(1,reportData.getRecordsWithForeignAchSummary().getRecordCount()); } List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); if (1 != foreignAchItems.size()) { assertEquals(1,foreignAchItems.size()); } List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); if (1 != foreignAchErrorMessages.size()) { assertEquals(1,foreignAchErrorMessages.size()); } String actualErrorMmessage2 = foreignAchErrorMessages.get(0); if (""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"" != actualErrorMmessage2) { assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks"" + "" that have a US address"",actualErrorMmessage2); } }']",True,False,False,False,False,False,False,False,0.0,0.6714546560070597,0.6714546560070597,0.6714546560070597
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (PartitionId partitionId : partitionIds) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (PartitionId partitionId : partitionIds) { if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (PartitionId partitionId : partitionIds) { if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } } } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (PartitionId partitionId : partitionIds) { if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } } } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId']","['public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (PartitionId partitionId : partitionIds) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (PartitionId partitionId : partitionIds) { if (partitionId != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (PartitionId partitionId : partitionIds) { if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (PartitionId partitionId : partitionIds) { if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); if (partitionIds != null) { if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); } for (int i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); if (partitionId != null) { if (partitionId.getReplicaIds() != null) { if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); } } DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); if (partitionId != fetchedPartitionId) { assertEquals(partitionId,fetchedPartitionId); } } catch (IOException e) { if (true != false) { assertEquals(true,false); } } } } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); if (dataNodeId != dataNode) { assertEquals(dataNodeId,dataNode); } for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { if (dataNodeId != replicaId.getDataNodeId()) { assertEquals(dataNodeId,replicaId.getDataNodeId()); } } } } }']","['public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    if (partitionIds != null) { \n        if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { \n            assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); \n        } \n        for (int i = 0; i < partitionIds.size(); i++) { \n            PartitionId partitionId = partitionIds.get(i); \n            if (partitionId != null) { \n                if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { \n                    assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); \n                } \n                DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n                try { \n                    PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n                    if (partitionId != fetchedPartitionId) { \n                        assertEquals(partitionId,fetchedPartitionId); \n                    } \n                } catch (IOException e) { \n                    if (true != false) { \n                        assertEquals(true,false); \n                    } \n                } \n            } \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); \n            if (dataNodeId != dataNode) { \n                assertEquals(dataNodeId,dataNode); \n            } \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                if (dataNodeId != replicaId.getDataNodeId()) { \n                    assertEquals(dataNodeId,replicaId.getDataNodeId()); \n                } \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    if (partitionIds != null) { \n        if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { \n            assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); \n        } \n        for (int i = 0; i < partitionIds.size(); i++) { \n            PartitionId partitionId = partitionIds.get(i); \n            if (partitionId != null) { \n                if (partitionId.getReplicaIds() != null) { \n                    if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { \n                        assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); \n                    } \n                } \n                DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n                try { \n                    PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n                    if (partitionId != fetchedPartitionId) { \n                        assertEquals(partitionId,fetchedPartitionId); \n                    } \n                } catch (IOException e) { \n                    if (true != false) { \n                        assertEquals(true,false); \n                    } \n                } \n            } \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); \n            if (dataNodeId != dataNode) { \n                assertEquals(dataNodeId,dataNode); \n            } \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                if (dataNodeId != replicaId.getDataNodeId()) { \n                    assertEquals(dataNodeId,replicaId.getDataNodeId()); \n                } \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    if (partitionIds != null) { \n        if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { \n            assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); \n        } \n        for (int i = 0; i < partitionIds.size(); i++) { \n            PartitionId partitionId = partitionIds.get(i); \n            if (partitionId != null) { \n                if (partitionId.getReplicaIds() != null) { \n                    if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { \n                        assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); \n                    } \n                    for (ReplicaId replicaId : partitionId.getReplicaIds()) { \n                        if (replicaId != null) { \n                        } \n                    } \n                } \n                DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n                try { \n                    PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n                    if (partitionId != fetchedPartitionId) { \n                        assertEquals(partitionId,fetchedPartitionId); \n                    } \n                } catch (IOException e) { \n                    if (true != false) { \n                        assertEquals(true,false); \n                    } \n                } \n            } \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); \n            if (dataNodeId != dataNode) { \n                assertEquals(dataNodeId,dataNode); \n            } \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                if (dataNodeId != replicaId.getDataNodeId()) { \n                    assertEquals(dataNodeId,replicaId.getDataNodeId()); \n                } \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    if (partitionIds != null) { \n        if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { \n            assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); \n        } \n        for (int i = 0; i < partitionIds.size(); i++) { \n            PartitionId partitionId = partitionIds.get(i); \n            if (partitionId != null) { \n                if (partitionId.getReplicaIds() != null) { \n                    if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { \n                        assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); \n                    } \n                } \n                DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n                try { \n                    PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n                    if (partitionId != fetchedPartitionId) { \n                        assertEquals(partitionId,fetchedPartitionId); \n                    } \n                } catch (IOException e) { \n                    if (true != false) { \n                        assertEquals(true,false); \n                    } \n                } \n                if (partitionId.getReplicaIds() != null) { \n                    for (ReplicaId replicaId : partitionId.getReplicaIds()) { \n                        if (replicaId != null) { \n                        } \n                    } \n                } \n            } \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); \n            if (dataNodeId != dataNode) { \n                assertEquals(dataNodeId,dataNode); \n            } \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                if (dataNodeId != replicaId.getDataNodeId()) { \n                    assertEquals(dataNodeId,replicaId.getDataNodeId()); \n                } \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    if (partitionIds != null) { \n        if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { \n            assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); \n        } \n        for (int i = 0; i < partitionIds.size(); i++) { \n            PartitionId partitionId = partitionIds.get(i); \n            if (partitionId != null) { \n                if (partitionId.getReplicaIds() != null) { \n                    if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { \n                        assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); \n                    } \n                    for (ReplicaId replicaId : partitionId.getReplicaIds()) { \n                        if (replicaId != null) { \n                        } \n                    } \n                } \n                DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n                try { \n                    PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n                    if (partitionId != fetchedPartitionId) { \n                        assertEquals(partitionId,fetchedPartitionId); \n                    } \n                } catch (IOException e) { \n                    if (true != false) { \n                        assertEquals(true,false); \n                    } \n                } \n            } \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); \n            if (dataNodeId != dataNode) { \n                assertEquals(dataNodeId,dataNode); \n            } \n            if (dataNodeId != null) { \n                for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                    if (dataNodeId != replicaId.getDataNodeId()) { \n                        assertEquals(dataNodeId,replicaId.getDataNodeId()); \n                    } \n                } \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    if (partitionIds != null) { \n        if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { \n            assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); \n        } \n        for (int i = 0; i < partitionIds.size(); i++) { \n            PartitionId partitionId = partitionIds.get(i); \n            if (partitionId != null) { \n                if (partitionId.getReplicaIds() != null) { \n                    if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { \n                        assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); \n                    } \n                } \n                DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n                try { \n                    PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n                    if (partitionId != fetchedPartitionId) { \n                        assertEquals(partitionId,fetchedPartitionId); \n                    } \n                } catch (IOException e) { \n                    if (true != false) { \n                        assertEquals(true,false); \n                    } \n                } \n                if (partitionId.getReplicaIds() != null) { \n                    for (ReplicaId replicaId : partitionId.getReplicaIds()) { \n                        if (replicaId != null) { \n                        } \n                    } \n                } \n            } \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); \n            if (dataNodeId != dataNode) { \n                assertEquals(dataNodeId,dataNode); \n            } \n            if (dataNodeId != null) { \n                for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                    if (dataNodeId != replicaId.getDataNodeId()) { \n                        assertEquals(dataNodeId,replicaId.getDataNodeId()); \n                    } \n                } \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    if (partitionIds != null) { \n        if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { \n            assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); \n        } \n        for (int i = 0; i < partitionIds.size(); i++) { \n            PartitionId partitionId = partitionIds.get(i); \n            if (partitionId != null) { \n                if (partitionId.getReplicaIds() != null) { \n                    if (partitionId.getReplicaIds().size() != testPartitionLayout.getReplicaCount()) { \n                        assertEquals(partitionId.getReplicaIds().size(),testPartitionLayout.getReplicaCount()); \n                    } \n                    for (ReplicaId replicaId : partitionId.getReplicaIds()) { \n                        if (replicaId != null) { \n                        } \n                    } \n                } \n                DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n                try { \n                    PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n                    if (partitionId != fetchedPartitionId) { \n                        assertEquals(partitionId,fetchedPartitionId); \n                    } \n                } catch (IOException e) { \n                    if (true != false) { \n                        assertEquals(true,false); \n                    } \n                } \n            } \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(),dataNode.getPort()); \n            if (dataNodeId != dataNode) { \n                assertEquals(dataNodeId,dataNode); \n            } \n            if (dataNodeId != null) { \n                for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                    if (dataNodeId != replicaId.getDataNodeId()) { \n                        assertEquals(dataNodeId,replicaId.getDataNodeId()); \n                    } \n                } \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    if (partitionIds != null) { \n        if (partitionIds.size() != testPartitionLayout.getPartitionCount()) { \n            assertEquals(partitionIds.size(),testPartitionLayout.getPartitionCount()); \n        } \n        for (int i = 0; i < partitionIds.size(); i++) { \n            PartitionId partitionId = partitionIds.get(i); \n            if (partitionId != null) { \n                if (partitionId.getReplicaIds() != null) { \n                    if (partitionId.getReplicaIds().']","[""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below, the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision must start with '"", ""' followed by the complete revised method and the code revision must be in the exact format described below and the code revision""]",True,True,False,False,False,False,False,False,0.0,0.0,0.631371468885425,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }']","['public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }']","['public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }', 'public void testFindAll() { String entityTypeId = ""MyEntityType""; Selection filter = Selection.FULL_SELECTION; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); if (actual != null && actual != Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()) { assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != null && response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null && result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != null) { if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null && result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != null && response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != null) { if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } } if (result != null && result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != null && response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null && result != ""Test"") { assertEquals(result,""Test""); } }']","['public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != null) { if (result != ""Test"") { assertEquals(result,""Test""); } } }']","['public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; String testString = ""Test""; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); if (response.getStatusInfo() != Response.Status.OK) { assertEquals(response.getStatusInfo(),Response.Status.OK); } if (result != ""Test"") { assertEquals(result,""Test""); } }']",[],False,True,False,False,False,False,False,False,0.13150611200778523,0.0,0.12139458754227869,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime']","['public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); if (0 != inErrorRequests.size()) { assertEquals(0,inErrorRequests.size()); } List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); if (0 != queuedRequests.size()) { assertEquals(0,queuedRequests.size()); } List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); if (2 != executedRequests.size()) { assertEquals(2,executedRequests.size()); } RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); if (""high priority"" != executedHigh.getKey()) { assertEquals(""high priority"",executedHigh.getKey()); } RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); if (""low priority"" != executedLow.getKey()) { assertEquals(""low priority"",executedLow.getKey()); } logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime']","['public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    if (0 != inErrorRequests.size()) { \n        assertEquals(0,inErrorRequests.size()); \n    } \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    if (0 != queuedRequests.size()) { \n        assertEquals(0,queuedRequests.size()); \n    } \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    if (2 != executedRequests.size()) { \n        assertEquals(2,executedRequests.size()); \n    } \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    if (""high priority"" != executedHigh.getKey()) { \n        assertEquals(""high priority"",executedHigh.getKey()); \n    } \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    if (""low priority"" != executedLow.getKey()) { \n        assertEquals(""low priority"",executedLow.getKey()); \n    } \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    if (0 != inErrorRequests.size()) { \n        assertEquals(0,inErrorRequests.size()); \n    } \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    if (0 != queuedRequests.size()) { \n        assertEquals(0,queuedRequests.size()); \n    } \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    if (2 != executedRequests.size()) { \n        assertEquals(2,executedRequests.size()); \n    } \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    if (""high priority"" != executedHigh.getKey()) { \n        assertEquals(""high priority"",executedHigh.getKey()); \n    } \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    if (""low priority"" != executedLow.getKey()) { \n        assertEquals(""low priority"",executedLow.getKey()); \n    } \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    if (0 != inErrorRequests.size()) { \n        assertEquals(0,inErrorRequests.size()); \n    } \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    if (0 != queuedRequests.size()) { \n        assertEquals(0,queuedRequests.size()); \n    } \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    if (2 != executedRequests.size()) { \n        assertEquals(2,executedRequests.size()); \n    } \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    if (""high priority"" != executedHigh.getKey()) { \n        assertEquals(""high priority"",executedHigh.getKey()); \n    } \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    if (""low priority"" != executedLow.getKey()) { \n        assertEquals(""low priority"",executedLow.getKey()); \n    } \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    if (0 != inErrorRequests.size()) { \n        assertEquals(0,inErrorRequests.size()); \n    } \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    if (0 != queuedRequests.size()) { \n        assertEquals(0,queuedRequests.size()); \n    } \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    if (2 != executedRequests.size()) { \n        assertEquals(2,executedRequests.size()); \n    } \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    if (""high priority"" != executedHigh.getKey()) { \n        assertEquals(""high priority"",executedHigh.getKey()); \n    } \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    if (""low priority"" != executedLow.getKey()) { \n        assertEquals(""low priority"",executedLow.getKey()); \n    } \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    if (0 != inErrorRequests.size()) { \n        assertEquals(0,inErrorRequests.size()); \n    } \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    if (0 != queuedRequests.size()) { \n        assertEquals(0,queuedRequests.size()); \n    } \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    if (2 != executedRequests.size()) { \n        assertEquals(2,executedRequests.size()); \n    } \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    if (""high priority"" != executedHigh.getKey()) { \n        assertEquals(""high priority"",executedHigh.getKey()); \n    } \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    if (""low priority"" != executedLow.getKey()) { \n        assertEquals(""low priority"",executedLow.getKey()); \n    } \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    if (0 != inErrorRequests.size()) { \n        assertEquals(0,inErrorRequests.size()); \n    } \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    if (0 != queuedRequests.size()) { \n        assertEquals(0,queuedRequests.size()); \n    } \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    if (2 != executedRequests.size()) { \n        assertEquals(2,executedRequests.size()); \n    } \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    if (""high priority"" != executedHigh.getKey()) { \n        assertEquals(""high priority"",executedHigh.getKey()); \n    } \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    if (""low priority"" != executedLow.getKey()) { \n        assertEquals(""low priority"",executedLow.getKey()); \n    } \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    if (0 != inErrorRequests.size()) { \n        assertEquals(0,inErrorRequests.size()); \n    } \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    if (0 != queuedRequests.size()) { \n        assertEquals(0,queuedRequests.size()); \n    } \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    if (2 != executedRequests.size()) { \n        assertEquals(2,executedRequests.size()); \n    } \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    if (""high priority"" != executedHigh.getKey()) { \n        assertEquals(""high priority"",executedHigh.getKey()); \n    } \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    if (""low priority"" != executedLow.getKey()) { \n        assertEquals(""low priority"",executedLow.getKey()); \n    } \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    if (0 != inErrorRequests.size()) { \n        assertEquals(0,inErrorRequests.size()); \n    } \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    if (0 != queuedRequests.size()) { \n        assertEquals(0,queuedRequests.size()); \n    } \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    if (2 != executedRequests.size()) { \n        assertEquals(2,executedRequests.size()); \n    } \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    if (""high priority"" != executedHigh.getKey()) { \n        assertEquals(""high priority"",executedHigh.getKey()); \n    } \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    if (""low priority"" != executedLow.getKey()) { \n        assertEquals(""low priority"",executedLow.getKey()); \n    } \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new']",[],False,False,False,False,False,False,False,False,0.4642647772828388,0.46416779761517996,0.4636119409517203,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet != null) { } if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet != null) { } if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet != null) { } if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet != null) { } if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet != null) { if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet != null) { if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } } if (keySet != null) { if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } } if (keySet != null) { if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } } if (keySet != null) { if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); } if (keySet != null) { if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet != null) { if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } } if (keySet != null) { if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } } if (keySet != null) { if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet != null) { if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } } if (keySet != null) { if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } } if (keySet != null) { if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } } }']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); if (keySet.getAuthenticationKey().length != keySetDto.getAuthenticationKey().length) { assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); } if (keySet.getEncryptionKey().length != keySetDto.getEncryptionKey().length) { assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } if (keySet.getAuthenticationKey()[0] != keySetDto.getAuthenticationKey()[0]) { assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } if (keySet.getEncryptionKey()[0] != keySetDto.getEncryptionKey()[0]) { assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),Ds3DocSpecEmptyImpl.getInstance()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),Ds3DocSpecEmptyImpl.getInstance()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),Ds3DocSpecEmptyImpl.getInstance()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),Ds3DocSpecEmptyImpl.getInstance()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), Ds3DocSpecEmptyImpl.INSTANCE); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), Ds3DocSpecEmptyImpl.INSTANCE); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl(ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl(ImmutableMap.of(),ImmutableMap.of(""key"", ""value""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl(ImmutableMap.of(""key"", ""value""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), Ds3DocSpecEmptyImpl.INSTANCE); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(), new Ds3DocSpecEmptyImpl(ImmutableMap.of(""key"", ""value""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of(""request"", ""ds3_request* request""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(""ds3_client"", ""ds3_client* client""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of(""ds3_list_bucket_result_response"", ""ds3_list_bucket_result_response** response""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(""ds3_client"", ""ds3_client* client"", ""ds3_request"", ""ds3_request* request""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of(""ds3_client"", ""ds3_client* client"", ""ds3_request"", ""ds3_request* request"", ""ds3_list_bucket_result_response"", ""ds3_list_bucket_result_response** response""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(""ds3_client"", ""ds3_client* client"", ""ds3_request"", ""ds3_request* request"", ""ds3_list_bucket_result_response"", ""ds3_list_bucket_result_response** response""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of(""ds3_client"", ""ds3_client* client""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != null) { if (expectedOutput != output) { assertEquals(expectedOutput,output); } } }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Map<String,Object> testMap = new HashMap<>(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; if (expectedOutput != output) { assertEquals(expectedOutput,output); } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.5094262041005466,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(""Status not Up"", VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(""Status not Up"", VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(""Status not Up"", VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(""Status not Up"", VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(""Status not NonOperational"", VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(""Status not NonOperational"", VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(""Status not NonOperational"",VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }']","['public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { VDSStatus.Up.assertEquals(vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up, vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { vds.getStatus(); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { VDSStatus.Up.equals(vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { if (VDSStatus.Up != vds.getStatus()) { } } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { } } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { vds.getStatus(); VDSStatus.Up; } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { VDSStatus.Up.equals(vds.getStatus()); VDSStatus.Up; } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { if (VDSStatus.Up.equals(vds.getStatus())) { } } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { VDSStatus.Up; vds.getStatus(); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }']","['public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) {  } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(VDSStatus.Up == vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(vds.getStatus() == VDSStatus.Up); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(vds.getStatus() == VDSStatus.Up); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(vds.getStatus() == VDSStatus.Up); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(VDSStatus.Up == vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(VDSStatus.Up == vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) {  Assert.assertTrue(vds.getStatus() == VDSStatus.Up); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(vds.getStatus() == VDSStatus.Up); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(vds.getStatus() == VDSStatus.Up); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { Assert.assertTrue(vds.getStatus() == VDSStatus.NonOperational); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(VDSStatus.Up == vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertTrue(VDSStatus.Up == vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { Assert.assertTrue(VDSStatus.NonOperational == vds.getStatus()); } }']","['public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) {  } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { vds.setStatus(VDSStatus.Up); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { Assert.assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { vds.setStatus(VDSStatus.Up); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) {  } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { vds.setStatus(VDSStatus.Up); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) {  } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { assertEquals(VDSStatus.Up,vds.getStatus()); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) {  } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) {  } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) {  } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }', 'public void testProcessSpecialSoftwareCapabilities() { VDS vds = new VDS(); vds.setSupportedEmulatedMachines(""pc-1.0""); vds.setStatus(VDSStatus.Up); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { vds.setStatus(VDSStatus.Up); } vds.setKvmEnabled(Boolean.TRUE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.Up != vds.getStatus()) { vds.setStatus(VDSStatus.Up); } vds.setKvmEnabled(Boolean.FALSE); virtStrategy.processSoftwareCapabilities(vds); if (VDSStatus.NonOperational != vds.getStatus()) { assertEquals(VDSStatus.NonOperational,vds.getStatus()); } }']",True,False,False,True,False,False,False,False,0.0,0.6713129684423363,0.4984390309259902,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (groups.size() != 1) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(1, groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (groups.size() != 1) { assertEquals(1, groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean condition = groups.size() != 1; assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (groups.size() != 1) { assertEquals(1, groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean condition = groups.size() != 1; assertEquals(1, groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (groups.size() != 1) { boolean condition = groups.size() != 1; assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean condition = groups.size() != 1; assertEquals(1, groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (groups.size() != 1) { boolean condition = groups.size() != 1; assertEquals(1, groups.size()); } }']","['public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(1, groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(),1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(1,groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(),1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(1,groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(),1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(1, groups.size()); } }']","['public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(1, groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean expected = 1 != groups.size(); assertEquals(groups.size() != 1, expected); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean expected = 1 != groups.size(); assertEquals(groups.size() != 1, expected); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean actual = groups.size() != 1; boolean expected = 1 != groups.size(); assertEquals(groups.size() != 1, expected); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean actual = groups.size() != 1; boolean expected = 1 != groups.size(); assertEquals(groups.size() != 1, expected); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean actual = groups.size() != 1; boolean expected = 1 != groups.size(); assertEquals(groups.size() != 1, expected); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean actual = groups.size() != 1; boolean expected = 1 != groups.size(); assertEquals(groups.size() != 1, expected); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean actual = groups.size() != 1; boolean expected = 1 != groups.size(); assertEquals(groups.size() != 1, expected); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { boolean actual = groups.size() != 1; boolean expected = 1 != groups.size(); assertEquals(groups.size() != 1, expected); } }']","['public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(), 1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assert groups.size() == 1; } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assert 1 == groups.size(); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assert groups.size() == 1; } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assert 1 == groups.size(); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(1, groups.size()); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assert groups.size() == 1; } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assert 1 == groups.size(); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assertEquals(groups.size(),1); } }', 'public void testListSecurityGroups() { HttpRequest list = HttpRequest.builder().method(""GET"").endpoint(URI.create(""<LINK_0>"")).headers(ImmutableMultimap.<String,String>builder().put(""Accept"",""application/json"").put(""X-Auth-Token"",authToken).build()).build(); HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload(payloadFromResource(""/securitygroup_list.json"")).build(); Builder<HttpRequest,HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest,HttpResponse>builder(); requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess); requestResponseMap.put(extensionsOfNovaRequest,extensionsOfNovaResponse); requestResponseMap.put(list,listResponse).build(); SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get(); Set<SecurityGroup> groups = extension.listSecurityGroups(); if (1 != groups.size()) { assert 1 == groups.size(); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); if (fs.getDeletedAtTimestamp() != null) { } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); }']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); assertNotNull(fs.getDeletedAtTimestamp()); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } assertNotNull(fs.getDeletedAtTimestamp()); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); assertNotNull(fs.getDeletedAtTimestamp()); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); if (fs.getDeletedAtTimestamp() != null) { assertNotNull(fs.getDeletedAtTimestamp()); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } if (fs.getDeletedAtTimestamp() != null) { assertNotNull(fs.getDeletedAtTimestamp()); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() != null) { assertNotNull(fs.getDeletedAtTimestamp()); assertAllInformationMatch(fs,session1InCourse1); } }']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assert fs.getDeletedAtTimestamp() != null; \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if(fs.getDeletedAtTimestamp() != null) { \n        assertAllInformationMatch(fs,session1InCourse1); \n    } \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if(fs.getDeletedAtTimestamp() != null) { \n        assertAllInformationMatch(fs,session1InCourse1); \n    } \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assert fs.getDeletedAtTimestamp() != null : fs.getDeletedAtTimestamp(); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if(fs.getDeletedAtTimestamp() != null) { \n        assertAllInformationMatch(fs,session1InCourse1); \n        assert fs.getDeletedAtTimestamp() != null; \n    } \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assert fs.getDeletedAtTimestamp() != null : fs.getDeletedAtTimestamp(); \n    assertAllInformationMatch(fs,session1InCourse1); \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if(fs.getDeletedAtTimestamp() != null) { \n        assertAllInformationMatch(fs,session1InCourse1); \n    } \n    assert fs.getDeletedAtTimestamp() != null; \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assert fs.getDeletedAtTimestamp() != null : fs.getDeletedAtTimestamp(); \n    assertAllInformationMatch(fs,session1InCourse1); \n    assert fs.getDeletedAtTimestamp() != null; \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    assert fs.getDeletedAtTimestamp() != null; \n    assertAllInformationMatch(fs,session1InCourse1); \n    assert fs.getDeletedAtTimestamp() != null; \n}', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { \n    InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); \n    FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); \n    loginAsInstructor(instructor2OfCourse1.googleId); \n    String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; \n    GetFeedbackSessionsAction action = getAction(submissionParam); \n    FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); \n    if (1 != fsData.getFeedbackSessions().size()) { \n        assertEquals(1,fsData.getFeedbackSessions().size()); \n    } \n    FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); \n    if(fs.getDeletedAtTimestamp() != null) { \n        assertAllInformationMatch(fs,session1InCourse1); \n        assert fs.getDeletedAtTimestamp() != null; \n        assert fs.getDeletedAtTimestamp() != null; \n    } \n}']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if(fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if(fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); if(fs.getDeletedAtTimestamp() != null) { } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if(fs.getDeletedAtTimestamp() != null) assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if(fs.getDeletedAtTimestamp() != null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if(fs.getDeletedAtTimestamp() != null) assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); if (1 != fsData.getFeedbackSessions().size()) { assertEquals(1,fsData.getFeedbackSessions().size()); } FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); assertAllInformationMatch(fs,session1InCourse1); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.5492875839859339,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().syncUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().syncUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().await(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().awaitUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().await(1, TimeUnit.SECONDS); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().awaitUninterruptibly(1, TimeUnit.SECONDS); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().await(1, TimeUnit.SECONDS); if (channel.closeFuture().isDone()) { if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().awaitUninterruptibly(1, TimeUnit.SECONDS); if (channel.closeFuture().isDone()) { if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }']","['public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().syncUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.close().syncUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); if (channel.close().isDone()) { } if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); if (channel.close().isDone()) { channel.close().sync(); } if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); if (channel.close().isDone()) { channel.close().syncUninterruptibly(); } if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.close().sync(); channel.close().syncUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.close().sync(); if (channel.close().isDone()) { } if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.close().syncUninterruptibly(); if (channel.close().isDone()) { } if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }']","['public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().syncUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().syncUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().await(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().awaitUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().await(1, TimeUnit.SECONDS); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().awaitUninterruptibly(1, TimeUnit.SECONDS); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().await(1, TimeUnit.SECONDS); if (channel.closeFuture().isDone()) { if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close(); channel.closeFuture().awaitUninterruptibly(1, TimeUnit.SECONDS); if (channel.closeFuture().isDone()) { if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }']","['public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().syncUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().await(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().awaitUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().await(10, TimeUnit.SECONDS); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().awaitUninterruptibly(10, TimeUnit.SECONDS); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().syncUninterruptibly(10, TimeUnit.SECONDS); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().await(); channel.close().sync(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().syncUninterruptibly(); channel.close().awaitUninterruptibly(); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }', 'public void shouldDecreaseIdleWhenClosedOutsidePool() throws Throwable { Channel channel = newChannel(); tracker.channelCreated(channel,null); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } channel.close().await(10, TimeUnit.SECONDS); channel.close().syncUninterruptibly(10, TimeUnit.SECONDS); if (1 != tracker.inUseChannelCount(address)) { assertEquals(1,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } tracker.channelReleased(channel); if (0 != tracker.inUseChannelCount(address)) { assertEquals(0,tracker.inUseChannelCount(address)); } if (0 != tracker.idleChannelCount(address)) { assertEquals(0,tracker.idleChannelCount(address)); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""User resolver not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Selected resolver not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver must be null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver must be null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Selected resolver must be null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""User resolver must be null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver must be null"", manager.getUserSelectedResolver()); } }']","['public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""UserSelectedResolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(""Resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(""UserSelectedResolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""UserSelectedResolver is not null"",manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(""Resolver is not null"",manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(""UserSelectedResolver is not null"",manager.getUserSelectedResolver()); } }']","['public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""UserSelectedResolver is not null"",manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(""UserSelectedResolver is not null"",manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(""Resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver is not null as expected"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(""Resolver is not null as expected"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { org.junit.Assert assertNull(""UserSelectedResolver is not null as expected"", manager.getUserSelectedResolver()); } }']","['public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""User resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Selected resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Selected resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver is not null"", manager.getUserSelectedResolver()); } }', 'public void testGetUserSelectResolverNotSet() { MockEnabledModelResolver resolver1 = new MockEnabledModelResolver(); manager.add(resolver1,resolver1.getClass().getName() + ""1"","""",""""); MockEnabledModelResolver resolver2 = new MockEnabledModelResolver(); manager.add(resolver2,resolver2.getClass().getName() + ""2"","""",""""); MockEnabledModelResolver resolver3 = new MockEnabledModelResolver(); String resolver3Id = resolver3.getClass().getName() + ""3""; manager.add(resolver3,resolver3Id,"""",""""); if (manager.getUserSelectedResolver() != null) { assertNull(""Resolver not null"", manager.getUserSelectedResolver()); } }']",False,False,False,False,False,False,False,False,0.38584538549101743,0.38584538549101743,0.38628738115712746,0.38584538549101743
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""typedId must not be null"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""typedId is null"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId, ""typedId must not be null, value: "" + value + "" type: "" + type); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""typedId must not be null, confidenceLevel: "" + confidenceLevel, typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""null typedId"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId, ""null value: "" + value); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId, ""null confidenceLevel: "" + confidenceLevel); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""null typedId with value: "" + value + "" type: "" + type + "" confidenceLevel: "" + confidenceLevel, typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }']","['public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""typedId is null"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""typedId must not be null"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""null typedId"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId, ""typedId is null and must not be null, this is a test condition that must be not null to be a typedId that is not null and is a typedId that must be not null to be a typedId that is not null and must be not null to be a typedId that must be not null and is a typedId that is not null and must not be null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typedId that must not be null and is a typedId that must be not null to be a typed']","['public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotEquals(null,typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotEquals(null,typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotEquals(null,typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotEquals(null,typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotEquals(null,typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }']","['public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""typedId is null"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""The typedId object is null"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId, ""The object is null and must not be null to test the method testEquals() of the TypedId object"" ); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""The object typedId is null and must not be null"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""The object typedId is null and must not be null to test the method testEquals of the TypedId object"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId, ""The object typedId is null and must not be null to test the method testEquals() of the TypedId object"" ); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(""The object typedId is null"", typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); if (null == typedId) { assertNotNull(typedId); } if (""string"" == typedId) { assertNotEquals(""string"",typedId); } if (typedId == new TypedId(""otherValue"",type,confidenceLevel)) { assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); } if (typedId == new TypedId(value,""otherType"",confidenceLevel)) { assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); } if (typedId == new TypedId(value,type,0.8f)) { assertNotEquals(typedId,new TypedId(value,type,0.8f)); } if (typedId != new TypedId(value,type,confidenceLevel)) { assertEquals(typedId,new TypedId(value,type,confidenceLevel)); } }']",False,False,False,False,False,False,False,False,0.2904695714913797,0.27621566174986545,0.2607490819358829,0.2904695714913797
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
