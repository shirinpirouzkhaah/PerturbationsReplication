Llama3.3_70B_IndependentSwapCF_response,Llama3.3_70B_IndependentSwapCF_mitigation_response,Llama3.3_70B_IndependentSwapCF_inline_response,Llama3.3_70B_IndependentSwapCF_CoT_response,Llama3.3_70B_IndependentSwapCF_EXM,Llama3.3_70B_IndependentSwapCF_mitigation_EXM,Llama3.3_70B_IndependentSwapCF_inline_EXM,Llama3.3_70B_IndependentSwapCF_CoT_EXM,Llama3.3_70B_IndependentSwapCF_retrieval,Llama3.3_70B_IndependentSwapCF_mitigation_retrieval,Llama3.3_70B_IndependentSwapCF_inline_retrieval,Llama3.3_70B_IndependentSwapCF_CoT_retrieval,Llama3.3_70B_IndependentSwapCF_bleu,Llama3.3_70B_IndependentSwapCF_mitigation_bleu,Llama3.3_70B_IndependentSwapCF_inline_bleu,Llama3.3_70B_IndependentSwapCF_CoT_bleu
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }']","['private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }']","['private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = System.currentTimeMillis(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = System.currentTimeMillis(); serviceListeners.cleanUp(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = currentTime; serviceListeners.cleanUp(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = System.currentTimeMillis(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = System.currentTimeMillis(); serviceListeners.cleanUp(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = currentTime; serviceListeners.cleanUp(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = System.currentTimeMillis(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = currentTime; serviceListeners.cleanUp(); } }']","['private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = System.currentTimeMillis(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = System.currentTimeMillis(); serviceListeners.cleanUp(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); } lastCacheCleanupMillis = System.currentTimeMillis(); }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = currentTime; serviceListeners.cleanUp(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = System.currentTimeMillis(); serviceListeners.cleanUp(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = System.currentTimeMillis(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = currentTime; serviceListeners.cleanUp(); } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { serviceListeners.cleanUp(); lastCacheCleanupMillis = currentTime; } }', 'private void serviceCacheCleanup() { long updateTime = lastCacheCleanupMillis + (DataServiceConstants.STREAMING_CACHE_CLEANUP_INTERVAL_SECONDS * 1000); long currentTime = System.currentTimeMillis(); if (updateTime <= currentTime) { lastCacheCleanupMillis = System.currentTimeMillis(); serviceListeners.cleanUp(); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ; ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertTerminated(); ; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ; ts.assertTerminated(); ; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ; ; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ; ; ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertTerminated(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ; ts.assertTerminated(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ; ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }']","['public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated() ; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated();; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated();;; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated();;;; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ;;; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ;;;; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ;;;;; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ;;;;;; ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }']","['public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertError(TestException.class); ts.assertTerminated(); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertErrorMessage(""boo""); ts.assertTerminated(); ts.assertError(TestException.class); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); ts.assertTerminated(); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertErrorMessage(""boo""); ts.assertError(TestException.class); ts.assertTerminated(); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertErrorMessage(""boo""); ts.assertError(TestException.class); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertError(TestException.class); ts.assertTerminated(); ts.assertErrorMessage(""boo""); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertErrorMessage(""boo""); ts.assertTerminated(); ts.assertError(TestException.class); }', 'public void testErrorReceived() { TestException ex = new TestException(""boo""); TestObserver<Object> ts = new TestObserver<Object>(); Flowable.error(ex).ignoreElements().subscribe(ts); ts.assertNoValues(); ts.assertTerminated(); ts.assertError(TestException.class); ts.assertErrorMessage(""boo""); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ArrayList<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<String>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<String>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ArrayList<String> items = new ArrayList<String>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); dataProvider = DataProvider.ofCollection(items); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); dataProvider = DataProvider.ofCollection(items); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); }']","['public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ArrayList<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ArrayList<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { List<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ArrayList<String> items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }', 'public void init() { items = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(items); dataView = new ListDataViewImpl(dataController); }']","['public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); items dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); items = ITEMS; dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); List items = new ArrayList<>(ITEMS); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); List items = ITEMS; dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); items = new ArrayList<>(ITEMS); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); items = ITEMS; dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); dataProvider = DataProvider.ofCollection(ITEMS); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); items = new ArrayList<>(ITEMS); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); dataProvider = DataProvider.ofCollection(ITEMS); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); List items = new ArrayList<>(ITEMS); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); dataProvider = DataProvider.ofCollection(ITEMS); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); items = ITEMS; dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }', 'public void init() { ITEMS = new ArrayList<>(Arrays.asList(""first"",""middle"",""last"")); items = new ArrayList<>(ITEMS); dataController = new DataControllerStub(); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); dataProvider = DataProvider.ofCollection(ITEMS); dataView = new ListDataViewImpl(dataController); }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.2710903487270211,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException, JsonParseException,JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); try { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } catch (IOException e) { } }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); try { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } catch (IOException e) { throw new JsonProcessingException(e); } }', 'public void testSerde() throws IOException, JsonParseException,JsonMappingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); try { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } catch (IOException e) { throw new JsonParseException(e); } }', 'public void testSerde() throws IOException, JsonParseException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); try { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } catch (IOException e) { throw new JsonMappingException(e); } }', 'public void testSerde() throws IOException, JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }']","['public void testSerde() throws IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException, JsonParseException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException, JsonMappingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException, JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException, JsonParseException, JsonMappingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException, JsonParseException, JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException, JsonMappingException, JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException, JsonParseException, JsonMappingException, JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException { try { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } catch (Exception e) { } }', 'public void testSerde() throws IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); try { Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); } catch (Exception e) { } }']","['public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonMappingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException,IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonMappingException,JsonProcessingException,IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }']","['public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException,IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonProcessingException,IOException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws JsonParseException,JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException,JsonParseException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }', 'public void testSerde() throws IOException,JsonMappingException,JsonProcessingException { SketchEstimateWithErrorBounds est = new SketchEstimateWithErrorBounds(100.0,101.5,98.5,2); ObjectMapper mapper = new DefaultObjectMapper(); Assert.assertEquals(est,mapper.readValue(mapper.writeValueAsString(est),SketchEstimateWithErrorBounds.class)); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }']","['public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }']","['public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); MaxwellAbstractRowsEvent e = new MaxwellAbstractRowsEvent(); e = null; assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellAbstractRowsEvent e = new MaxwellAbstractRowsEvent(); e = null; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); MaxwellAbstractRowsEvent e = new MaxwellAbstractRowsEvent(); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellAbstractRowsEvent e = null; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); MaxwellAbstractRowsEvent e = new MaxwellAbstractRowsEvent(); list = getRowsForSQL(filter,insertSQL,createDBs); e = null; assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellAbstractRowsEvent e = new MaxwellAbstractRowsEvent(); MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); e = null; assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); MaxwellAbstractRowsEvent e = new MaxwellAbstractRowsEvent(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); e = null; }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellAbstractRowsEvent e = new MaxwellAbstractRowsEvent(); MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); e = null; assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }', 'public void testExcludeTable() throws Exception { List<RowMap> list; MaxwellFilter filter = new MaxwellFilter(); filter.excludeTable(""minimal""); list = getRowsForSQL(filter,insertSQL,createDBs); MaxwellAbstractRowsEvent e = new MaxwellAbstractRowsEvent(); e = null; assertThat(list.size(),is(1)); assertThat(list.get(0).getTable(),is(""bars"")); }']",[],False,False,False,False,True,True,True,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession);  loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }']","['public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); loadRootFolder(); }']","['public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadata(mSession); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadata(mSession); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadata(mSession); loadRootFolder(); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadata(mSession); if(true) loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadata(mSession); if(false) loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadata(mSession); loadRootFolder(); loadRootFolder(); loadRootFolder(); }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadata(mSession); loadRootFolder(); return; }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadata(mSession); loadRootFolder(); loadRootFolder(); return; }', 'public void onAuthCreated(BoxAuthentication.BoxAuthenticationInfo info) { mFileApi = new BoxApiFile(mSession); mFolderApi = new BoxApiFolder(mSession); mMetadataApi = new BoxApiMetadata(mSession); }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.8801117367933934,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }']","['public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } int result = 1; final int prime = 31; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((registry == null) ? 0 : registry.hashCode()); result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', '@Override public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } int result = 1; final int prime = 31; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((registry == null) ? 0 : registry.hashCode()); result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', '@Override public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } int result = 1; return result; }', '@Override public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } int result = 1; return result; }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } int result = 1; final int prime = 31; return result; }', '@Override public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } int result = 1; final int prime = 31; return result; }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } int result = 1; final int prime = 31; result = prime * result; return result; }', '@Override public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } int result = 1; final int prime = 31; result = prime * result; return result; }']","['public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); }', 'public int hashCode() { return Objects.hash(getRegistry(), getId(), getVersion(), 1, 31, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.of(_timeout.getMillis(), TimeUnit.MILLISECONDS),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.of(_timeout.getMillis(), TimeUnit.MILLISECONDS),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.of(_timeout.getMillis(), TimeUnit.MILLISECONDS),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.of(_timeout.getMillis(), TimeUnit.MILLISECONDS),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.of(_timeout.getMillis(), TimeUnit.MILLISECONDS),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }']","['private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), (Logger) s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Duration timeout = Duration.ofMillis(_timeout.getMillis()); final Script command = new Script(_versionstringpath, timeout, s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, _timeout.getMillis() == 0 ? Duration.ofMillis(_timeout.getMillis()) : Duration.ofMillis(_timeout.getMillis()), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Duration timeout = _timeout.getMillis() == 0 ? Duration.ofMillis(_timeout.getMillis()) : Duration.ofMillis(_timeout.getMillis()); final Script command = new Script(_versionstringpath, timeout, s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Duration timeout = Duration.ofMillis(_timeout.getMillis()); final Script command = new Script(_versionstringpath, timeout, (Logger) s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, _timeout.getMillis() == 0 ? Duration.ofMillis(_timeout.getMillis()) : Duration.ofMillis(_timeout.getMillis()), (Logger) s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Duration timeout = _timeout.getMillis() == 0 ? Duration.ofMillis(_timeout.getMillis()) : Duration.ofMillis(_timeout.getMillis()); final Script command = new Script(_versionstringpath, timeout, (Logger) s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Duration timeout = Duration.ofMillis(_timeout.getMillis()); final Script command = new Script(_versionstringpath, timeout, s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }']","['private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, _timeout, s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, _timeout.getMillis(), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, _timeout, s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, _timeout.getMillis(), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }']","['private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()),s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), (Logger) s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Duration timeout = Duration.ofMillis(_timeout.getMillis()); final Script command = new Script(_versionstringpath, timeout, s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Duration timeout = Duration.ofMillis(_timeout.getMillis()); final Script command = new Script(_versionstringpath, timeout, (Logger) s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), (Logger) s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Duration timeout = Duration.ofMillis(_timeout.getMillis()); final Script command = new Script(_versionstringpath, timeout, s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Duration timeout = Duration.ofMillis(_timeout.getMillis()); final Script command = new Script(_versionstringpath, timeout, (Logger) s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }', 'private Map<String,String> getVersionStrings() { final KeyValueInterpreter kvi = new KeyValueInterpreter(); final Script command = new Script(_versionstringpath, Duration.ofMillis(_timeout.getMillis()), (Logger) s_logger); final String result = command.execute(kvi); if (result == null) { return kvi.getKeyValues(); } else { return new HashMap<String,String>(1); } }']",False,False,True,False,False,False,False,False,0.6569645143306131,0.6983907592879417,0.0,0.6983907592879417
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & (TRANSACTION_TABLE_BUCKET_COUNT - 1)); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) 0; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = 0; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) 1; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK;  rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) -1; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = 1; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = -1; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) 2; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }']","['public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 1); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0xFF); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0x1); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT)); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0x0); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & -1); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0xFF); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 1); rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }']","['public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & (TRANSACTION_TABLE_BUCKET_COUNT - 1)); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) (beginTS / SIConstants.TRASANCTION_INCREMENT); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0xFF); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0x1); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0x3); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0x7); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0x0); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0x1F); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & 0xFF); if (TRANSACTION_TABLE_BUCKET_COUNT < 0xFF) rowKey[0] = (byte) (TRANSACTION_TABLE_BUCKET_COUNT - 1); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) ((beginTS / SIConstants.TRASANCTION_INCREMENT) & (TRANSACTION_TABLE_BUCKET_COUNT - 1) & 0xFF); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }']","['public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = 2; Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) 2; Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = 2; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = 2; rowKey[0] = 2; Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) 2; rowKey[0] = (byte) (2); Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = 2; rowKey[0] = (byte) 2; Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) (2); rowKey[0] = 2; Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = (byte) 2; rowKey[0] = 2; Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }', 'public static byte[] getRowKey(long txnId) { byte[] rowKey = new byte[9]; long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK; rowKey[0] = 2; Bytes.longToBytes(beginTS, rowKey, 1); return rowKey; }']",False,False,True,False,False,False,False,False,0.8318180062062374,0.7759071335214403,0.0,0.6771164277807228
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; int hash = 1; hash = hash * prime + (int) (delegate.hashCode()); return hash; }', 'public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; int hash = 1; return hash; }', 'public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; return prime; }', 'public int hashCode() { return this.delegate.hashCode(); } int hash = 1; return hash; }', 'public int hashCode() { return this.delegate.hashCode(); } return 1; }', 'public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; int hash = 1; hash = hash * prime + (int) (delegate.hashCode()); }', 'public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; int hash = 1; return this.delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); } return this.delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; return this.delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }']","['public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; int hash = 1; hash = hash * prime + (int) (delegate.hashCode()); return hash; }', 'public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; int hash = 1; return hash; }', 'public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; return prime; }', 'public int hashCode() { return this.delegate.hashCode(); } int hash = 1; hash = hash * 31 + (int) (delegate.hashCode()); return hash; }', 'public int hashCode() { return this.delegate.hashCode(); } int hash = 1; return hash; }', 'public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; int hash = 1; hash = hash * prime + prime; return hash; }', 'public int hashCode() { return this.delegate.hashCode(); } return 31; }', 'public int hashCode() { return this.delegate.hashCode(); } final int prime = 31; return prime + (int) (delegate.hashCode()); }', 'public int hashCode() { return this.delegate.hashCode(); } int hash = 1; return hash + (int) (delegate.hashCode()); }', 'public int hashCode() { return this.delegate.hashCode(); } return (int) (delegate.hashCode()); }']","['public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return (int) (delegate.hashCode()); }', 'public int hashCode() { return this.delegate.hashCode() * 31 + 1; }', 'public int hashCode() { return (int) (delegate.hashCode() * 31 + 1); }', 'public int hashCode() { return this.delegate.hashCode() + 1; }', 'public int hashCode() { return (int) (delegate.hashCode() + 1); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode() * 31; }', 'public int hashCode() { return (int) (delegate.hashCode() * 31); }', 'public int hashCode() { return this.delegate.hashCode() + this.delegate.hashCode(); }']","['public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }', 'public int hashCode() { return this.delegate.hashCode(); }', 'public int hashCode() { return delegate.hashCode(); }']",True,False,True,True,False,False,False,False,0.0,0.43146827293898643,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return newMergedSelectionSet().subFields(subFields).build(); \n }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<String>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return newMergedSelectionSet().subFields(subFields).build(); \n }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return new MergedSelectionSet().subFields(subFields).build(); \n }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return newMergedSelectionSet().subFields(subFields); \n }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return newMergedSelectionSet().build(); \n }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return newMergedSelectionSet(); \n }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return MergedSelectionSet().subFields(subFields).build(); \n }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return MergedSelectionSet().build(); \n }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return new MergedSelectionSet().subFields(subFields); \n }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \n Map<String,MergedField> subFields = new LinkedHashMap<>(); \n for (Field field : mergedField.getFields()) { \n if (field.getSelectionSet() == null) { \n continue; \n } \n this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n } \n return newMergedSelectionSet subFields(subFields).build(); \n }']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<String>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); for (Field field : mergedField.getFields()) { if (field.getSelectionSet() == null) { continue; } this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); } return newMergedSelectionSet().subFields(subFields).build(); }']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn new MergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn MergedSelectionSet.builder().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn new MergedSelectionSet().subFields(subFields); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn newMergedSelectionSet().subFields(subFields); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn MergedSelectionSet.builder().subFields(subFields); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn new MergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn newMergedSelectionSet().subFields(subFields); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \nSet<String> visitedFragments = new LinkedHashSet<>(); \nMap<String,MergedField> subFields = new LinkedHashMap<>(); \nfor (Field field : mergedField.getFields()) { \n    if (field.getSelectionSet() == null) { \n        continue; \n    } \n    this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n} \nreturn MergedSelectionSet.builder().subFields(subFields).build(); \n}']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<String>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return new MergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return newMergedSelectionSet().subFields(subFields); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,MergedField mergedField) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    for (Field field : mergedField.getFields()) { \n        if (field.getSelectionSet() == null) { \n            continue; \n        } \n        this.collectFields(parameters,field.getSelectionSet(),visitedFragments,subFields); \n    } \n    return newMergedSelectionSet().subFields(subFields).build(); \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<String>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<String,MergedField>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return new MergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    Set<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<String>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return new MergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { Set<String> visitedFragments = new LinkedHashSet<>(); Map<String,MergedField> subFields = new LinkedHashMap<>(); this.collectFields(parameters,selectionSet,visitedFragments,subFields); return newMergedSelectionSet().subFields(subFields).build(); }']","['public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return new MergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields).build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    MergedSelectionSet selectionSet = newMergedSelectionSet(); \n    selectionSet = selectionSet.subFields(subFields); \n    return selectionSet.build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    collectFields(parameters,selectionSet,visitedFragments,subFields); \n    MergedSelectionSet selectionSet = newMergedSelectionSet(); \n    selectionSet = selectionSet.subFields(subFields); \n    return selectionSet.build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return newMergedSelectionSet().subFields(subFields); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    collectFields(parameters,selectionSet,visitedFragments,subFields); \n    return new MergedSelectionSet().subFields(subFields); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    this.collectFields(parameters,selectionSet,visitedFragments,subFields); \n    MergedSelectionSet selectionSet = new MergedSelectionSet(); \n    selectionSet = selectionSet.subFields(subFields); \n    return selectionSet.build(); \n}', 'public MergedSelectionSet collectFields(FieldCollectorParameters parameters,SelectionSet selectionSet) { \n    LinkedHashSet<String> visitedFragments = new LinkedHashSet<>(); \n    Map<String,MergedField> subFields = new LinkedHashMap<>(); \n    collectFields(parameters,selectionSet,visitedFragments,subFields); \n    MergedSelectionSet selectionSet = new MergedSelectionSet(); \n    selectionSet = selectionSet.subFields(subFields); \n    return selectionSet.build(); \n}']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.150480643843573,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + Path.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.Path.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.Path.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + Path.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.Path.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }']","['static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }']","['static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); return Path.fromPortableString(prefs).equals(resourcePath); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { IPath expectedPath = Path.fromPortableString(JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE); IPath resourcePath = resource.getProjectRelativePath(); return expectedPath.equals(resourcePath); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; return Path.fromPortableString(prefs).equals(resource.getProjectRelativePath()); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { IPath expectedPath = Path.fromPortableString(JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE); return expectedPath.equals(resource.getProjectRelativePath()); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { return Path.fromPortableString(JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE).equals(resource.getProjectRelativePath()); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { IPath expectedPath = Path.fromPortableString(JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE); return expectedPath.equals(resource.getProjectRelativePath()); }']","['static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); return Path.fromPortableString(prefs).equals(resourcePath); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); return Path.fromPortableString(prefs).equals(resourcePath); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static boolean isJdtCoreSettingsResource(IResource resource) { String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(prefs); boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }']",True,True,False,True,False,False,False,False,0.0,0.0,0.8656030552541708,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH)); BufferedWriter bw = new BufferedWriter(fw)) { modelWriter = new PlainTextNaiveBayesModelWriter(model, bw); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); try (FileWriter fw = new FileWriter(new File(MODEL_PATH)); BufferedWriter bw = new BufferedWriter(fw)) { PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, bw); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); try (FileWriter fw = new FileWriter(new File(MODEL_PATH)); BufferedWriter bw = new BufferedWriter(fw)) { PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, bw); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH)); BufferedWriter bw = new BufferedWriter(fw)) { modelWriter = new PlainTextNaiveBayesModelWriter(model, bw); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); modelWriter.persist(); } }']","['static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }', 'static void writeModel(NaiveBayesModel model) throws IOException { ensureTextClassifierFolderExists(); PlainTextNaiveBayesModelWriter modelWriter; try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { modelWriter = new PlainTextNaiveBayesModelWriter(model,new BufferedWriter(fw)); modelWriter.persist(); } }']","['static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    PlainTextNaiveBayesModelWriter modelWriter; \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { \n        modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); \n        modelWriter.persist(); \n    } \n}', 'static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    PlainTextNaiveBayesModelWriter modelWriter; \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { \n        modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); \n        modelWriter.persist(); \n    } \n}', 'static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { \n        PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); \n        modelWriter.persist(); \n    } \n}', 'static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { \n        PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, new BufferedWriter(fw)); \n        modelWriter.persist(); \n    } \n}', 'static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH)); \n        BufferedWriter bw = new BufferedWriter(fw)) { \n        PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, bw); \n        modelWriter.persist(); \n    } \n}', 'static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { \n        try (BufferedWriter bw = new BufferedWriter(fw)) { \n            PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, bw); \n            modelWriter.persist(); \n        } \n    } \n}', 'static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { \n        try (BufferedWriter bw = new BufferedWriter(fw)) { \n            PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, bw); \n            modelWriter.persist(); \n        } \n    } \n}', 'static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH)); \n        BufferedWriter bw = new BufferedWriter(fw); \n        PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, bw)) { \n        modelWriter.persist(); \n    } \n}', 'static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH))) { \n        try (BufferedWriter bw = new BufferedWriter(fw); \n            PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, bw)) { \n            modelWriter.persist(); \n        } \n    } \n}', 'static void writeModel(NaiveBayesModel model) throws IOException { \n    ensureTextClassifierFolderExists(); \n    try (FileWriter fw = new FileWriter(new File(MODEL_PATH)); \n        BufferedWriter bw = new BufferedWriter(fw); \n        PlainTextNaiveBayesModelWriter modelWriter = new PlainTextNaiveBayesModelWriter(model, bw)) { \n        modelWriter.persist(); \n    } \n}']",[],False,False,False,False,False,False,False,False,0.8153551038173115,0.3464226178936948,0.8153551038173115,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new ArrayList<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new LinkedList<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new ArrayList<>(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new LinkedList<>(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new HashSet<>(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new ArrayList<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new HashSet<>(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new LinkedList<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new ArrayList<>(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new ArrayList<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new LinkedList<>(operatorSpecs); }']","['public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new ArrayList<>(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs.asList(); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return Collections.unmodifiableCollection(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return Collections.synchronizedCollection(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new HashSet<>(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new LinkedHashSet<>(operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new ArrayList<>(new HashSet<>(operatorSpecs)); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new LinkedHashSet<>(new ArrayList<>(operatorSpecs)); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return Collections.unmodifiableCollection(new ArrayList<>(operatorSpecs)); }']","['public Collection<OperatorSpec> getAllOperatorSpecs() { \n    Collection<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return operatorSpecs; \n}', 'public Set<OperatorSpec> getAllOperatorSpecs() { \n    Set<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return operatorSpecs; \n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() { \n    Collection<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return new HashSet<>(operatorSpecs); \n}', 'public Set<OperatorSpec> getAllOperatorSpecs() { \n    Set<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return new HashSet<>(operatorSpecs); \n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() { \n    Collection<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return operatorSpecs.stream().collect(Collectors.toSet()); \n}', 'public Set<OperatorSpec> getAllOperatorSpecs() { \n    Set<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return operatorSpecs.stream().collect(Collectors.toSet()); \n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() { \n    Collection<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return new ArrayList<>(operatorSpecs); \n}', 'public Set<OperatorSpec> getAllOperatorSpecs() { \n    Set<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return new ArrayList<>(operatorSpecs); \n}', 'public Collection<OperatorSpec> getAllOperatorSpecs() { \n    Collection<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return operatorSpecs.stream().collect(Collectors.toCollection(HashSet::new)); \n}', 'public Set<OperatorSpec> getAllOperatorSpecs() { \n    Set<OperatorSpec> operatorSpecs = new HashSet<>(); \n    Collection<InputStreamInternal> inputStreams = inStreams.values(); \n    for (InputStreamInternal stream : inputStreams) { \n        doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); \n    } \n    return operatorSpecs.stream().collect(Collectors.toCollection(HashSet::new)); \n}']","['public Collection<OperatorSpec> getAllOperatorSpecs() { Set<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream, (Set<OperatorSpec>) operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream, (Set<OperatorSpec>) operatorSpecs); } return new HashSet<>((Set<OperatorSpec>) operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new ArrayList<>((Set<OperatorSpec>) operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream, (Set<OperatorSpec>) operatorSpecs); } return new ArrayList<>((Set<OperatorSpec>) operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new HashSet<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return new HashSet<>((Set<OperatorSpec>) operatorSpecs); }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new ArrayList<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream,operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new ArrayList<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream, (Set<OperatorSpec>) operatorSpecs); } return operatorSpecs; }', 'public Collection<OperatorSpec> getAllOperatorSpecs() { Collection<OperatorSpec> operatorSpecs = new ArrayList<>(); Collection<InputStreamInternal> inputStreams = inStreams.values(); for (InputStreamInternal stream : inputStreams) { doGetOperatorSpecs((MessageStreamImpl) stream, (Set<OperatorSpec>) operatorSpecs); } return new ArrayList<>((Set<OperatorSpec>) operatorSpecs); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.6595087796160793,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> {ArrayType array = (ArrayType) t; s[0] = array;}); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> {ArrayType array = t; s[0] = array;}); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { s[0] = (ArrayType) t;}); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { s[0] = t;}); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> {ArrayType array = (ArrayType) t; s[0] = (ArrayType) array;}); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> {ArrayType array = t; s[0] = (ArrayType) array;}); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { s[0] = (ArrayType) t;}); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { s[0] = (ArrayType) t;}); assertNotNull(s[0]); }']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { s[0] = t; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { s[0] = (ArrayType) t; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { ArrayType array = t; s[0] = array; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { ArrayType array = (ArrayType) t; s[0] = array; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { ArrayType array = (ArrayType) t; s[0] = (ArrayType) array; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { ArrayType array = t; s[0] = (ArrayType) array; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { ArrayType array = (ArrayType) t; s[0] = array; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { ArrayType array = t; s[0] = array; }); assertNotNull(s[0]); }']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> s[0] = (ArrayType) t); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { s[0] = t; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { s[0] = (ArrayType) t; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { ArrayType array = t; s[0] = array; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { ArrayType array = (ArrayType) t; s[0] = array; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) s[0] = (ArrayType) t; }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if(t instanceof ArrayType) { s[0] = (ArrayType) t; } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { ArrayType array = (ArrayType) t; if array instanceof ArrayType { s[0] = array; } }); assertNotNull(s[0]); }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); final ArrayType[] s = new ArrayType[1]; ArrayType arrayType = type.asArrayType(); type.ifArrayType(t -> { if (ArrayType.class.isInstance(t)) s[0] = (ArrayType) t; }); assertNotNull(s[0]); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response.bufferEntity() != null) { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response != null) response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); if (response != null) return objectMapper.readTree(body); return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response.bufferEntity() != null) response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); if (response.bufferEntity() != null) return objectMapper.readTree(body); return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response != null) { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); if (response != null) { return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response.bufferEntity() != null) { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); } return null; }']","['private JsonNode parseRequestResponse(Response response) throws IOException { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response.bufferEntity() != null) { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response != null) response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response.bufferEntity() != null) { } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); if (response != null) { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response != null) { } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response.bufferEntity() != null) return null; ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); if (response != null) { String body = response.readEntity(String.class); return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response != null) { response.bufferEntity(); } ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }']","['private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response.bufferEntity() != null) { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); if (response.readEntity(String.class) != null) { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response != null) response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); if (body != null) return objectMapper.readTree(body); return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response.bufferEntity() != null) { ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); if (body != null) return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); if (body != null) { return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response != null) { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); return objectMapper.readTree(body); } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); if (body != null) { JsonNode jsonNode = objectMapper.readTree(body); return jsonNode; } return null; }', 'private JsonNode parseRequestResponse(Response response) throws IOException { if (response != null) { response.bufferEntity(); ObjectMapper objectMapper = new ObjectMapper(); String body = response.readEntity(String.class); if (body != null) return objectMapper.readTree(body); } return null; }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.7611606003349892,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final String text = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return text; }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final String loadResource = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return loadResource; }', 'public static String loadResource(final InputStream in) throws Exception { final String load = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return load; }', 'public static String loadResource(final InputStream in) throws Exception { final String output = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return output; }', 'public static String loadResource(final InputStream in) throws Exception { final String result = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return result; }', 'public static String loadResource(final InputStream in) throws Exception { final String finalResult = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return finalResult; }', 'public static String loadResource(final InputStream in) throws Exception { final String returnResult = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return returnResult; }']","['public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final String result = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return result; }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); final String result = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return result; }', 'public static String loadResource(final InputStream in) throws Exception { final char[] buf = new char[1024]; int len = 0; return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); final char[] buf = new char[1024]; int len = 0; return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); final char[] buf = new char[1024]; return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); final char[] buf = new char[1024]; int len = 0; final String result = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); return result; }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); final char[] buf = new char[1024]; int len = 0; final String result = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); text.append result; return text.toString(); }', 'public static String loadResource(final InputStream in) throws Exception { final StringBuilder text = new StringBuilder(); final char[] buf = new char[1024]; int len = 0; final String result = IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); text.append(result); return text.toString(); }']","['public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }', 'public static String loadResource(final InputStream in) throws Exception { return IOUtils.readLines(in, StandardCharsets.UTF_8).stream().collect(Collectors.joining(System.lineSeparator())); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias("""")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""default"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultCertificate"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemCertificate"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultPublicKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemPublicKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }']","['public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""primary"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""default"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""system"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""alias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""primaryKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultCertificate"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""primaryCertificate"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }']","['public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(null)).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(""defaultCertificate"").getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); if (key == null) { throw new TokenServiceException(""Key is null""); } } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = getPublicKey(getSigningKeyAlias(null)); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = getPublicKey(""defaultAlias""); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = getPublicKey(getSigningKeyAlias(""defaultAlias"")); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { if (getSigningKeyAlias(null) == null) { throw new TokenServiceException(""Alias is null""); } key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(null)).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { if (getSigningKeyAlias(null) == null) { throw new TokenServiceException(""Alias is null""); } key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(null)).getPublicKey(); if (key == null) { throw new TokenServiceException(""Key is null""); } } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }']","['public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias("""")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""default"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultPublicKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemPublicKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultCertificate"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { PublicKey key; boolean rc; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemCertificate"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }']",True,False,False,True,False,False,False,False,0.0,0.9095930632220222,0.9095930632220222,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.runAsync(() -> { }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.supplyAsync(() -> null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.runAsync(() -> { }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.supplyAsync(() -> null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.runAsync(() -> { }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.supplyAsync(() -> null); }']","['public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.runAsync(() -> { return null; }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.supplyAsync(() -> null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.runAsync(() -> null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.supplyAsync(() -> { return null; }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.runAsync(() -> { }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.supplyAsync(() -> { }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }']","['public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.runAsync(() -> { }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.supplyAsync(() -> null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.runAsync(() -> { }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.supplyAsync(() -> null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.runAsync(() -> { }); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.completedFuture(null); }', 'public CompletableFuture<Void> hideMapVersion(MapBean map) { MapVersion mapVersion = new MapVersion(); String id = map.getId(); mapVersion.setHidden(true); mapVersion.setId(map.getId()); fafApiAccessor.updateMapVersion(id,mapVersion); return CompletableFuture.supplyAsync(() -> null); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = null; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance;  fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel =(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = null; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; { } fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; ; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel =; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance;  fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; } fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = (ITmfStatisticsModel) null; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }']","['public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = null; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance;  fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = (null); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = (ITmfStatisticsModel) null; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = (ITmfStatisticsModel) (null); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = null; fProcessAll = (trace instanceof TmfExperiment); fModel = null; initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = null; initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); fModel = null; initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initInput(); fModel = null; initContent(parent); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); fModel = null; }']","['public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = new TmfStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; if (trace instanceof TmfExperiment) { fModel = new TmfStatisticsModel(); } fProcessAll = (trace instanceof TmfExperiment); initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = new TmfStatisticsModel(); if (trace instanceof TmfExperiment) { fProcessAll = true; } initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; if (trace instanceof TmfExperiment) { fModel = new TmfStatisticsModel(); fProcessAll = true; } initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = new TmfStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment) ? true : false; initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; if (trace instanceof TmfExperiment) { fProcessAll = true; } else { fModel = new TmfStatisticsModel(); } initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); if (trace instanceof TmfExperiment) { fModel = new TmfStatisticsModel(); } initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fModel = new TmfStatisticsModel(); fProcessAll = (trace instanceof TmfExperiment) ? true : false; if (trace instanceof TmfExperiment) { fProcessAll = true; } initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; if (trace instanceof TmfExperiment) { fModel = new TmfStatisticsModel(); fProcessAll = true; } else { fProcessAll = false; } initContent(parent); initInput(); }', 'public void init(Composite parent,String viewerName,ITmfTrace trace) { super.init(parent,viewerName); fCountInstance++; fTrace = trace; fInstanceNb = fCountInstance; fProcessAll = (trace instanceof TmfExperiment); fModel = new TmfStatisticsModel(); if (trace instanceof TmfExperiment) { fProcessAll = true; } initContent(parent); initInput(); }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.33680209563129027,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null"", new NullPointerException()); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null"", new IllegalArgumentException()); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { Objects.requireNonNull(eventData, ""eventData cannot be null.""); final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null"", new IllegalArgumentException(""eventData cannot be null"")); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""EventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""EventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""eventData cannot be null"", new NullPointerException()); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""EventData cannot be null"", new NullPointerException(""EventData cannot be null"")); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']","['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""EventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData is null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData must be provided.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null, a null is provided.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData is null, and must be provided to the method.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null. The method cannot be provided with null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null. The provided eventData is null and must be provided to the method.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null and must be provided to the method to be executed.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']","['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""EventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData is null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null"", eventData); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""EventData cannot be null"", eventData); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData is null"", eventData); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, () -> ""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, () -> ""EventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']","['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""eventData is null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""EventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""eventData is null and cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""The eventData object is null and cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""The object eventData cannot be null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""The eventData is null and must be a non null object.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""The object is null and must be non null: eventData.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""EventData object is null and must be non null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""eventData must be non null.""); } final int size; final EventDataImpl eventDataImpl = (EventDataImpl) eventData; try { size = getSize(eventDataImpl,events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US,""Size of the payload exceeded Maximum message size: %s kb"",this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']",True,False,True,False,False,False,False,False,0.0,0.5934595675036156,0.0,0.6409465015615763
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REG']","['private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REG']","['private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"", Integer.class.getName(), ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }']","['private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncrementalPayload payload = new PackageDataModelOracleIncrementalPayload(); addressModelFields.put(""org.Address"",new ModelField[] { new ModelField(""this"",""org.Address"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.SELF,FieldAccessorsAndMutators.ACCESSOR,""this""),new ModelField(""street"",""String"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_STRING),new ModelField(""homeAddress"",""Boolean"",ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_BOOLEAN),new ModelField(""number"",Integer.class.getName(),ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS,ModelField.FIELD_ORIGIN.DECLARED,FieldAccessorsAndMutators.BOTH,DataType.TYPE_NUMERIC_INTEGER) }); payload.setModelFields(addressModelFields); return payload; }', 'private PackageDataModelOracleIncrementalPayload createAddressPayload() { HashMap<String,ModelField[]> addressModelFields = new HashMap<String,ModelField[]>(); PackageDataModelOracleIncremental']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }']","['public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }']","['public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }']","['public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }', 'public DataSource call() throws Exception { try { Class.forName(CONNECTION_POOL_DRIVER); } catch (Exception ex) { throw new OseeDataStoreException(ex,""Error loading connection pool driver [%s]"",CONNECTION_POOL_DRIVER); } ObjectPool<Connection> connectionPool = new GenericObjectPool<Connection>(); ConnectionFactory connectionFactory = createConnectionFactory(dbInfo); @SuppressWarnings({ ""rawtypes"",""unchecked"" }) KeyedObjectPoolFactory statementPool = new GenericKeyedObjectPoolFactory(null); new PoolableConnectionFactory(connectionFactory,connectionPool,statementPool,null,false,true); DataSource dataSource = new PoolingDataSource(connectionPool); String poolId = dbInfo.getId(); PoolingDriver driver = poolingDriver.get(); driver.registerPool(poolId,connectionPool); return dataSource; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));; assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));; assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));; assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }']","['public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }']","['public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  pageProjectionOutput.getClass().getSimpleName(); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  String output = pageProjectionOutput.getClass().getSimpleName(); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  String output = pageProjectionOutput.getClass().getSimpleName();  assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  String output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName(); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  String output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName();  assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  String output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName(); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  String output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName(); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1));  String output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName();  output = pageProjectionOutput.getClass().getSimpleName(); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }']","['public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String planNodeId = ""7""; PageFunctionCompiler functionCompiler = new PageFunctionCompiler(createTestMetadataManager(),0); String stageId = ""20170707_223500_67496_zguwn.2""; String classSuffix = stageId + ""_"" + planNodeId; Supplier<PageProjection> projectionSupplier = functionCompiler.compileProjection(ADD_10_EXPRESSION,Optional.of(classSuffix)); PageProjection projection = projectionSupplier.get(); PageProjectionOutput pageProjectionOutput = projection.project(SESSION,new DriverYieldSignal(),createLongBlockPage(0),SelectedPositions.positionsRange(0,1)); assertTrue(pageProjectionOutput.getClass().getSimpleName().startsWith(""PageProjectionOutput_"" + stageId.replace(\'.\',\'_\') + ""_"" + planNodeId)); }', 'public void testGeneratedClassName() { String']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); if (client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags)) { } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); if (client == null) { } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } catch (IOException | InterruptedException e) { client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); if (client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags)) { client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }']","['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); if (client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags)) { } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags, 1); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags, new String[]{""1""}); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", new String[]{""1""}, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1, tags, hostname); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags, 1); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }']","['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); if (client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags)) { } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); return; } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); if (client == null) { return; } client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); return; } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } finally { } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); if (client == null) return; client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } catch (Exception e) { } }']","['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null) { return; } client.sendPipelineTrace(runFor(flowNode.getExecution()),flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; int stageDepth = 0; StepStartNode startNode = endNode.getStartNode(); String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if (directParentName == null) { directParentName = getStageName(node); } stageDepth++; } } if (directParentName == null) { directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if (run == null) { return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run,flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String,Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags,""stage_name"",getStageName(startNode)); TagsUtil.addTagToTags(tags,""parent_stage_name"",directParentName); TagsUtil.addTagToTags(tags,""stage_depth"",String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags,""result"",result); client.gauge(""jenkins.job.stage_duration"",getTime(startNode,endNode),hostname,tags); client.incrementCounter(""jenkins.job.stage_completed"",1,hostname,tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger,e,""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) != true) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) == false) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) != true) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) == false) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) != true) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) == false) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }']","['@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) != true) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) == false) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) != true) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) == false) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) != true) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) == false) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }']","['@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) != true) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) == false) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) { return false; } else { MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; } }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); boolean isCoordinator = MemberUtils.atLeastCoordinator(member); if (!isCoordinator) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) == false) { return false; } else { MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; } }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); boolean hasCoordinatorRole = MemberUtils.atLeastCoordinator(member); if (!hasCoordinatorRole) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member) != true) { return false; } else { MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; } }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); boolean isLeastCoordinator = MemberUtils.atLeastCoordinator(member); if (!isLeastCoordinator) { return false; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (!MemberUtils.atLeastCoordinator(member)) return false; MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }']","['@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { return true; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) return true; MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { return true; }  Game game = new GameDao().getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(new MemberDao().getMemberByUsername(removeOfficial)); game.addOfficial(new MemberDao().getMemberByUsername(addOfficial)); new GameDao().saveGame(game); return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) return true; MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); if (location != """") { game.setGameLocation(location); } gameDao.saveGame(game); return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { return true; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") game.setGameLocation(location); game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) return true; Game game = new GameDao().getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(new MemberDao().getMemberByUsername(removeOfficial)); game.addOfficial(new MemberDao().getMemberByUsername(addOfficial)); new GameDao().saveGame(game); return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { return true; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); if (location != """") { game.setGameLocation(location); } return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) return true; MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); if (location != """") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) { return true; } MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); if (location != """") { game.setGameLocation(location); } gameDao.saveGame(game); return false; }', '@ResponseBody public boolean updateGame(@PathVariable int id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if (MemberUtils.atLeastCoordinator(member)) return true; MemberDao memberDao = new MemberDao(); GameDao gameDao = new GameDao(); Game game = gameDao.getGameById(id, true); game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); if (location != """") game.setGameLocation(location); return false; }']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.8749766281017177
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refresh(); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refreshControl(); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refreshCombo(); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refreshControl(this.combo); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refreshCombo(this.combo); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refreshControl(this.combo, this.controller); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refreshCombo(this.combo, this.controller); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); this.controller.refresh(); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); this.controller.refreshControl(); }']","['protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); refresh(); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); } \nprotected void refresh() { if (!isEnabled()) { this.combo.setEnabled(false); } }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refresh(); } \nprotected void refresh() { if (!isEnabled()) { this.combo.setEnabled(false); } }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); } \nprotected void refresh() { if (!isEnabled()) { this.combo.setEnabled(false); } }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refresh(); } \nprotected void refresh() { if (!isEnabled()) { this.combo.setEnabled(false); } }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); } \nprotected void refresh() { if (!isEnabled()) { this.combo.setEnabled(false); } refresh(); }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refresh(); } \nprotected void refresh() { if (!isEnabled()) { this.combo.setEnabled(false); } }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); } \nprotected void refresh() { refresh(); if (!isEnabled()) { this.combo.setEnabled(false); } }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); refresh(); } \nprotected void refresh() { refresh(); if (!isEnabled()) { this.combo.setEnabled(false); } }', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); this.combo = comboViewer.getCombo(); this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); widgetFactory.paintBordersFor(parent); FormData comboFormData = new FormData(); comboFormData.right = new FormAttachment(100,0); comboFormData.left = new FormAttachment(0,LABEL_WIDTH); this.combo.setLayoutData(comboFormData); this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); } \nprotected void refresh() { if (!isEnabled()) { this.combo.setEnabled(false); } refresh(); }']","['protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n    if (!isEnabled()) { \n        this.combo.setEnabled(false); \n    } \n}', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n}', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    if (!isEnabled()) { \n        this.combo.setEnabled(false); \n    } \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n}', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n    refresh(); \n}', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    refresh(); \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n}', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n    if (!isEnabled()) { \n        refresh(); \n    } \n}', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    if (!isEnabled()) { \n        this.combo.setEnabled(false); \n        refresh(); \n    } \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n}', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    refresh(); \n    if (!isEnabled()) { \n        this.combo.setEnabled(false); \n    } \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n}', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n    refresh(); \n    if (!isEnabled()) { \n        this.combo.setEnabled(false); \n    } \n}', 'protected void createMainControl(Composite parent,IEEFFormContainer formContainer) { \n    EEFWidgetFactory widgetFactory = formContainer.getWidgetFactory(); \n    this.comboViewer = new ComboViewer(parent,SWT.READ_ONLY); \n    this.combo = comboViewer.getCombo(); \n    this.comboViewer.setContentProvider(ArrayContentProvider.getInstance()); \n    this.comboViewer.setLabelProvider(new EEFSelectLabelProvider()); \n    this.comboViewer.setData(FormToolkit.KEY_DRAW_BORDER,FormToolkit.TEXT_BORDER); \n    widgetFactory.paintBordersFor(parent); \n    FormData comboFormData = new FormData(); \n    comboFormData.right = new FormAttachment(100,0); \n    comboFormData.left = new FormAttachment(0,LABEL_WIDTH); \n    this.combo.setLayoutData(comboFormData); \n    if (!isEnabled()) { \n        refresh(); \n        this.combo.setEnabled(false); \n    } \n    this.controller = new EEFControllersFactory().createSelectController(this.description,this.variableManager,this.interpreter,this.editingDomain); \n}']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""geoPoint is null, warning to the caller""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,"" warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,"" warning info: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""geoPoint is null, info to caller""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,"" caller info: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,"" warning to caller: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""geoPoint is null, warning""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,"" info warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }']","['void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.e(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.e(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.e(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.e(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.w(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.e(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }']","['void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null, this is a warning info level message""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null, this is a warning info level message that happen""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null, warning info level message""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null, info level message""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null, this is a warning""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null, warning message""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null, info message""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null, this is a info level message that happen""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }', 'void update(ObservationPoint obsPoint,MapView mapView,boolean isMlsPointUpdate) { GeoPoint geoPoint = (isMlsPointUpdate) ? obsPoint.pointMLS : obsPoint.pointGPS; final Projection pj = mapView.getProjection(); if (geoPoint == null) { Log.i(LOG_TAG,""Caller error: geoPoint is null, this is a warning info level message that happen and is a warning""); return; } final Point point = pj.toPixels(geoPoint,null); final int size = mSize3px * 2; final Rect dirty = new Rect(point.x - size,point.y - size,point.x + size,point.y + size); dirty.offset(mapView.getScrollX(),mapView.getScrollY()); mapView.postInvalidate(dirty.left,dirty.top,dirty.right,dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint,point); } }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.48342075740290025,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }']","['public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); assertThat(logList).hasSize(2); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); assertThat(logList).hasSize(2); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); assertThat(logList).hasSize(2); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }']","['public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList.get(0)).isEqualTo(logEntry2); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList).hasSize(2); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); assertThat(logList).hasSize(2); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).hasSize(2); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList).hasSize(2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList.get(1)).isEqualTo(logEntry1); assertThat(logList).hasSize(2); assertThat(logList.get(0)).isEqualTo(logEntry2); }']","['public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); assertThat(logList.get(0)).isEqualTo(logEntry2); assertThat(logList.get(1)).isEqualTo(logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }', 'public static void testComparator() { final LogEntry logEntry2 = new LogEntry(200,LogType.FOUND_IT,""logEntry2 is more recent than logEntry1""); final LogEntry logEntry1 = new LogEntry(100,LogType.FOUND_IT,""logEntry1 is older than logEntry2""); final List<LogEntry> logList = new ArrayList<>(2); logList.add(logEntry1); logList.add(logEntry2); Collections.sort(logList,LogEntry.DESCENDING_DATE_COMPARATOR); assertThat(logList).containsExactly(logEntry2, logEntry1); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",!((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if(((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { assertTrue(""Check the migration logic."", true); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if(((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { assertTrue(""Check the migration logic."", true); } else { fail(""Check the migration logic.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if(((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { } else { fail(""Check the migration logic.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if(((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { } else { assertTrue(""Check the migration logic."",false); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if(((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { assertTrue(""Check the migration logic."", true); } else { fail(""Check the migration logic.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']","['public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",!((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if(((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { assertTrue(""Check the migration logic."", true); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if(((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { } else { fail(""Check the migration logic.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if(((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { assertTrue(""Check the migration logic."", true); } else { fail(""Check the migration logic.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if(((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { } else { fail(""Check the migration logic.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']","['public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() < 1); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() <= 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == -1); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() < 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() <= 1); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 1 - 1); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 1); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']","['public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { assertTrue(""Check the migration logic."", true); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0) { assertTrue(""Check the migration logic."", true); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0) { } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); }', 'public void testDRepresentationContainerRemovalMigrationDone() { DAnalysis analysis = null; ResourceSet set = new ResourceSetImpl(); try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } assertNotNull(""Check the representation file test data."",analysis); assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }']","['public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(), address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(), address.getInetSocketAddress()); }']","['public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }']","['public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(clonedAddress.getInetSocketAddress(),address.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(clonedAddress.getPort(),address.getPort()); assertEquals(address.getInetAddress(), clonedAddress.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }', 'public void addressCloneTest() throws Exception { AddressConstructor constructor = new AddressConstructor(Address.class); Address address = new Address(""172.16.16.1"",4223); Address clonedAddress = (Address) constructor.createNew(address); assertEquals(address.getHost(), clonedAddress.getHost()); assertEquals(address.getPort(), clonedAddress.getPort()); assertEquals(clonedAddress.getInetAddress(),address.getInetAddress()); assertEquals(address.getInetSocketAddress(), clonedAddress.getInetSocketAddress()); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }']","['private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }']","['protected File writeMergedFile(MergeResult<RawText> result, File workTree) throws FileNotFoundException,IOException { \n    File of = null; \n    MergeFormatter fmt = new MergeFormatter(); \n    FileOutputStream fos; \n    if (!inCore) { \n        of = new File(workTree,tw.getPathString()); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        of = File.createTempFile(""merge_"",""_temp"",null); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, MergeFormatter fmt) throws FileNotFoundException,IOException { \n    File of = null; \n    FileOutputStream fos; \n    if (!inCore) { \n        File workTree = db.getWorkTree(); \n        if (workTree == null) throw new UnsupportedOperationException(); \n        of = new File(workTree,tw.getPathString()); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        of = File.createTempFile(""merge_"",""_temp"",null); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, FileOutputStream fos) throws FileNotFoundException,IOException { \n    File of = null; \n    MergeFormatter fmt = new MergeFormatter(); \n    if (!inCore) { \n        File workTree = db.getWorkTree(); \n        if (workTree == null) throw new UnsupportedOperationException(); \n        of = new File(workTree,tw.getPathString()); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        of = File.createTempFile(""merge_"",""_temp"",null); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File of, FileOutputStream fos) throws FileNotFoundException,IOException { \n    MergeFormatter fmt = new MergeFormatter(); \n    if (!inCore) { \n        File workTree = db.getWorkTree(); \n        if (workTree == null) throw new UnsupportedOperationException(); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, MergeFormatter fmt, FileOutputStream fos) throws FileNotFoundException,IOException { \n    File of = null; \n    if (!inCore) { \n        File workTree = db.getWorkTree(); \n        if (workTree == null) throw new UnsupportedOperationException(); \n        of = new File(workTree,tw.getPathString()); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        of = File.createTempFile(""merge_"",""_temp"",null); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File workTree, MergeFormatter fmt) throws FileNotFoundException,IOException { \n    File of = null; \n    FileOutputStream fos; \n    if (!inCore) { \n        of = new File(workTree,tw.getPathString()); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        of = File.createTempFile(""merge_"",""_temp"",null); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File workTree, FileOutputStream fos) throws FileNotFoundException,IOException { \n    File of = null; \n    MergeFormatter fmt = new MergeFormatter(); \n    if (!inCore) { \n        of = new File(workTree,tw.getPathString()); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        of = File.createTempFile(""merge_"",""_temp"",null); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, MergeFormatter fmt, File of) throws FileNotFoundException,IOException { \n    FileOutputStream fos; \n    if (!inCore) { \n        File workTree = db.getWorkTree(); \n        if (workTree == null) throw new UnsupportedOperationException(); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File of, MergeFormatter fmt) throws FileNotFoundException,IOException { \n    FileOutputStream fos; \n    if (!inCore) { \n        File workTree = db.getWorkTree(); \n        if (workTree == null) throw new UnsupportedOperationException(); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, MergeFormatter fmt, File of, FileOutputStream fos) throws FileNotFoundException,IOException { \n    if (!inCore) { \n        File workTree = db.getWorkTree(); \n        if (workTree == null) throw new UnsupportedOperationException(); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File workTree, MergeFormatter fmt, FileOutputStream fos) throws FileNotFoundException,IOException { \n    File of = null; \n    if (!inCore) { \n        of = new File(workTree,tw.getPathString()); \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        of = File.createTempFile(""merge_"",""_temp"",null); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File workTree, File of, MergeFormatter fmt) throws FileNotFoundException,IOException { \n    FileOutputStream fos; \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File workTree, File of, MergeFormatter fmt, FileOutputStream fos) throws FileNotFoundException,IOException { \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File workTree, MergeFormatter fmt, File of) throws FileNotFoundException,IOException { \n    FileOutputStream fos; \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, MergeFormatter fmt, File workTree, File of) throws FileNotFoundException,IOException { \n    FileOutputStream fos; \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, MergeFormatter fmt, File workTree, File of, FileOutputStream fos) throws FileNotFoundException,IOException { \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File of, MergeFormatter fmt, File workTree) throws FileNotFoundException,IOException { \n    FileOutputStream fos; \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File of, MergeFormatter fmt, File workTree, FileOutputStream fos) throws FileNotFoundException,IOException { \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File of, File workTree, MergeFormatter fmt) throws FileNotFoundException,IOException { \n    FileOutputStream fos; \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        fos = new FileOutputStream(of); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File of, File workTree, MergeFormatter fmt, FileOutputStream fos) throws FileNotFoundException,IOException { \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File workTree, File of, FileOutputStream fos, MergeFormatter fmt) throws FileNotFoundException,IOException { \n    if (!inCore) { \n        File parentFolder = of.getParentFile(); \n        if (!parentFolder.exists()) parentFolder.mkdirs(); \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } else if (!result.containsConflicts()) { \n        try { \n            fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); \n        } finally { \n            fos.close(); \n        } \n    } \n    return of; \n}', 'protected File writeMergedFile(MergeResult<RawText> result, File workTree, FileOutputStream fos, MergeFormatter fmt, File of) throws FileNotFoundException,IOException { \n    if (!inCore) {']","['private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }', 'private File writeMergedFile(MergeResult<RawText> result) throws FileNotFoundException,IOException { File of = null; MergeFormatter fmt = new MergeFormatter(); FileOutputStream fos; if (!inCore) { File workTree = db.getWorkTree(); if (workTree == null) throw new UnsupportedOperationException(); of = new File(workTree,tw.getPathString()); File parentFolder = of.getParentFile(); if (!parentFolder.exists()) parentFolder.mkdirs(); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } else if (!result.containsConflicts()) { of = File.createTempFile(""merge_"",""_temp"",null); fos = new FileOutputStream(of); try { fmt.formatMerge(fos,result,Arrays.asList(commitNames),Constants.CHARACTER_ENCODING); } finally { fos.close(); } } return of; }']",True,True,False,True,False,False,False,False,0.0,0.0,0.3098128975372888,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(),proxyProperties.getPort(),authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = proxyProperties.getPort(); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = new Integer(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Integer port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Integer port = new Integer(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Integer port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = new Integer(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }']","['private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(),proxyProperties.getPort(),authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(), port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = new Integer(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(), port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Integer port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(), port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(),(Integer) port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(),(int) port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Integer port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(), port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(), port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(), port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy( proxyProperties.getProtocol(),proxyProperties.getHost(), port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }']","['private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),Integer.parseInt(proxyProperties.getPort()),authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),Integer.parseInt(proxyProperties.getPort()),authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),Integer.parseInt(proxyProperties.getPort()),authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),Integer.parseInt(proxyProperties.getPort()),authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),Integer.parseInt(proxyProperties.getPort()),authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }', 'private DefaultRepositorySystemSession newRepositorySystemSession(RepositorySystem system,String localRepoPath) { LocalRepository localRepo = new LocalRepository(localRepoPath); DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession(); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo)); session.setOffline(this.offline); if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector(); int port = Integer.parseInt(proxyProperties.getPort()); Proxy proxy = new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),port,authentication); proxySelector.add(proxy,proxyProperties.getNonProxyHosts()); session.setProxySelector(proxySelector); } return session; }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.47105087671228196,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }']","['private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }']","['private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); if(courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the request parameters"",StatusMessageColor.DANGER)); isError = true; } FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); if(courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the request parameters"",StatusMessageColor.DANGER)); isError = true; return; } FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); if(courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the request parameters"",StatusMessageColor.DANGER)); isError = true; return; } else if ( updatedQuestion.courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the updated question"",StatusMessageColor.DANGER)); isError = true; return; } FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); if(courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the request parameters"",StatusMessageColor.DANGER)); isError = true; return; } else if ( updatedQuestion.courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the updated question"",StatusMessageColor.DANGER)); isError = true; return; } else if (! courseId.equals(updatedQuestion.courseId) ) { statusToUser.add(new StatusMessage("" CourseId in the request parameters and updated question are different"",StatusMessageColor.DANGER)); isError = true; return; } FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); if(courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the request parameters"",StatusMessageColor.DANGER)); isError = true; return; } else if ( updatedQuestion.courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the updated question"",StatusMessageColor.DANGER)); isError = true; return; } else if (! courseId.equals(updatedQuestion.courseId) ) { statusToUser.add(new StatusMessage("" CourseId in the request parameters and updated question are different"",StatusMessageColor.DANGER)); isError = true; return; } else { updatedQuestion.courseId = courseId; } FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); if(courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the request parameters"",StatusMessageColor.DANGER)); isError = true; return; } else { updatedQuestion.courseId = courseId; } FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); if(courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the request parameters"",StatusMessageColor.DANGER)); isError = true; return; } else { updatedQuestion.courseId = courseId; } FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); if(courseId.isEmpty()) { statusToUser.add(new StatusMessage("" CourseId is missing in the request parameters"",StatusMessageColor.DANGER)); isError = true; return; } else { updatedQuestion.courseId = courseId; } FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }']","['private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }', 'private void editQuestion(FeedbackQuestionAttributes updatedQuestion) throws InvalidParametersException,EntityDoesNotExistException { String err = validateQuestionGiverRecipientVisibility(updatedQuestion); if (!err.isEmpty()) { statusToUser.add(new StatusMessage(err,StatusMessageColor.DANGER)); isError = true; } String courseId = getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID); FeedbackQuestionDetails updatedQuestionDetails = updatedQuestion.getQuestionDetails(); List<StatusMessage> questionDetailsErrorsMessages = new ArrayList<>(); List<String> questionDetailsErrors = updatedQuestionDetails.validateQuestionDetails(courseId); for (String error : questionDetailsErrors) { questionDetailsErrorsMessages.add(new StatusMessage(error,StatusMessageColor.DANGER)); } if (questionDetailsErrors.isEmpty()) { logic.updateFeedbackQuestionNumber(updatedQuestion); statusToUser.add(new StatusMessage(Const.StatusMessages.FEEDBACK_QUESTION_EDITED,StatusMessageColor.SUCCESS)); statusToAdmin = ""Feedback Question "" + updatedQuestion.questionNumber + "" for session:<span class=\\""bold\\"">("" + updatedQuestion.feedbackSessionName + "")</span> for Course <span class=\\""bold\\"">["" + updatedQuestion.courseId + ""]</span> edited.<br>"" + ""<span class=\\""bold\\"">"" + updatedQuestionDetails.getQuestionTypeDisplayName() + "":</span> "" + SanitizationHelper.sanitizeForHtml(updatedQuestionDetails.getQuestionText()); } else { statusToUser.addAll(questionDetailsErrorsMessages); isError = true; } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }']","['@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag() == false) { } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag() == false) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { return markers; } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); return markers; } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } return markers; } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } return markers; } }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag() == false) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }']","['@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { if (model.getStartTime() < endTime) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag() && model.getStartTime() < endTime) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag() && model.getStartTime() < endTime && model.getStartTime() > startTime) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag() && model.getStartTime() < endTime && model.getStartTime() > startTime && resolution > 10) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag() && model.getStartTime() < endTime && model.getStartTime() > startTime && resolution > 10 && model.getLogs().size() > 5) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag() && model.getStartTime() < endTime && model.getStartTime() > startTime && resolution > 10 && model.getLogs().size() > 5 && model.getLogs().size() < 10) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers; }']","['@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); return markers; } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } return markers; } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } if ( markers.isEmpty() ) { return new ArrayList<>(); } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { } } } return new ArrayList<>(); }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { return new ArrayList<>(); } } } return markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } if (model.getErrorTag()) { markers.add(new SpanMarkerEvent(element, model.getStartTime(), MARKER_COLOR, ""error.object"")); } } } return markers.isEmpty() ? new ArrayList<>() : markers; }', '@NonNull protected List<IMarkerEvent> getViewMarkerList(long startTime, long endTime, long resolution, @NonNull IProgressMonitor monitor) { List<IMarkerEvent> markers = new ArrayList<>(); ITimeGraphEntry[] expandedElements = getTimeGraphViewer().getExpandedElements(); for (ITimeGraphEntry element : expandedElements) { if (((TimeGraphEntry) element).getModel() instanceof SpanLifeEntryModel) { SpanLifeEntryModel model = (SpanLifeEntryModel) ((TimeGraphEntry) element).getModel(); for (LogEvent log : model.getLogs()) { markers.add(new SpanMarkerEvent(element, log.getTime(), MARKER_COLOR, log.getType())); } } } return markers.isEmpty() ? new ArrayList<>() : markers; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private Properties buildProperties() { \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); \n    props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); \n    props.setProperty(""mail.smtp.port"",""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"",""465""); \n    props.put(""mail.smtp.auth"",""true""); \n    props.put(""mail.debug"",""true""); \n    props.put(""mail.store.protocol"",""pop3""); \n    props.put(""mail.transport.protocol"",""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    String DEBUG = ""true""; \n    String STORE = ""pop3""; \n    String TRANSPORT = ""smtp""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", DEBUG); \n    props.put(""mail.store.protocol"", STORE); \n    props.put(""mail.transport.protocol"", TRANSPORT); \n    return props; \n}', 'private Properties buildProperties() { \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", ""smtp.gmail.com""); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); \n    props.setProperty(""mail.smtp.port"", ""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"", ""465""); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", ""smtp.gmail.com""); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); \n    props.setProperty(""mail.smtp.port"", ""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"", ""465""); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String HOST = ""smtp.gmail.com""; \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); \n    props.setProperty(""mail.smtp.port"", ""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"", ""465""); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); \n    props.setProperty(""mail.smtp.port"", ""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"", ""465""); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", ""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"", ""465""); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    String DEBUG = ""true""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", DEBUG); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    String DEBUG = ""true""; \n    String STORE = ""pop3""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", DEBUG); \n    props.put(""mail.store.protocol"", STORE); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    String DEBUG = ""true""; \n    String STORE = ""pop3""; \n    String TRANSPORT = ""smtp""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", DEBUG); \n    props.put(""mail.store.protocol"", STORE); \n    props.put(""mail.transport.protocol"", TRANSPORT); \n    return props; \n}', 'private Properties buildProperties() { \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", ""smtp.gmail.com""); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); \n    props.setProperty(""mail.smtp.port"", ""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"", ""465""); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String HOST = ""smtp.gmail.com""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); \n    props.setProperty(""mail.smtp.port"", ""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"", ""465""); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", ""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"", ""465""); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", ""true""); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", ""true""); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    String DEBUG = ""true""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", DEBUG); \n    props.put(""mail.store.protocol"", ""pop3""); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    String DEBUG = ""true""; \n    String STORE = ""pop3""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", DEBUG); \n    props.put(""mail.store.protocol"", STORE); \n    props.put(""mail.transport.protocol"", ""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    String DEBUG = ""true""; \n    String STORE = ""pop3""; \n    String TRANSPORT = ""smtp""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", DEBUG); \n    props.put(""mail.store.protocol"", STORE); \n    props.put(""mail.transport.protocol"", TRANSPORT); \n    return props; \n}', 'private Properties buildProperties() { \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    String DEBUG = ""true""; \n    String STORE = ""pop3""; \n    String TRANSPORT = ""smtp""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props.put(""mail.smtp.auth"", AUTH); \n    props.put(""mail.debug"", DEBUG); \n    props.put(""mail.store.protocol"", STORE); \n    props.put(""mail.transport.protocol"", TRANSPORT); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String HOST = ""smtp.gmail.com""; \n    String FALLBACK = ""false""; \n    String PORT = ""465""; \n    String AUTH = ""true""; \n    String DEBUG = ""true""; \n    String STORE = ""pop3""; \n    String TRANSPORT = ""smtp""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", HOST); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", FALLBACK); \n    props.setProperty(""mail.smtp.port"", PORT); \n    props.setProperty(""mail.smtp.socketFactory.port"", PORT); \n    props']","['private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; final String MAIL.smtp.socketFactory.class = ""mail.smtp.socketFactory.class""; final String MAIL.smtp.socketFactory.fallback = ""false""; final String MAIL.smtp.port = ""465""; final String MAIL.smtp.socketFactory.port = ""465""; final String MAIL.smtp.auth = ""true""; final String MAIL.smtp.debug = ""true""; final String MAIL.store.protocol = ""pop3""; final String MAIL.transport.protocol = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); props.setProperty(""mail.smtp.port"", MAIL.smtp.port); props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); props.put(""mail.smtp.auth"", MAIL.smtp.auth); props.put(""mail.debug"", MAIL.smtp.debug); props.put(""mail.store.protocol"", MAIL.store.protocol); props.put(""mail.transport.protocol"", MAIL.transport.protocol); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; final String MAIL.smtp.socketFactory.class = ""mail.smtp.socketFactory.class""; final String MAIL.smtp.socketFactory.fallback = ""false""; final String MAIL.smtp.port = ""465""; final String MAIL.smtp.socketFactory.port = ""465""; final String MAIL.smtp.auth = ""true""; final String MAIL.smtp.debug = ""true""; final String MAIL.store.protocol = ""pop3""; final String MAIL.transport.protocol = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); props.setProperty(""mail.smtp.port"", MAIL.smtp.port); props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); props.put(""mail.smtp.auth"", MAIL.smtp.auth); props.put(""mail.debug"", MAIL.smtp.debug); props.put(""mail.store.protocol"", MAIL.store.protocol); props.put(""mail.transport.protocol"", MAIL.transport.protocol); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; final String MAIL.smtp.port = ""465""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"", MAIL.smtp.port); props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.port); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; final String MAIL.smtp.socketFactory.fallback = ""false""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; final String MAIL.smtp.port = ""465""; final String MAIL.smtp.socketFactory.port = ""465""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"", MAIL.smtp.port); props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; final String MAIL.smtp.auth = ""true""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"", MAIL.smtp.auth); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; final String MAIL.smtp.debug = ""true""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"", MAIL.smtp.debug); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; final String MAIL.store.protocol = ""pop3""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"", MAIL.store.protocol); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { final String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; final String MAIL.smtp.host = ""smtp.gmail.com""; final String MAIL.transport.protocol = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", MAIL.smtp.host); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"", MAIL.transport.protocol); return props; }']","['private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String MAIL.smtp.host = ""smtp.gmail.com""; \n    String MAIL.smtp.port = ""465""; \n    String MAIL.smtp.socketFactory.port = ""465""; \n    String MAIL.smtp.socketFactory.class = SSL_FACTORY; \n    String MAIL.smtp.socketFactory.fallback = ""false""; \n    String MAIL.smtp.auth = ""true""; \n    String MAIL.debug = ""true""; \n    String MAIL.store.protocol = ""pop3""; \n    String MAIL.transport.protocol = ""smtp""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", MAIL.smtp.host); \n    props.setProperty(""mail.smtp.socketFactory.class"", MAIL.smtp.socketFactory.class); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); \n    props.setProperty(""mail.smtp.port"", MAIL.smtp.port); \n    props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); \n    props.put(""mail.smtp.auth"", MAIL.smtp.auth); \n    props.put(""mail.debug"", MAIL.debug); \n    props.put(""mail.store.protocol"", MAIL.store.protocol); \n    props.put(""mail.transport.protocol"", MAIL.transport.protocol); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); \n    props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); \n    props.setProperty(""mail.smtp.port"",""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"",""465""); \n    props.put(""mail.smtp.auth"",""true""); \n    props.put(""mail.debug"",""true""); \n    props.put(""mail.store.protocol"",""pop3""); \n    props.put(""mail.transport.protocol"",""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); \n    props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); \n    props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); \n    props.setProperty(""mail.smtp.port"",""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"",""465""); \n    props.put(""mail.smtp.auth"",""true""); \n    props.put(""mail.debug"",""true""); \n    props.put(""mail.store.protocol"",""pop3""); \n    props.put(""mail.transport.protocol"",""smtp""); \n    return props; \n}', 'private Properties buildProperties() { \n    String MAIL.smtp.host = ""smtp.gmail.com""; \n    String MAIL.smtp.port = ""465""; \n    String MAIL.smtp.socketFactory.port = ""465""; \n    String MAIL.smtp.socketFactory.class = ""javax.net.ssl.SSLSocketFactory""; \n    String MAIL.smtp.socketFactory.fallback = ""false""; \n    String MAIL.smtp.auth = ""true""; \n    String MAIL.debug = ""true""; \n    String MAIL.store.protocol = ""pop3""; \n    String MAIL.transport.protocol = ""smtp""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", MAIL.smtp.host); \n    props.setProperty(""mail.smtp.socketFactory.class"", MAIL.smtp.socketFactory.class); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); \n    props.setProperty(""mail.smtp.port"", MAIL.smtp.port); \n    props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); \n    props.put(""mail.smtp.auth"", MAIL.smtp.auth); \n    props.put(""mail.debug"", MAIL.debug); \n    props.put(""mail.store.protocol"", MAIL.store.protocol); \n    props.put(""mail.transport.protocol"", MAIL.transport.protocol); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    String MAIL.smtp.host = ""smtp.gmail.com""; \n    String MAIL.smtp.port = ""465""; \n    String MAIL.smtp.socketFactory.port = ""465""; \n    String MAIL.smtp.socketFactory.fallback = ""false""; \n    String MAIL.smtp.auth = ""true""; \n    String MAIL.debug = ""true""; \n    String MAIL.store.protocol = ""pop3""; \n    String MAIL.transport.protocol = ""smtp""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"", MAIL.smtp.host); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); \n    props.setProperty(""mail.smtp.port"", MAIL.smtp.port); \n    props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); \n    props.put(""mail.smtp.auth"", MAIL.smtp.auth); \n    props.put(""mail.debug"", MAIL.debug); \n    props.put(""mail.store.protocol"", MAIL.store.protocol); \n    props.put(""mail.transport.protocol"", MAIL.transport.protocol); \n    return props; \n}', 'private Properties buildProperties() { \n    Properties props = System.getProperties(); \n    String MAIL.smtp.host = ""smtp.gmail.com""; \n    String MAIL.smtp.port = ""465""; \n    String MAIL.smtp.socketFactory.port = ""465""; \n    String MAIL.smtp.socketFactory.class = ""javax.net.ssl.SSLSocketFactory""; \n    String MAIL.smtp.socketFactory.fallback = ""false""; \n    String MAIL.smtp.auth = ""true""; \n    String MAIL.debug = ""true""; \n    String MAIL.store.protocol = ""pop3""; \n    String MAIL.transport.protocol = ""smtp""; \n    props.setProperty(""mail.smtp.host"", MAIL.smtp.host); \n    props.setProperty(""mail.smtp.socketFactory.class"", MAIL.smtp.socketFactory.class); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); \n    props.setProperty(""mail.smtp.port"", MAIL.smtp.port); \n    props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); \n    props.put(""mail.smtp.auth"", MAIL.smtp.auth); \n    props.put(""mail.debug"", MAIL.debug); \n    props.put(""mail.store.protocol"", MAIL.store.protocol); \n    props.put(""mail.transport.protocol"", MAIL.transport.protocol); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    Properties props = System.getProperties(); \n    String MAIL.smtp.host = ""smtp.gmail.com""; \n    String MAIL.smtp.port = ""465""; \n    String MAIL.smtp.socketFactory.port = ""465""; \n    String MAIL.smtp.socketFactory.fallback = ""false""; \n    String MAIL.smtp.auth = ""true""; \n    String MAIL.debug = ""true""; \n    String MAIL.store.protocol = ""pop3""; \n    String MAIL.transport.protocol = ""smtp""; \n    props.setProperty(""mail.smtp.host"", MAIL.smtp.host); \n    props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); \n    props.setProperty(""mail.smtp.port"", MAIL.smtp.port); \n    props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); \n    props.put(""mail.smtp.auth"", MAIL.smtp.auth); \n    props.put(""mail.debug"", MAIL.debug); \n    props.put(""mail.store.protocol"", MAIL.store.protocol); \n    props.put(""mail.transport.protocol"", MAIL.transport.protocol); \n    return props; \n}', 'private Properties buildProperties() { \n    Properties props = System.getProperties(); \n    String MAIL.smtp.host = ""smtp.gmail.com""; \n    String MAIL.smtp.port = ""465""; \n    String MAIL.smtp.socketFactory.port = ""465""; \n    String MAIL.smtp.socketFactory.class = ""javax.net.ssl.SSLSocketFactory""; \n    String MAIL.smtp.socketFactory.fallback = ""false""; \n    String MAIL.smtp.auth = ""true""; \n    String MAIL.debug = ""true""; \n    String MAIL.store.protocol = ""pop3""; \n    String MAIL.transport.protocol = ""smtp""; \n    props.setProperty(""mail.smtp.host"", MAIL.smtp.host); \n    props.setProperty(""mail.smtp.socketFactory.class"", MAIL.smtp.socketFactory.class); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); \n    props.setProperty(""mail.smtp.port"", MAIL.smtp.port); \n    props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); \n    props.put(""mail.smtp.auth"", MAIL.smtp.auth); \n    props.put(""mail.debug"", MAIL.debug); \n    props.put(""mail.store.protocol"", MAIL.store.protocol); \n    props.put(""mail.transport.protocol"", MAIL.transport.protocol); \n    return props; \n}', 'private Properties buildProperties() { \n    String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; \n    Properties props = System.getProperties(); \n    props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); \n    props.setProperty(""mail.smtp.socketFactory.class"",SSL_FACTORY); \n    props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); \n    props.setProperty(""mail.smtp.port"",""465""); \n    props.setProperty(""mail.smtp.socketFactory.port"",""465""); \n    String MAIL.smtp.auth = ""true""; \n    String MAIL.debug = ""true""; \n    String MAIL.store.protocol = ""pop3""; \n    String MAIL.transport.protocol = ""smtp""; \n    props.put(""mail.smtp.auth"", MAIL.smtp.auth); \n    props.put(""mail.debug"", MAIL.debug); \n    props.put(""mail.store.protocol"", MAIL.store.protocol); \n    props.put(""mail.transport.protocol"", MAIL.transport.protocol); \n    return props; \n}', 'private Properties buildProperties() { \n    Properties props = System.getProperties(); \n    String MAIL.smtp.host = ""smtp.gmail.com""; \n    String MAIL.smtp.port = ""465""; \n    String MAIL.smtp.socketFactory.port = ""465""; \n    String MAIL.smtp.socketFactory.class = ""javax.net.ssl.SSLSocketFactory""; \n    String MAIL.smtp.socketFactory.fallback = ""false""; \n    String MAIL.smtp.auth = ""true""; \n    String MAIL.debug = ""true""; \n    String MAIL.store.protocol = ""pop3""; \n    String MAIL.transport.protocol = ""smtp""; \n    props.setProperty(""mail.smtp.host"", MAIL.smtp.host); \n    props.setProperty(""mail.smtp.socketFactory.class"", MAIL.smtp.socketFactory.class); \n    props.setProperty(""mail.smtp.socketFactory.fallback"", MAIL.smtp.socketFactory.fallback); \n    props.setProperty(""mail.smtp.port"", MAIL.smtp.port); \n    props.setProperty(""mail.smtp.socketFactory.port"", MAIL.smtp.socketFactory.port); \n    props.put(""mail.smtp.auth"", MAIL.smtp.auth); \n    props.put(""mail.debug"", MAIL.debug); \n    props.put(""mail.store.protocol"", MAIL.store.protocol); \n    props.put(""mail.transport.protocol"", MAIL.transport.protocol); \n    return props; \n}']","['private Properties buildProperties() { Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"",""smtp.gmail.com""); props.setProperty(""mail.smtp.socketFactory.class"",""javax.net.ssl.SSLSocketFactory""); props.setProperty(""mail.smtp.socketFactory.fallback"",""false""); props.setProperty(""mail.smtp.port"",""465""); props.setProperty(""mail.smtp.socketFactory.port"",""465""); props.put(""mail.smtp.auth"",""true""); props.put(""mail.debug"",""true""); props.put(""mail.store.protocol"",""pop3""); props.put(""mail.transport.protocol"",""smtp""); return props; }', 'private Properties buildProperties() { String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_HOST = ""smtp.gmail.com""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); props.setProperty(""mail.smtp.port"", ""465""); props.setProperty(""mail.smtp.socketFactory.port"", ""465""); props.put(""mail.smtp.auth"", ""true""); props.put(""mail.debug"", ""true""); props.put(""mail.store.protocol"", ""pop3""); props.put(""mail.transport.protocol"", ""smtp""); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); props.setProperty(""mail.smtp.port"", ""465""); props.setProperty(""mail.smtp.socketFactory.port"", ""465""); props.put(""mail.smtp.auth"", ""true""); props.put(""mail.debug"", ""true""); props.put(""mail.store.protocol"", ""pop3""); props.put(""mail.transport.protocol"", ""smtp""); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_PORT); props.put(""mail.smtp.auth"", ""true""); props.put(""mail.debug"", ""true""); props.put(""mail.store.protocol"", ""pop3""); props.put(""mail.transport.protocol"", ""smtp""); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", ""false""); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", ""true""); props.put(""mail.debug"", ""true""); props.put(""mail.store.protocol"", ""pop3""); props.put(""mail.transport.protocol"", ""smtp""); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", ""true""); props.put(""mail.debug"", ""true""); props.put(""mail.store.protocol"", ""pop3""); props.put(""mail.transport.protocol"", ""smtp""); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", ""true""); props.put(""mail.store.protocol"", ""pop3""); props.put(""mail.transport.protocol"", ""smtp""); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", ""pop3""); props.put(""mail.transport.protocol"", ""smtp""); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", ""smtp""); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocketFactory""; String SMTP_PORT = ""465""; String SMTP_FACTORY_PORT = ""465""; String SMTP_FACTORY_FALLBACK = ""false""; String SMTP_AUTH = ""true""; String SMTP_DEBUG = ""true""; String SMTP_STORE = ""pop3""; String SMTP_TRANSPORT = ""smtp""; Properties props = System.getProperties(); props.setProperty(""mail.smtp.host"", SMTP_HOST); props.setProperty(""mail.smtp.socketFactory.class"", SSL_FACTORY); props.setProperty(""mail.smtp.socketFactory.fallback"", SMTP_FACTORY_FALLBACK); props.setProperty(""mail.smtp.port"", SMTP_PORT); props.setProperty(""mail.smtp.socketFactory.port"", SMTP_FACTORY_PORT); props.put(""mail.smtp.auth"", SMTP_AUTH); props.put(""mail.debug"", SMTP_DEBUG); props.put(""mail.store.protocol"", SMTP_STORE); props.put(""mail.transport.protocol"", SMTP_TRANSPORT); return props; }', 'private Properties buildProperties() { String SMTP_HOST = ""smtp.gmail.com""; String SSL_FACTORY = ""javax.net.ssl.SSLSocket']",True,False,True,True,False,False,False,False,0.0,0.09720551292058478,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.d(TAG, ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.i(TAG, ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.w(TAG, ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.e(TAG, ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.v(TAG, ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { Log.d(TAG, ""new budget!""); } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); new Handler().post(new Runnable() { @Override public void run() { Log.d(TAG, ""new budget!""); } }); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); runOnUiThread(new Runnable() { @Override public void run() { Log.d(TAG, ""new budget!""); } }); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }']","['private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.d(TAG, ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_SHORT).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(AddEntryActivity.this,""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { Toast.makeText(AddEntryActivity.this,""new budget!"",Toast.LENGTH_LONG).show(); } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",0).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); if (Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show() == null) { } } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } if (pos == budgetList.size()) { } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } if (pos == budgetList.size() - 1) { } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }']","['private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.d(TAG, ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); System.out.println(""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); // new budget } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); newBudgetSelected(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); budgetSelected(""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.d(""BudgetSpinnerActivity: addItemsToBudgetSpinner() - onItemSelected() - new budget!"", ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.d(""BudgetSpinnerActivity: addItemsToBudgetSpinner() - onItemSelected() - new budget!"", ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }']","['private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Log.d(TAG, ""new budget!""); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_SHORT).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(AddEntryActivity.this, ""new budget!"", Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",0).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); if (Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show() == null) { } } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); } if (pos == budgetList.size()) { Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); if (pos == budgetList.size()) { Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }', 'private void addItemsToBudgetSpinner() { List<String> budgetNameList = new ArrayList<String>(); final List<Budget> budgetList = appData.getBudgetList(); for (Budget b : budgetList) { Log.d(TAG,b.getName()); budgetNameList.add(b.getName()); } budgetNameList.add(getResources().getString(R.string.new_budget)); ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,R.layout.spinner_layout,budgetNameList); dataAdapter.setDropDownViewResource(R.layout.spinner_entry_layout); mBudgetView.setAdapter(dataAdapter); mBudgetView.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent,View view,int pos,long id) { if (pos == budgetList.size()) { startActivity(new Intent(AddEntryActivity.this,AddBudgetActivity.class)); Toast.makeText(parent.getContext(),""new budget!"",Toast.LENGTH_LONG).show(); } if (pos == budgetList.size()) { } } @Override public void onNothingSelected(AdapterView<?> arg0) { } }); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } if (storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Map<String,Object> blockStats = null; Object[] beans = (Object[]) stat.get(""beans""); for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } assertNotNull(blockStats); Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); assertNotNull(storageTypeStatsList); assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.3417419215552489
"['protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, false); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, false); } else { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, false); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, false); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, false); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }']","['protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) { } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) { } else { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else { } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR2) { } else { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }']","['protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 19) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 20) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else if (Build.VERSION.SDK_INT >= 18) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }']","['protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else { action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else { action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }', 'protected Dialog onCreateDialog(int id) { AlertDialog.Builder builder; Dialog dialog = null; switch(id) { case DIALOG_SHORT_WAIT: { ProgressDialog working_dialog = new ProgressDialog(this); working_dialog.setMessage(getResources().getString(R.string.wait_a_moment)); working_dialog.setIndeterminate(true); working_dialog.setCancelable(false); dialog = working_dialog; break; } case DIALOG_CHOOSE_UPLOAD_SOURCE: { String[] allTheItems = { getString(R.string.actionbar_upload_files), getString(R.string.actionbar_upload_from_apps) }; builder = new AlertDialog.Builder(this); builder.setTitle(R.string.actionbar_upload); builder.setItems(allTheItems, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int item) { if (item == 0) { Intent action = new Intent(FileDisplayActivity.this, UploadFilesActivity.class); action.putExtra(UploadFilesActivity.EXTRA_ACCOUNT, FileDisplayActivity.this.getAccount()); startActivityForResult(action, ACTION_SELECT_MULTIPLE_FILES); } else if (item == 1) { Intent action = new Intent(Intent.ACTION_GET_CONTENT); action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { action.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); } else { action = action.setType(""*/*"").addCategory(Intent.CATEGORY_OPENABLE); } startActivityForResult(Intent.createChooser(action, getString(R.string.upload_chooser_title)), ACTION_SELECT_CONTENT_FROM_APPS); } } }); dialog = builder.create(); break; } case DIALOG_CERT_NOT_SAVED: { builder = new AlertDialog.Builder(this); builder.setMessage(getResources().getString(R.string.ssl_validator_not_saved)); builder.setCancelable(false); builder.setPositiveButton(R.string.common_ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog = builder.create(); break; } default: dialog = null; } return dialog; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, (ct.getDuration() / 1000)); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, (ct.getDuration() / (1000))); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, (ct.getDuration() / 1000) / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, (ct.getDuration() / 1000)); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); CompletionTime ct = null; FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } assertNotNull(ct); assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (Type destinationType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destinationType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType typeToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, typeToCheck)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType newType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, newType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destination)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType checkType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, checkType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType type : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, type)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType classType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, classType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destinationTypeToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destinationTypeToCheck)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType typeToPushDown : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, typeToPushDown)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType classToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, classToCheck)); } return result; }']","['private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destinationType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destinationType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType typeToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, typeToCheck)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType newType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, newType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType currentType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, currentType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destination)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType checkType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, checkType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType type : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, type)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType classType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, classType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType nonAbstractType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, nonAbstractType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType classToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, classToCheck)); } return result; }']","['private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destinationType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destinationType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType typeToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, typeToCheck)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType nonAbstractDestination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, nonAbstractDestination)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destination)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType checkType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, checkType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType typeDestination : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, typeDestination)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destinationToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destinationToCheck)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType typeToPushDown : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, typeToPushDown)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType nonAbstractType : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, nonAbstractType)); } return result; }', 'private RefactoringStatus checkNonAbstractMembersInDestinationClasses(IMember[] membersToPushDown,IType[] destinationClassesForNonAbstract) throws JavaModelException { List<IMember> list = new ArrayList<>(); RefactoringStatus result = new RefactoringStatus(); list.addAll(Arrays.asList(membersToPushDown)); list.removeAll(Arrays.asList(getAbstractMembers(membersToPushDown))); IMember[] nonAbstractMembersToPushDown = list.toArray(new IMember[list.size()]); for (IType destinationTypeToCheck : destinationClassesForNonAbstract) { result.merge(MemberCheckUtil.checkMembersInDestinationType(nonAbstractMembersToPushDown, destinationTypeToCheck)); } return result; }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.6522125981013674,0.0
"['private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + "" ""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); xVals.add(""""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(""""); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + "" ""); xVals.add(""""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(""""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); xVals.add(""""); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(""""); xVals.add(date + """"); xVals.add(""""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); xVals.add(""""); xVals.add(""""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(""""); xVals.add(date + """"); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }']","['private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }']","['private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + "" ""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""  ""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""0""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""1""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""a""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + "" ""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + "" 1""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""0 ""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<Entry> yVals = new ArrayList<>(); List<String> xVals = new ArrayList<>(); int k = 0; for (int i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k,val)); k++; } for (int i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + "" 0""); } xValues = xVals; return new LineData(generateLineDataSet(yVals,getResources().getColor(R.color.glucosio_fab_weight))); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }']","['public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }']","['public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }']","['public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }', 'public Query createQuery() { final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); final int size = fieldContexts.size(); if (size == 1) { return queryCustomizer.setWrappedQuery(createQuery(fieldContexts.get(0),conversionContext)).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts) { aggregatedFieldsQueryBuilder.add(createQuery(fieldContext,conversionContext),BooleanClause.Occur.SHOULD); } return queryCustomizer.setWrappedQuery(aggregatedFieldsQueryBuilder.build()).createQuery(); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStateChangeWithTransitiveState() throws InterruptedException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { throw new RuntimeException(); }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { throw new RuntimeException(); }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { throw new RuntimeException(e); }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { throw new RuntimeException(e); }', 'public void testStateChangeWithTransitiveState() throws InterruptedException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { Thread.currentThread().interrupt(); }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { Thread.currentThread().interrupt(); }']","['public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws Exception { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws Throwable { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws RuntimeException { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() throws Error { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { try { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { } }', 'public void testStateChangeWithTransitiveState() { try { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); Assert.assertEquals(status,app.getMySql().getStatus()); } } catch (InterruptedException e) { throw new RuntimeException(e); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); try { processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); } catch (InterruptedException e) { } Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); try { processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); } catch (InterruptedException e) { throw new Error(e); } Assert.assertEquals(status,app.getMySql().getStatus()); } }', 'public void testStateChangeWithTransitiveState() { TestApplicationTemplate app = new TestApplicationTemplate(); AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); processor.scopedInstance = app.getMySqlVm(); for (InstanceStatus status : InstanceStatus.values()) { if (status.isStable()) continue; app.getMySql().setStatus(status); try { processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); } catch (InterruptedException e) { throw new Throwable(e); } Assert.assertEquals(status,app.getMySql().getStatus()); } }']","['public void testStateChangeWithTransitiveState() throws InterruptedException { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(""Thread interrupted); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(""Interrupted while testing); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(""Interrupted in testStateChangeWithTransitiveState); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(""Thread interrupted in testStateChangeWithTransitiveState); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n}', 'public void testStateChangeWithTransitiveState() { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(""Interrupted while testing); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(""Interrupted in test); \n    } \n}', 'public void testStateChangeWithTransitiveState() throws InterruptedException { \n    TestApplicationTemplate app = new TestApplicationTemplate(); \n    AgentMessageProcessor processor = (AgentMessageProcessor) this.agent.getMessagingClient().getMessageProcessor(); \n    processor.scopedInstance = app.getMySqlVm(); \n    for (InstanceStatus status : InstanceStatus.values()) { \n        if (status.isStable()) continue; \n        app.getMySql().setStatus(status); \n        processor.processMessage(new MsgCmdChangeInstanceState(app.getMySql(),InstanceStatus.DEPLOYED_STARTED)); \n        Assert.assertEquals(status,app.getMySql().getStatus()); \n    } \n    if (Thread.currentThread().isInterrupted()) { \n        throw new InterruptedException(""Interrupted); \n    } \n}']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.805312203079627,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']","['private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']","['private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(10); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(5); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.keySet().size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.keySet().size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']","['private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer,String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p,String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); Map<Integer,String> sectionDescriptions = new HashMap<>(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { int sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector,sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName,pluginDescription,sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (int j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); int sectionSelector = (int) meta.get(""sectionSelector"").isNumber().doubleValue(); boolean password = false; boolean credentials = false; boolean file = false; boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name,value,descr,password,credentials,file,textArea,dynamic,sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']",False,False,False,True,False,False,False,False,0.7169531588425092,0.6905949627697585,0.7169531588425092,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock [%s] to remove"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] to remove not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock [%s] for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] to remove was not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] was not found to remove"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock [%s] to remove, not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] for removal was not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock to remove [%s] was not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock to remove [%s]"",taskLockToRemove); } }']","['public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock [%s] to remove"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock [%s] found to remove"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] to remove not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock found with id [%s] to remove"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock to remove [%s] not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock with id [%s] to remove found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] for removal not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock to remove with id [%s] found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock with id [%s] to remove not found"",taskLockToRemove); } }']","['public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock [%s] to remove"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] removal failed: not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found in the taskLocks"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] removal failed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock [%s] for removal"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not removed"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock removal failed for [%s]"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] removal not found"",taskLockToRemove); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock to remove: [%s]"",taskLockToRemove); } }']","['public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock [%s] to remove, finding in taskLocks: %s"",taskLockToRemove,taskLocks); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not found to remove, taskLocks: %s"",taskLockToRemove,taskLocks); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] not removed, finding in taskLocks: %s"",taskLockToRemove,taskLocks); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock [%s] to remove in taskLocks: %s"",taskLockToRemove,taskLocks); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock [%s] to remove not found in taskLocks: %s"",taskLockToRemove,taskLocks); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock to remove: [%s] in taskLocks: %s"",taskLockToRemove,taskLocks); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock to remove: [%s] not found, taskLocks: %s"",taskLockToRemove,taskLocks); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock: [%s] to remove, taskLocks: %s"",taskLockToRemove,taskLocks); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""TaskLock: [%s] not removed, taskLocks: %s"",taskLockToRemove,taskLocks); } }', 'public void removeLock(String taskid,TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid,""taskid""); Preconditions.checkNotNull(taskLockToRemove,""taskLockToRemove""); boolean removed = false; final Map<Long,TaskLock> taskLocks = getLocksWithIds(taskid); for (final Map.Entry<Long,TaskLock> taskLockWithId : taskLocks.entrySet()) { final long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"",id,taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock: [%s] to remove in taskLocks"",taskLockToRemove,taskLocks); } }']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.5240531955120917
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { java logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"" + topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"",topic,e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"",topic,e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"",topic,e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"",topic,e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"",topic,e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"",topic,e); } }']","['private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"" + topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with topic {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with message {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with qos {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with retain {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with payload {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with temp {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with mode {}"", topic, e); } }']","['private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { java.util.logging.Logger logger = java.util.logging.Logger.getAnonymousLogger(); logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"" + topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { java.util.logging.Logger logger = java.util.logging.Logger.getAnonymousLogger(); logger.error(""Cannot publish topic: {}"" + topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { java.util.logging.Logger logger = java.util.logging.Logger.getAnonymousLogger(); logger.error(""Cannot publish topic: {}"" + topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { java.util.logging.Logger logger = java.util.logging.Logger.getAnonymousLogger(); logger.error(""Cannot publish topic: {}"", topic, e); } }']","['private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { java logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"" + topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); float setPoint = 0; String mode = (String) this.properties.get(MODE_PROP_NAME); float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"",this.temperature); payload.addMetric(""temperatureExternal"",5.0F); payload.addMetric(""temperatureExhaust"",30.0F); int code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"",code); } else { payload.addMetric(""errorCode"",0); } try { this.cloudClient.publish(topic,payload,qos,retain); logger.info(""Published to {} message: {}"",topic,payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong bits; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; pos = ensureCapacity(8); }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong bits; final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); int newcount = ensureCapacity(8); pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(Double.doubleToLongBits(v)); }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (Double.doubleToLongBits(v) >> 56L); bytes[s + 1] = (byte) (Double.doubleToLongBits(v) >> 48L); bytes[s + 2] = (byte) (Double.doubleToLongBits(v) >> 40L); bytes[s + 3] = (byte) (Double.doubleToLongBits(v) >> 32L); bytes[s + 4] = (byte) (Double.doubleToLongBits(v) >> 24L); bytes[s + 5] = (byte) (Double.doubleToLongBits(v) >> 16L); bytes[s + 6] = (byte) (Double.doubleToLongBits(v) >> 8L); bytes[s + 7] = (byte) Double.doubleToLongBits(v); pos = newcount; }']","['public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (Double.doubleToLongBits(v) >> 56L); bytes[s + 1] = (byte) (Double.doubleToLongBits(v) >> 48L); bytes[s + 2] = (byte) (Double.doubleToLongBits(v) >> 40L); bytes[s + 3] = (byte) (Double.doubleToLongBits(v) >> 32L); bytes[s + 4] = (byte) (Double.doubleToLongBits(v) >> 24L); bytes[s + 5] = (byte) (Double.doubleToLongBits(v) >> 16L); bytes[s + 6] = (byte) (Double.doubleToLongBits(v) >> 8L); bytes[s + 7] = (byte) Double.doubleToLongBits(v); pos = newcount; }', 'public void writeDouble(double v) { final long bits = writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); long bits = Double.doubleToLongBits(v); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong bits; final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (Double.doubleToLongBits(v) >> 56); bytes[s + 1] = (byte) (Double.doubleToLongBits(v) >> 48); bytes[s + 2] = (byte) (Double.doubleToLongBits(v) >> 40); bytes[s + 3] = (byte) (Double.doubleToLongBits(v) >> 32); bytes[s + 4] = (byte) (Double.doubleToLongBits(v) >> 24); bytes[s + 5] = (byte) (Double.doubleToLongBits(v) >> 16); bytes[s + 6] = (byte) (Double.doubleToLongBits(v) >> 8); bytes[s + 7] = (byte) Double.doubleToLongBits(v); pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); long bits = Double.doubleToLongBits(v); bytes[s] = (byte) (bits >> 56); bytes[s + 1] = (byte) (bits >> 48); bytes[s + 2] = (byte) (bits >> 40); bytes[s + 3] = (byte) (bits >> 32); bytes[s + 4] = (byte) (bits >> 24); bytes[s + 5] = (byte) (bits >> 16); bytes[s + 6] = (byte) (bits >> 8); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (Double.doubleToLongBits(v) >> 56L); bytes[s + 1] = (byte) (Double.doubleToLongBits(v) >> 48L); bytes[s + 2] = (byte) (Double.doubleToLongBits(v) >> 40L); bytes[s + 3] = (byte) (Double.doubleToLongBits(v) >> 32L); bytes[s + 4] = (byte) (Double.doubleToLongBits(v) >> 24L); bytes[s + 5] = (byte) (Double.doubleToLongBits(v) >> 16L); bytes[s + 6] = (byte) (Double.doubleToLongBits(v) >> 8L); bytes[s + 7] = (byte) Double.doubleToLongBits(v); pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); long bits = Double.doubleToLongBits(v); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56); bytes[s + 1] = (byte) (bits >> 48); bytes[s + 2] = (byte) (bits >> 40); bytes[s + 3] = (byte) (bits >> 32); bytes[s + 4] = (byte) (bits >> 24); bytes[s + 5] = (byte) (bits >> 16); bytes[s + 6] = (byte) (bits >> 8); bytes[s + 7] = (byte) bits; pos = newcount; }']","['public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56); bytes[s + 1] = (byte) (bits >> 48); bytes[s + 2] = (byte) (bits >> 40); bytes[s + 3] = (byte) (bits >> 32); bytes[s + 4] = (byte) (bits >> 24); bytes[s + 5] = (byte) (bits >> 16); bytes[s + 6] = (byte) (bits >> 8); bytes[s + 7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(Double.doubleToLongBits(v)); }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); final int s = pos; int newcount = ensureCapacity(8); writeLong bits; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = s + 8; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits); bytes[s + 1] = (byte) (bits >> 8); bytes[s + 2] = (byte) (bits >> 16); bytes[s + 3] = (byte) (bits >> 24); bytes[s + 4] = (byte) (bits >> 32); bytes[s + 5] = (byte) (bits >> 40); bytes[s + 6] = (byte) (bits >> 48); bytes[s + 7] = (byte) (bits >> 56); pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits >> 56L); bytes[s + 1] = (byte) (bits >> 48L); bytes[s + 2] = (byte) (bits >> 40L); bytes[s + 3] = (byte) (bits >> 32L); bytes[s + 4] = (byte) (bits >> 24L); bytes[s + 5] = (byte) (bits >> 16L); bytes[s + 6] = (byte) (bits >> 8L); bytes[s + 7] = (byte) bits; pos = s + 8; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); final int s = pos; int newcount = ensureCapacity(8); writeLong(Double.doubleToLongBits(v)); pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong(v); }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); final int s = pos; int newcount = ensureCapacity(8); bytes[s] = (byte) (bits); bytes[s + 1] = (byte) (bits >> 8); bytes[s + 2] = (byte) (bits >> 16); bytes[s + 3] = (byte) (bits >> 24); bytes[s + 4] = (byte) (bits >> 32); bytes[s + 5] = (byte) (bits >> 40); bytes[s + 6] = (byte) (bits >> 48); bytes[s + 7] = (byte) (bits >> 56); pos = s + 8; }']","['public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong bits; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; pos = ensureCapacity(8); }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong (bits); }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); int newcount = ensureCapacity(8); pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong (bits); final int s = pos; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong (bits); int newcount = ensureCapacity(8); pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final int s = pos; int newcount = ensureCapacity(8); pos = newcount; }', 'public void writeDouble(double v) { final long bits = Double.doubleToLongBits(v); writeLong (bits); final int s = pos; int newcount = ensureCapacity(8); pos = newcount; }']",True,False,True,True,False,False,False,False,0.0,0.03022724762539571,0.0,0.0
"['public void testOnSwitch() { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); } catch (Exception e) { } verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); } catch (Exception e) { throw new RuntimeException(e); } verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); }', 'public void testOnSwitch() throws RuntimeException { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); } catch (Exception e) { throw new Exception(e); } verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); }', 'public void testOnSwitch() { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); } catch (Exception e) { throw new Exception(); } verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); } catch (Exception e) { } verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); throw new Exception(); }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); } catch (Exception e) { throw new Exception(); } verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); } catch (Exception e) { throw new Exception(); } verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); throw new RuntimeException(); }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); } catch (Exception e) { throw new Exception(); } verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); throw new Exception(); }']","['public void testOnSwitch() throws RuntimeException { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() throws Throwable { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() throws Error { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() throws RuntimeException, Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() throws Throwable, Error { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() throws Exception, RuntimeException { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() throws Exception, Error { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() throws RuntimeException, Throwable { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}']","['public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n    throws new Exception(); \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n    if (true) { throws new Exception(); } \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n    Exception new Exception(); \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n    new Exception(); \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n    Exception newEx = new Exception(); \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n    if (true) { new Exception(); } \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n    Exception newEx = new Exception(); \n    newEx = new Exception(); \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n    new Exception(); \n    new Exception(); \n}', 'public void testOnSwitch() throws Exception { \n    final String defSetId = ""defSetId""; \n    final Diagram diagram = mock(Diagram.class); \n    final String shapeDefId = ""shapeDefId""; \n    tested.onSwitch(diagram,defSetId,shapeDefId); \n    verify(view,times(1)).showLoading(); \n    verify(view,times(1)).hideBusyIndicator(); \n    verify(sessionEditorPresenter,times(1)).destroy(); \n    verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); \n    Exception newEx = new Exception(); \n    if (true) { newEx = new Exception(); } \n}']","[""' followed by the complete revised method."", 'public void testOnSwitch() { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); } catch (Exception e) { throw e; } }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); } catch (Exception e) { throw new Exception(); } }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); } catch (Exception e) { throw new Exception(); } }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); } catch (Exception e) { throw new Exception(); } }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); } catch (Exception e) { throw new Exception(); } }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); } catch (Exception e) { throw new Exception(); } }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); } catch (Exception e) { throw new Exception(); } }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); } catch (Exception e) { throw new Exception(); } }', 'public void testOnSwitch() throws Exception { final String defSetId = ""defSetId""; final Diagram diagram = mock(Diagram.class); final String shapeDefId = ""shapeDefId""; try { tested.onSwitch(diagram,defSetId,shapeDefId); verify(view,times(1)).showLoading(); verify(view,times(1)).hideBusyIndicator(); verify(sessionEditorPresenter,times(1)).destroy(); verify(sessionEditorPresenter,times(1)).open(any(ProjectDiagram.class),any(SessionPresenter.SessionPresenterCallback.class)); } catch (Exception e) { throw new Exception(); } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.49358440497496947,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000L); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000L); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000L); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000L); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }']","['public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000L); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,1000L * DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3, (long) (DateTimeUtils.dateToLong(date) * 1000)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3, (long) (1000 * DateTimeUtils.dateToLong(date))); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,1000L * (long) DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3, (long) (1000L * DateTimeUtils.dateToLong(date))); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,1000 * (long) DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3, (long) DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }']","['public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000L); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000, 0); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000L, 10); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000L, 100); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000L, 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000L, 10000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000L, 100000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,date.toEpochSecond(ZoneOffset.UTC) * 1000L, 1000000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }']","['public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date)); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }', 'public CalibrationSet getMostRecentCalibrations(DataSource dataSource,long instrumentId,LocalDateTime date) throws CalibrationException,DatabaseException,MissingParamException,RecordNotFoundException { Connection conn = null; CalibrationSet result = new CalibrationSet(instrumentId,getCalibrationType(),getTargets(dataSource,instrumentId)); PreparedStatement stmt = null; ResultSet records = null; try { conn = dataSource.getConnection(); stmt = conn.prepareStatement(GET_RECENT_CALIBRATIONS_QUERY); stmt.setLong(1,instrumentId); stmt.setString(2,getCalibrationType()); stmt.setLong(3,DateTimeUtils.dateToLong(date) * 1000); records = stmt.executeQuery(); while (!result.isComplete() && records.next()) { String target = records.getString(1); if (!result.containsTarget(target)) { LocalDateTime deploymentDate = DateTimeUtils.longToDate(records.getLong(2)); List<Double> coefficients = StringUtils.delimitedToDoubleList(records.getString(3)); String calibrationClass = records.getString(4); Calibration calibration = CalibrationFactory.createCalibration(getCalibrationType(),calibrationClass,instrumentId,deploymentDate,target,coefficients); result.add(calibration); } } } catch (SQLException e) { throw new DatabaseException(""Error while retrieving calibrations"",e); } finally { DatabaseUtils.closeResultSets(records); DatabaseUtils.closeStatements(stmt); DatabaseUtils.closeConnection(conn); } return result; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java']","['public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Merged changes"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Merge commit"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial changes"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Commit changes"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Merged file"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""File changes"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Project changes"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Merge files"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Commit file"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""Initial file"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src/Main.java""; GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); File file = testRepo.createFile(iProject, fileName); testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); testRepo.addToIndex(iProject.getFile("".classpath"")); testRepo.addToIndex(iProject.getFile("".project"")); testRepo.commit(""project files""); IFile workspaceFile = testRepo.getIFile(iProject, file); ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); testRepo.appendFileContent(file, ""some changes""); Status status = new Git(repo).status().call(); assertEquals(0, status.getAdded().size()); assertEquals(1, status.getModified().size()); String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); assertTrue(status.getModified().contains(repoRelativePath)); GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); mergeContext.markAsMerged(node, true, null); status = new Git(repo).status().call(); assertEquals(1, status.getChanged().size()); assertEquals(0, status.getModified().size()); assertTrue(status.getChanged().contains(repoRelativePath)); }', 'public void markAsMerged() throws Exception { new Git(repo).commit().setMessage(""File merge"").call(); GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); String fileName = ""src']","['public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    assertEquals(0, status.getAdded().size()); \n    assertEquals(1, status.getModified().size()); \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    assertEquals(1, status.getChanged().size()); \n    assertEquals(0, status.getModified().size()); \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n}', 'public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    setAuthor(""JUnit"", ""junit@egit.org""); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    assertEquals(0, status.getAdded().size()); \n    assertEquals(1, status.getModified().size()); \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    assertEquals(1, status.getChanged().size()); \n    assertEquals(0, status.getModified().size()); \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n}', 'public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    setAuthor(""JUnit"", ""junit@egit.org""); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    assertEquals(0, status.getAdded().size()); \n    assertEquals(1, status.getModified().size()); \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    assertEquals(1, status.getChanged().size()); \n    assertEquals(0, status.getModified().size()); \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n}', 'public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    setAuthor(""JUnit"", ""junit@egit.org""); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    assertEquals(0, status.getAdded().size()); \n    assertEquals(1, status.getModified().size()); \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    assertEquals(1, status.getChanged().size()); \n    assertEquals(0, status.getModified().size()); \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n}', 'public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    setAuthor(""JUnit"", ""junit@egit.org""); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    assertEquals(0, status.getAdded().size()); \n    assertEquals(1, status.getModified().size()); \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    assertEquals(1, status.getChanged().size()); \n    assertEquals(0, status.getModified().size()); \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n}', 'public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    setAuthor(""JUnit"", ""junit@egit.org""); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    assertEquals(0, status.getAdded().size()); \n    assertEquals(1, status.getModified().size()); \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    assertEquals(1, status.getChanged().size()); \n    assertEquals(0, status.getModified().size()); \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n}', 'public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    setAuthor(""JUnit"", ""junit@egit.org""); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    assertEquals(0, status.getAdded().size()); \n    assertEquals(1, status.getModified().size()); \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    assertEquals(1, status.getChanged().size()); \n    assertEquals(0, status.getModified().size()); \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n}', 'public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    setAuthor(""JUnit"", ""junit@egit.org""); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    assertEquals(0, status.getAdded().size()); \n    assertEquals(1, status.getModified().size()); \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    assertEquals(1, status.getChanged().size()); \n    assertEquals(0, status.getModified().size()); \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n}', 'public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    setAuthor(""JUnit"", ""junit@egit.org""); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile = testRepo.getIFile(iProject, file); \n    ResourceMapping mapping = new SimpleResourceMapping(workspaceFile); \n    ResourceMapping[] inputMappings = new ResourceMapping[] { mapping }; \n    SubscriberScopeManager manager = new SubscriberScopeManager(""Scope"", inputMappings, subscriber, true); \n    testRepo.appendFileContent(file, ""some changes""); \n    Status status = new Git(repo).status().call(); \n    assertEquals(0, status.getAdded().size()); \n    assertEquals(1, status.getModified().size()); \n    String repoRelativePath = testRepo.getRepoRelativePath(workspaceFile.getLocation().toPortableString()); \n    assertTrue(status.getModified().contains(repoRelativePath)); \n    GitSubscriberMergeContext mergeContext = new GitSubscriberMergeContext(subscriber, manager, gsds); \n    IDiff node = new ResourceDiff(iProject.getFolder(""src""), IDiff.CHANGE); \n    mergeContext.markAsMerged(node, true, null); \n    status = new Git(repo).status().call(); \n    assertEquals(1, status.getChanged().size()); \n    assertEquals(0, status.getModified().size()); \n    assertTrue(status.getChanged().contains(repoRelativePath)); \n}', 'public void markAsMerged() throws Exception { \n    new Git(repo).commit().setMessage(""Initial commit"").call(); \n    setAuthor(""JUnit"", ""junit@egit.org""); \n    GitSynchronizeData gsd = new GitSynchronizeData(repo, HEAD, HEAD, false); \n    GitSynchronizeDataSet gsds = new GitSynchronizeDataSet(gsd); \n    String fileName = ""src/Main.java""; \n    GitResourceVariantTreeSubscriber subscriber = new GitResourceVariantTreeSubscriber(gsds); \n    File file = testRepo.createFile(iProject, fileName); \n    testRepo.appendContentAndCommit(iProject, file, ""class Main {}"", ""some file""); \n    testRepo.addToIndex(iProject.getFile("".classpath"")); \n    testRepo.addToIndex(iProject.getFile("".project"")); \n    testRepo.commit(""project files""); \n    IFile workspaceFile =']",[],False,False,False,False,False,False,False,False,0.9437815816129685,0.9437815816129685,0.9437815816129685,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is invalid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Proposal is not negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is not valid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Proposal not negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is invalid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Proposal is invalid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal not valid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid proposal negotiated.""); } return respProposal.saProposal; }']","['public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is invalid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Proposal is not negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid proposal negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is not valid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Proposal not negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is invalid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal not valid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Proposal is invalid.""); } return respProposal.saProposal; }']","['public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is invalid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Proposal is not negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is not valid.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid proposal negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Proposal not negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is invalid or not negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Negotiated proposal is not valid or not negotiated.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Invalid or not negotiated proposal.""); } return respProposal.saProposal; }', 'public SaProposal getVerifiedNegotiatedProposal(IkeSaPayload reqSaPayload) throws NoValidProposalChosenException { if (!isSaResponse) { throw new UnsupportedOperationException(""Cannot get negotiated SA proposal from a request message.""); } Proposal respProposal = proposalList.get(0); if (respProposal.hasUnrecognizedTransform) { throw new NoValidProposalChosenException(""Negotiated proposal has unrecognized Transform.""); } List<Proposal> reqProposalList = reqSaPayload.proposalList; int negotiatedProposalNum = proposalList.get(0).number; if (negotiatedProposalNum < 1 || negotiatedProposalNum > reqProposalList.size()) { throw new NoValidProposalChosenException(""Negotiated proposal has invalid proposal number.""); } Proposal reqProposal = reqProposalList.get(negotiatedProposalNum - 1); if (!respProposal.isNegotiatedFrom(reqProposal)) { throw new NoValidProposalChosenException(""Proposal is not valid or negotiated.""); } return respProposal.saProposal; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.forEach((k, v) -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(k, v)); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().stream().forEach((ignore) -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { String key = ignore.getKey(); String value = ignore.getValue(); calcitePlanTreeJSON = calcitePlanTreeJSON.replace(key, value); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.forEach((k, v) -> { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(k, v); }); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().stream().forEach(ignore -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().forEach(ignore -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(), ignore.getValue()); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().stream().forEach((ignore) -> { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(), ignore.getValue()); }); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.forEach((k, v) -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(k, v)); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }']","['private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().forEach(ignore -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); if (ignoreMap != null) { ignoreMap.entrySet().forEach(ignore -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.forEach((ignoreKey, ignoreValue) -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignoreKey,ignoreValue)); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().forEach(ignore -> { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); }); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.forEach((ignoreKey, ignoreValue) -> { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignoreKey,ignoreValue); }); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { String newKey = ignore.getKey(); String newValue = ignore.getValue(); calcitePlanTreeJSON = calcitePlanTreeJSON.replace(newKey, newValue); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().forEach(ignore -> { String newKey = ignore.getKey(); String newValue = ignore.getValue(); calcitePlanTreeJSON = calcitePlanTreeJSON.replace(newKey, newValue); }); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }']","['private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n    } \n    assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); \n    } \n    assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n    } \n    if (calcitePlanTreeJSON != null) assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        }); \n    } \n    assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n    } \n    if (ignoreMap != null) assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n        assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n            assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n        }); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n            assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n        } \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        ignoreMap.entrySet().forEach(ignore -> { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        }); \n        if (calcitePlanTreeJSON != null) assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { \n    PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); \n    PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); \n    String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); \n    String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); \n    if (ignoreMap != null) { \n        for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { \n            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); \n        } \n        if (ignoreMap != null) if (calcitePlanTreeJSON != null) assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); \n    } \n}']","['private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.forEach((ignoreKey, ignoreValue) -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignoreKey,ignoreValue)); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().stream().forEach(ignore -> calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue())); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.forEach((ignoreKey, ignoreValue) -> { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignoreKey,ignoreValue); }); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().stream().forEach(ignore -> { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(),ignore.getValue()); }); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { String newKey = ignore.getKey(); String newValue = ignore.getValue(); calcitePlanTreeJSON = calcitePlanTreeJSON.replace(newKey, newValue); } assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.forEach((ignoreKey, ignoreValue) -> { String newKey = ignoreKey; String newValue = ignoreValue; calcitePlanTreeJSON = calcitePlanTreeJSON.replace(newKey, newValue); }); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); ignoreMap.entrySet().stream().forEach(ignore -> { String newKey = ignore.getKey(); String newValue = ignore.getValue(); calcitePlanTreeJSON = calcitePlanTreeJSON.replace(newKey, newValue); }); assertEquals(voltdbPlanTreeJSON,calcitePlanTreeJSON); }', 'private void comparePlanTree(AbstractPlanNode calcitePlanNode,AbstractPlanNode voltdbPlanNode,Map<String,String> ignoreMap) { PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode); PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode); String calcitePlanTreeJSON = calcitePlanTree.toJSONString(); String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString(); for (Map.Entry<String,String> ignore : ignoreMap.entrySet()) { calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(), ignore.getValue()); } assertEquals(voltdbPlanTreeJSON, calcitePlanTreeJSON); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.5486134457022311,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }']","['public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { HashMap<String,String> configs = new HashMap<>(super.toConfig()); String streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { HashMap<String,String> configs = new HashMap<>(super.toConfig()); String streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }']","['public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    if (getPhysicalName().isPresent()) { \n        streamName = getPhysicalName().orElse(getStreamId()); \n    } else { \n        streamName = getStreamId(); \n    } \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    if (getPhysicalName().isPresent()) { \n        streamName = getPhysicalName().get(); \n    } else { \n        streamName = getStreamId(); \n    } \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    if (getPhysicalName().isPresent()) { \n        streamName = getPhysicalName().orElseThrow(); \n    } else { \n        streamName = getStreamId(); \n    } \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    if (getPhysicalName().isPresent()) { \n        streamName = getPhysicalName().orElseThrow(() -> new RuntimeException()); \n    } else { \n        streamName = getStreamId(); \n    } \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    getPhysicalName().ifPresent(physicalName -> streamName = physicalName); \n    if (streamName == null) { \n        streamName = getStreamId(); \n    } \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    streamName = getPhysicalName().orElse(getStreamId()); \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    if (getPhysicalName().isPresent()) { \n        streamName = getPhysicalName().get(); \n        if (streamName == null) { \n            streamName = getStreamId(); \n        } \n    } else { \n        streamName = getStreamId(); \n    } \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    getPhysicalName().ifPresent(physicalName -> { \n        if (physicalName == null) { \n            streamName = getStreamId(); \n        } else { \n            streamName = physicalName; \n        } \n    }); \n    if (streamName == null) { \n        streamName = getStreamId(); \n    } \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    if (getPhysicalName().isPresent()) { \n        streamName = getPhysicalName().orElseThrow(() -> new RuntimeException()); \n    } else { \n        streamName = getStreamId(); \n    } \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    streamName = getPhysicalName().orElseThrow(() -> new RuntimeException()); \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}', 'public Map<String,String> toConfig() { \n    String streamName; \n    HashMap<String,String> configs = new HashMap<>(super.toConfig()); \n    if (getPhysicalName().isPresent()) { \n        streamName = getPhysicalName().orElseThrow(() -> new RuntimeException()); \n    } else { \n        streamName = getStreamId(); \n    } \n    String systemName = getSystemName(); \n    consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); \n    consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); \n    return configs; \n}']","['public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName; HashMap<String,String> configs = new HashMap<>(super.toConfig()); streamName = getPhysicalName().orElse(getStreamId()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }', 'public Map<String,String> toConfig() { String streamName = getPhysicalName().orElse(getStreamId()); HashMap<String,String> configs = new HashMap<>(super.toConfig()); String systemName = getSystemName(); consumerAutoOffsetResetOptional.ifPresent(autoOffsetReset -> configs.put(String.format(CONSUMER_AUTO_OFFSET_RESET_CONFIG_KEY,systemName,streamName),autoOffsetReset)); consumerFetchMessageMaxBytesOptional.ifPresent(fetchMessageMaxBytes -> configs.put(String.format(CONSUMER_FETCH_MESSAGE_MAX_BYTES_CONFIG_KEY,systemName,streamName),Long.toString(fetchMessageMaxBytes))); return configs; }']",False,True,False,False,False,False,False,False,0.23205434227933766,0.0,0.23205434227933766,0.23205434227933766
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""baz"",""bazValue""), mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""baz"",""bazValue""), mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""baz"",""bazValue""), mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""baz"",""bazValue""), mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"", ""baz"", ""bazValue"").entrySet()),response.getMetadata()); }']","['public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue1"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue1"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""baz1"",""bazValue1"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue1""), mockProperty(""bar"",""barValue"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue1""), mockProperty(""baz"",""bazValue1"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz1"",""bazValue1""), mockProperty(""baz2"",""bazValue2"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue2""), mockProperty(""bar"",""barValue1"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue3"")), new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }']","['public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""new"",""newValue"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""foo2"",""fooValue2"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue""), mockProperty(""foo3"",""fooValue3"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""foo4"",""fooValue4"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue""), mockProperty(""new2"",""newValue2"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""baz"",""bazValue""), mockProperty(""bar"",""barValue""), mockProperty(""foo5"",""fooValue5"")), AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }']","['public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"",""baz"",""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"",""baz"",""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"",""baz"",""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"",""baz"",""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"",""baz"",""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"",""baz"",""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"",""baz"",""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObjectStore(); mockDocument(os,id,DOCUMENT_TIMESTAMP,RELEASED,42d,""text/plain"",ImmutableList.<Property>of( mockProperty(""foo"",""fooValue""), mockProperty(""bar"",""barValue""), mockProperty(""baz"",""bazValue"")),new AccessPermissionListMock(),new ActiveMarkingListMock()); Request request = new MockRequest(docId); DocumentTraverser traverser = new DocumentTraverser(options); RecordingResponse response = new RecordingResponse(); traverser.getDocContent(new Id(id),request,response); assertEquals(new Metadata(ImmutableMap.of(""foo"",""fooValue"",""baz"",""bazValue"").entrySet()),response.getMetadata()); }', 'public void testGetDocContent_excludedMetadata() throws Exception { options = TestObjectFactory.newConfigOptions(ImmutableMap.of(""filenet.includedMetadata"",""foo,bar"",""filenet.excludedMetadata"",""bar"")); String id = ""{AAAAAAAA-0000-0000-0000-000000000000}""; DocId docId = newDocId(new Id(id)); MockObjectStore os = getObject']",True,True,False,True,False,False,False,False,0.0,0.0,0.3972944824455242,0.0
"['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = client.getAllSessionVariables().keySet().stream().collect(Collectors.toList()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }']","['public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }', 'public final void testSessionVariables() throws IOException, TajoException, InterruptedException { String prefixValue = ""val_""; String prefixName = ""key_""; List<String> unsetList = new ArrayList<>(client.getAllSessionVariables().keySet()); client.unsetSessionVariables(unsetList); for (int i = 0; i < 10; i++) { String key = prefixName + i; String val = prefixValue + i; assertEquals(i + 4, client.getAllSessionVariables().size()); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); Map<String, String> map = Maps.newHashMap(); map.put(key, val); client.updateSessionVariables(map); assertEquals(i + 5, client.getAllSessionVariables().size()); assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); } int totalSessionVarNum = client.getAllSessionVariables().size(); for (int i = 0; i < 10; i++) { String key = prefixName + i; assertTrue(client.getAllSessionVariables().containsKey(key)); assertTrue(client.existSessionVariable(key)); client.unsetSessionVariables(Lists.newArrayList(key)); assertFalse(client.getAllSessionVariables().containsKey(key)); assertFalse(client.existSessionVariable(key)); } assertEquals(totalSessionVarNum - 10, client.getAllSessionVariables().size()); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); String login = issue.getCreator().toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); } return false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); if ( login.contains(content) || name.contains(content) ) return true; } return false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); String login = issue.getCreator().toLowerCase(); return ( login.contains(content) || name.contains(content) ) ? true : false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return issue.getCreator().toLowerCase().contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); boolean logincontains = login.contains(content); boolean namecontains = name.contains(content); return logincontains || namecontains; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); String login = issue.getCreator().toLowerCase(); boolean result = login.contains(content) || name.contains(content); return result; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) return login.contains(content) || name.contains(content); return false; }']","['private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); } return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); String login = issue.getCreator().toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); } return false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); if ( login.contains(content) || name.contains(content) ) return true; } return false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); String login = issue.getCreator().toLowerCase(); return ( login.contains(content) || name.contains(content) ) ? true : false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return issue.getCreator().toLowerCase().contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); boolean isAuthor = login.contains(content) || name.contains(content); return isAuthor; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); String login = issue.getCreator().toLowerCase(); boolean isAuthor = ( login.contains(content) || name.contains(content) ) ? true : false; return isAuthor; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); String login = issue.getCreator().toLowerCase(); boolean isAuthor = login.contains(content) || name.contains(content); return isAuthor ? true : false; }']","['private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String name = """"; String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); } }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); } }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { return login.contains(content) || author.map(TurboUser::getRealName) .orElse("""").toLowerCase().contains(content); } }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { return login.contains(content) || author.map(TurboUser::getRealName) .orElse("""").toLowerCase().contains(content); } return false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); if (author.isPresent()) { return login.contains(content) || name.contains(content); } }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); } return false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); if (author.isPresent()) return login.contains(content) || name.contains(content); return false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); return author.map(TurboUser::getRealName) .orElse("""").toLowerCase().contains(content) || login.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); return author.map(TurboUser::getRealName) .orElse("""").toLowerCase().contains(content) || login.contains(content); }']","['private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.get().getRealName() == null ? """" : author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); if (author.isPresent()) return login.contains(content) || name.contains(content); return false; }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); if (content == null || content.isEmpty()) return false; return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return (content == null || content.isEmpty()) ? false : login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); return (content == null || content.isEmpty()) ? false : login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); if (content == null || content.isEmpty()) return false; return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); if (author.isPresent()) { String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); if (content.isEmpty()) return false; return login.contains(content) || name.contains(content); }', 'private boolean authorSatisfies(IModel model,TurboIssue issue) { if (!content.isPresent()) return false; Optional<TurboUser> author = model.getAuthorOfIssue(issue); String content = this.content.get().toLowerCase(); String login = issue.getCreator().toLowerCase(); String name = author.map(TurboUser::getRealName) .orElse("""").toLowerCase(); if (content.isEmpty()) return false; return login.contains(content) || name.contains(content);']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return true; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { if (match = true) return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) { return match; } } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) { break; } return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) break; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return false; }']","['private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return true; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) break; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if true; return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; break; } } } return match; }']","['private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return true; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; System.exit(0); } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; throw new RuntimeException(); } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; continue; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return false; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; System.exit(0); return match; } } } return match; }', 'private boolean isAllowed(MutableHttpServletRequest request,String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); boolean match = false; List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; throw new RuntimeException(); return match; } } } return match; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [%s] uses PSK identity [%s]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [%s] uses PSK identity [%s] for server [%s]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }']","['private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [%s] uses PSK identity [%s]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [%s] uses PSK identity [%s] for server [%s]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [%s] uses PSK identity [%s]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [%s] uses PSK identity [%s] for server [%s]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client %s uses PSK identity %s"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client %s uses PSK identity %s for server %s"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client %s uses PSK identity %s"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client %s uses PSK identity %s for server %s"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client %s uses PSK identity %s"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client %s uses PSK identity %s for server %s"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client %s uses PSK identity %s"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client %s uses PSK identity %s for server %s"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client %s uses PSK identity %s"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client %s uses PSK identity %s for server %s"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client %s uses PSK identity %s"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client %s uses PSK identity %s for server %s"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client %s uses PSK identity %s"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client %s uses PSK identity %s for server %s"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client %s uses PSK identity %s"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client %s uses PSK identity %s for server %s"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }']","['private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", new Object[]{getPeerAddress(), identity}); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", new Object[]{getPeerAddress(), identity, virtualHost}); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", new Object[]{getPeerAddress(), identity}); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", new Object[]{getPeerAddress(), identity, virtualHost}); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", new Object[]{getPeerAddress(), identity}); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", new Object[]{getPeerAddress(), identity, virtualHost}); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", new Object[]{getPeerAddress(), identity}); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", new Object[]{getPeerAddress(), identity, virtualHost}); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", new Object[]{getPeerAddress(), identity}); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", new Object[]{getPeerAddress(), identity, virtualHost}); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }']","['private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [%s] uses PSK identity [%s]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [%s] uses PSK identity [%s] for server [%s]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }', 'private byte[] receivedClientKeyExchange(final PSKClientKeyExchange message) throws HandshakeException { clientKeyExchange = message; String identity = message.getIdentity(); String virtualHost = null; byte[] psk = pskStore.getKey(getIndicatedServerNames(), identity); if (getIndicatedServerNames() == null) { LOGGER.debug(""Client [{}] uses PSK identity [{}]"", getPeerAddress(), identity); } else { ServerName serverName = getIndicatedServerNames().getServerName(NameType.HOST_NAME); if (serverName == null) { LOGGER.debug(""client provided invalid SNI extension which doesn\'t include a hostname""); } else { virtualHost = new String(serverName.getName(), ServerName.CHARSET); LOGGER.debug(""Client [{}] uses PSK identity [{}] for server [{}]"", getPeerAddress(), identity, virtualHost); } } if (psk == null) { throw new HandshakeException(String.format(""Cannot authenticate client, identity [%s] is unknown"", identity), new AlertMessage(AlertLevel.FATAL, AlertDescription.UNKNOWN_PSK_IDENTITY, session.getPeer())); } else { session.setPeerIdentity(new PreSharedKeyIdentity(virtualHost, identity)); return generatePremasterSecretFromPSK(psk); } }']",True,False,True,True,False,False,False,False,0.0,0.8239706930487279,0.0,0.0
"['public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); if(entityHasExtensionJobTag(entity)); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); if(entityHasExtensionJobTag(entity)) { } validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }']","['public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); if(entityHasExtensionJobTag(entity)); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); if(entityHasExtensionJobTag(entity)) { } validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }']","['public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); if(entityHasExtensionJobTag(entity)) { validateEntity(entity,colos); } results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); if(entityHasExtensionJobTag(entity)) { } else { validateEntity(entity,colos); } results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); if(entityHasExtensionJobTag(entity)) { validateEntity(entity,colos); } results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); if(entityHasExtensionJobTag(entity)) { entityHasExtensionJobTag(entity); validateEntity(entity,colos); } results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); if(entityHasExtensionJobTag(entity)) { } results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); if(entityHasExtensionJobTag(entity)) { entityHasExtensionJobTag(entity); } validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); if(entityHasExtensionJobTag(entity)) { } else { } validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); if(entityHasExtensionJobTag(entity)) { } validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }', 'public APIResult submit(@Context HttpServletRequest request,@Dimension(""entityType"") @PathParam(""type"") final String type,@Dimension(""colo"") @QueryParam(""colo"") final String ignore) { final HttpServletRequest bufferedRequest = getBufferedRequest(request); Map<String,APIResult> results = new HashMap<String,APIResult>(); final Entity entity = getEntity(bufferedRequest,type); final Set<String> colos = getApplicableColos(type,entity); entityHasExtensionJobTag(entity); validateEntity(entity,colos); results.put(FALCON_TAG,new EntityProxy(type,entity.getName()) { @Override protected Set<String> getColosToApply() { return colos; } @Override protected APIResult doExecute(String colo) throws FalconException { return getConfigSyncChannel(colo).invoke(""submit"",bufferedRequest,type,colo); } }.execute()); if (!embeddedMode) { results.put(PRISM_TAG,super.submit(bufferedRequest,type,currentColo)); } return consolidateResult(results,APIResult.class); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new RuntimeException(e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new RuntimeException(""Unknown exception"",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new IllegalStateException(e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new IllegalStateException(""Unknown exception thrown"",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new RuntimeException(""Exception while recording daily last value"",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new RuntimeException(e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new IllegalStateException(""Exception while recording"",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new RuntimeException(""Unknown exception while recording daily last"",e); } } }']","['private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new RuntimeException(e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new RuntimeException(""Unknown exception"",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new IllegalStateException(e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new IllegalStateException(""Unknown exception thrown"",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new RuntimeException(""Exception thrown"",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new RuntimeException(e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new IllegalStateException(""Exception thrown while recording"",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } } }']","['private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } } Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value.""); }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); return; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); throw new IllegalStateException(""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw new IllegalStateException(""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); throw new RuntimeException(""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); throw new RuntimeException(""Unknown exception thrown while recording daily last value."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); } } }']","['private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value."",e); throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Exception thrown while recording daily last value."",e); throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value: "" + e.toString(),e); throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Exception thrown while recording daily last value for env: "" + envString + "" and field: "" + fieldIDString + "" and day: "" + dayString,e); throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value for table: "" + table,e); throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Exception thrown while recording daily last value for table: "" + table + "" and env: "" + envString + "" and field: "" + fieldIDString,e); throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Unknown exception thrown while recording daily last value for table: "" + table + "" and env: "" + envString + "" and field: "" + fieldIDString + "" and day: "" + dayString,e); throw e; } } }', 'private void recordDailyLast(int env,int day,int field,Object value,String table) { if (env == -1) { Logger.warn(LOG_TAG,""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field,10); final ContentValues v = new ContentValues(); final String dayString = Integer.toString(day,10); putValue(v,value); final int updated = db.update(table,v,WHERE_DATE_AND_ENV_AND_FIELD,new String[] { dayString,envString,fieldIDString }); if (0 == updated) { v.put(""env"",env); v.put(""field"",field); v.put(""date"",day); try { db.insertOrThrow(table,null,v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."",e); } catch (Exception e) { Logger.error(LOG_TAG,""Exception thrown while recording daily last value: "" + e.toString(),e); throw e; } } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0B1100110L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0x1100110L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0x66L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1010L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0x102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b10010L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b110100L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }']","['public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b1100110L, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b1100110L, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, 0b1100110L, null, Long.MAX_VALUE, Long.MAX_VALUE, null, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, 0b1100110L, Long.MAX_VALUE, Long.MAX_VALUE, null, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0b1100110L, null, null, Long.MAX_VALUE, Long.MAX_VALUE, null, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, 0b1100110L, Long.MAX_VALUE, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, 0b1100110L, Long.MAX_VALUE, Long.MAX_VALUE, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b1100110L, 10010L, 0xFFL, 0b1100110L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b1100110L, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0b1100110L, null, null, Long.MAX_VALUE, Long.MAX_VALUE, null, 10010L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }']","['public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 102L, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, null, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0b1100110L, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, null, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 102L, 0xFFL, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, null, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0b1100110L, 0xFFL, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, null, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 102L, null, 0xFFL, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, null, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0b1100110L, null, 0xFFL, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, null, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 102L, 0xFFL, 0xFFL, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, null, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 0b1100110L, 0xFFL, 0xFFL, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, null, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Long[] expectedLongValues = { 42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, 102L, null, 102L, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, null, 0xFFL, 102L }; Integer[] expectedIntegerValues = { 42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110 }; int i = 0; int j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.8982709330397213,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""key"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""specialkey"", ""specialvalue""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""special reason"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""key"", ""specialvalue""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""special"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""specialkey"", ""special""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""special reason previous"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""key"", ""special reason""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""specialkey"", ""special reason""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""special"", ""special reason""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }']","['public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""key"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""key1"", ""value1""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""test"", ""test""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""save"", ""save""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""xml"", ""xml""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""value"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""testkey"", ""testvalue""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""saveAsXml"", ""saveAsXml""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""keyvalue"", ""keyvalue""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""metadata"", ""metadata""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }']","['public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = Collections.singletonMap(""key"", ""value""); this empty HashMap final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key1"", ""value1""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key1"", ""value1""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", ""value""); attributes.put(""key1"", ""value1""); attributes.put(""key2"", ""value2""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""1"", ""value""); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", 1); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", new String(""value"")); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", new HashMap<>()); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }', 'public void testSaveAsXml() { final String comment = ""comment""; final String xml = ""xml""; final Map<String,Object> attributes = new HashMap<>(); attributes.put(""key"", new ArrayList<>()); final Path path = mock(Path.class); final Metadata metadata = mock(Metadata.class); final CommentedOption options = mock(CommentedOption.class); when(metadataService.setUpAttributes(path,metadata)).thenReturn(attributes); when(commentedOptionFactory.makeCommentedOption(comment)).thenReturn(options); diagramService.saveAsXml(path,xml,metadata,comment); verify(diagramServiceController,times(1)).saveAsXml(eq(path),eq(xml),eq(attributes),eq(options)); }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.5670386256982197,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) >= 0) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) > -1) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while (in.read(buff) >= 0) { n = in.read(buff); out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) != -1) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) >= -1) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) != -1) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) > -1) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) >= 0) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while (in.read(buff) != -1) { n = in.read(buff); if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) != -1) { if (n >= 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }']","['private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) >= 0) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) >= 0) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ( (n = in.read(buff)) != -1) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while (in.read(buff) >= 0) { n = in.read(buff); out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) != -1) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; for (;;) { n = in.read(buff); if (n < 0) break; out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; for (;;) { n = in.read(buff); if (n >= 0) out.write(buff,0,n); else break; } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; do { n = in.read(buff); out.write(buff,0,n); } while (n >= 0); buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; do { n = in.read(buff); if (n > 0) out.write(buff,0,n); } while (n >= 0); buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; do { n = in.read(buff); if (n != -1) out.write(buff,0,n); } while (n >= 0); buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }']","['private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; if ((n = in.read(buff)) >= 0) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) >= 0) { if (n > 0) { out.write(buff,0,n); } } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) > -1) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) > -1) { if (n > 0) { out.write(buff,0,n); } } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) >= 0) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) > -1) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) > 0) { out.write(buff,0,n); } if (n < 0) { buff = out.toByteArray(); } } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) > -1) { if (n > 0) { out.write(buff,0,n); } } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) >= 0) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) > -1) { if (n > 0) { out.write(buff,0,n); } } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }']","['private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) >= 0) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ((n = in.read(buff)) > -1) { out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ( (n = in.read(buff)) >= 0) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ( (n = in.read(buff)) > -1) { if (n > 0) out.write(buff,0,n); } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ( (n = in.read(buff)) >= 0) { if (n > 0) { out.write(buff,0,n); } } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ( (n = in.read(buff)) > -1) { if (n > 0) { out.write(buff,0,n); } } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ( (n = in.read(buff)) >= 0) { if (n > 0) { out.write(buff,0,n); } else { break; } } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ( (n = in.read(buff)) > -1) { if (n > 0) { out.write(buff,0,n); } else { break; } } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ( (n = in.read(buff)) >= 0) { if (n > 0) out.write(buff,0,n); else break; } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }', 'private byte[] getBytesFromStream(@NonNull InputStream in) { byte[] buff = new byte[MAX_CACHED_CONTENT_LENGTH]; final ByteArrayOutputStream out = new ByteArrayOutputStream(); try { int n; while ( (n = in.read(buff)) > -1) { if (n > 0) out.write(buff,0,n); else break; } buff = out.toByteArray(); } catch (IOException e) { final String msg = ""Failed reading blob content stream: "" + in; Log.w(DOMAIN,msg,e); throw new IllegalStateException(msg,e); } finally { try { out.close(); } catch (IOException ignore) { } } blobLength = cacheContent(buff); return buff; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new LinkedList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new Vector<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new Stack<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<String>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new CopyOnWriteArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new LinkedList<String>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new Vector<String>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new Stack<String>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new CopyOnWriteArrayList<String>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }']","['public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }']","['public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<String>(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (int i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(),e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList(); \n    DocumentBuilder db; \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document;']","['public static ArrayList<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static ArrayList<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<String>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<String>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static ArrayList<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return references; }', 'public static ArrayList<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return new ArrayList<String>(); }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return new ArrayList<String>(); }', 'public static ArrayList<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<String>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return new ArrayList<String>(); }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<String>(); DocumentBuilder db; DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setAttribute(""<LINK_0>"",Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(),e); } return new ArrayList<String>(); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo)); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build().build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build().build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo)); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build().build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build().build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE); }']","['public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build().build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build().build().build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo)); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build().build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build().build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build().build().build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build().build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build().build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }']","['public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo)); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo)); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); this.autolinker.get().forResource(getClass(),this.uriInfo).build(); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); this.autolinker.get().forResource(getClass(),this.uriInfo).build(); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); this.autolinker.get().forResource(getClass(),this.uriInfo).build(); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo)); trms.put(trm); this.autolinker.get().forResource(getClass(),this.uriInfo).build(); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); this.autolinker.get().forResource(getClass(),this.uriInfo).build(); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }']","['public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo)); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok().build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).entity(rep).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).entity(rep).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep).entity(rep).build(); }', 'public Response suggest(String vocabularyId,String input,@DefaultValue(""10"") int maxResults,String sort,String customFilter) { if (StringUtils.isEmpty(input) || StringUtils.isEmpty(vocabularyId)) { throw new WebApplicationException(Response.Status.BAD_REQUEST); } Vocabulary vocabulary = this.vm.getVocabulary(vocabularyId); if (vocabulary == null) { throw new WebApplicationException(Response.Status.NOT_FOUND); } JSONObject rep = new JSONObject(); List<VocabularyTerm> termSuggestions = vocabulary.search(input,maxResults,sort,customFilter); JSONArray trms = new JSONArray(); for (VocabularyTerm term : termSuggestions) { JSONObject trm = term.toJSON(); trm.put(""links"",this.autolinker.get().forSecondaryResource(VocabularyTermResource.class,this.uriInfo).build()); trms.put(trm); } rep.put(""rows"",trms); rep.put(""links"",this.autolinker.get().forResource(getClass(),this.uriInfo).build()); return Response.ok(rep,MediaType.APPLICATION_JSON_TYPE).entity(rep).build(); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(Entity']","['public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entity']","['public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); \n    findQuery.fetch(fetch); \n    findQuery.offset(10); \n    findQuery.pageSize(10); \n    findQuery.sort(dataSort); \n    org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); \n    countQuery.offset(0); \n    countQuery.pageSize(Integer.MAX_VALUE); \n    when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); \n    when(repository.count(countQuery)).thenReturn(100L); \n    when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); \n    when(sortMapperV3.map(sort)).thenReturn(dataSort); \n    when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); \n    Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); \n    assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); \n}', 'public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery, repository); \n    findQuery.fetch(fetch); \n    findQuery.offset(10); \n    findQuery.pageSize(10); \n    findQuery.sort(dataSort); \n    org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); \n    countQuery.offset(0); \n    countQuery.pageSize(Integer.MAX_VALUE); \n    when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); \n    when(repository.count(countQuery)).thenReturn(100L); \n    when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); \n    when(sortMapperV3.map(sort)).thenReturn(dataSort); \n    when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); \n    Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); \n    assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); \n}', 'public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = QueryImpl.builder().build(findAllQuery); \n    findQuery.fetch(fetch); \n    findQuery.offset(10); \n    findQuery.pageSize(10); \n    findQuery.sort(dataSort); \n    org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); \n    countQuery.offset(0); \n    countQuery.pageSize(Integer.MAX_VALUE); \n    when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); \n    when(repository.count(countQuery)).thenReturn(100L); \n    when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); \n    when(sortMapperV3.map(sort)).thenReturn(dataSort); \n    when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); \n    Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); \n    assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); \n}', 'public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = new QueryImpl(findAllQuery, new QueryImpl(findAllQuery)); \n    findQuery.fetch(fetch); \n    findQuery.offset(10); \n    findQuery.pageSize(10); \n    findQuery.sort(dataSort); \n    org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); \n    countQuery.offset(0); \n    countQuery.pageSize(Integer.MAX_VALUE); \n    when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); \n    when(repository.count(countQuery)).thenReturn(100L); \n    when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); \n    when(sortMapperV3.map(sort)).thenReturn(dataSort); \n    when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); \n    Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); \n    assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); \n}', 'public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = new QueryImpl(findAllQuery, findAllQuery); \n    findQuery.fetch(fetch); \n    findQuery.offset(10); \n    findQuery.pageSize(10); \n    findQuery.sort(dataSort); \n    org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); \n    countQuery.offset(0); \n    countQuery.pageSize(Integer.MAX_VALUE); \n    when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); \n    when(repository.count(countQuery)).thenReturn(100L); \n    when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); \n    when(sortMapperV3.map(sort)).thenReturn(dataSort); \n    when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); \n    Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); \n    assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); \n}', 'public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = QueryImpl.of(findAllQuery); \n    findQuery.fetch(fetch); \n    findQuery.offset(10); \n    findQuery.pageSize(10); \n    findQuery.sort(dataSort); \n    org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); \n    countQuery.offset(0); \n    countQuery.pageSize(Integer.MAX_VALUE); \n    when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); \n    when(repository.count(countQuery)).thenReturn(100L); \n    when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); \n    when(sortMapperV3.map(sort)).thenReturn(dataSort); \n    when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); \n    Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); \n    assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); \n}', 'public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = new QueryImpl(findAllQuery, repository, findAllQuery); \n    findQuery.fetch(fetch); \n    findQuery.offset(10); \n    findQuery.pageSize(10); \n    findQuery.sort(dataSort); \n    org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); \n    countQuery.offset(0); \n    countQuery.pageSize(Integer.MAX_VALUE); \n    when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); \n    when(repository.count(countQuery)).thenReturn(100L); \n    when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); \n    when(sortMapperV3.map(sort)).thenReturn(dataSort); \n    when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); \n    Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); \n    assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); \n}', 'public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = new QueryImpl(findAllQuery, findAllQuery, repository); \n    findQuery.fetch(fetch); \n    findQuery.offset(10); \n    findQuery.pageSize(10); \n    findQuery.sort(dataSort); \n    org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); \n    countQuery.offset(0); \n    countQuery.pageSize(Integer.MAX_VALUE); \n    when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); \n    when(repository.count(countQuery)).thenReturn(100L); \n    when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); \n    when(sortMapperV3.map(sort)).thenReturn(dataSort); \n    when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); \n    Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); \n    assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); \n}', 'public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = new QueryImpl(findAllQuery, repository, new QueryImpl(findAllQuery)); \n    findQuery.fetch(fetch); \n    findQuery.offset(10); \n    findQuery.pageSize(10); \n    findQuery.sort(dataSort); \n    org.molgenis.data.Query<Entity> countQuery = new QueryImpl(findAllQuery); \n    countQuery.offset(0); \n    countQuery.pageSize(Integer.MAX_VALUE); \n    when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); \n    when(repository.count(countQuery)).thenReturn(100L); \n    when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); \n    when(sortMapperV3.map(sort)).thenReturn(dataSort); \n    when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); \n    Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); \n    assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); \n}', 'public void testFindAll() { \n    Selection filter = Selection.FULL_SELECTION; \n    String entityTypeId = ""MyEntityType""; \n    Selection expand = Selection.EMPTY_SELECTION; \n    Attribute idAttribute = mock(Attribute.class); \n    EntityType entityType = mock(EntityType.class); \n    Repository<Entity> repository = mock(Repository.class); \n    when(repository.getEntityType()).thenReturn(entityType); \n    Entity entity1 = mock(Entity.class); \n    Entity entity2 = mock(Entity.class); \n    Sort sort = Sort.create(""field"",Direction.ASC); \n    Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); \n    Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); \n    org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); \n    org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); \n    org.molgenis.data.Query<Entity> findQuery = Query']","['public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1); assertEquals(actual,Entities.builder().setEntities(asList(entity1,entity2)).setTotal(100).build()); }', 'public void testFindAll() { Selection filter = Selection.FULL_SELECTION; String entityTypeId = ""MyEntityType""; Selection expand = Selection.EMPTY_SELECTION; Attribute idAttribute = mock(Attribute.class); EntityType entityType = mock(EntityType.class); Repository<Entity> repository = mock(Repository.class); when(repository.getEntityType()).thenReturn(entityType); Entity entity1 = mock(Entity.class); Entity entity2 = mock(Entity.class); Sort sort = Sort.create(""field"",Direction.ASC); Fetch fetch = new Fetch().field(""id"",new Fetch().field(""refAttr"")); Query q = Query.builder().setOperator(Operator.MATCHES).setValue(""value"").build(); org.molgenis.data.Query<Entity> findAllQuery = mock(org.molgenis.data.Query.class); org.molgenis.data.Sort dataSort = mock(org.molgenis.data.Sort.class); org.molgenis.data.Query<Entity> findQuery = new QueryImpl<>(findAllQuery); findQuery.fetch(fetch); findQuery.offset(10); findQuery.pageSize(10); findQuery.sort(dataSort); org.molgenis.data.Query<Entity> countQuery = new QueryImpl<>(findAllQuery); countQuery.offset(0); countQuery.pageSize(Integer.MAX_VALUE); when(repository.findAll(findQuery)).thenReturn(Stream.of(entity1,entity2)); when(repository.count(countQuery)).thenReturn(100L); when(queryMapperV3.map(q,repository)).thenReturn(findAllQuery).thenReturn(countQuery); when(sortMapperV3.map(sort)).thenReturn(dataSort); when(metaDataService.getRepository(entityTypeId)).thenReturn(Optional.of(repository)); Entities actual = dataServiceV3Impl.findAll(entityTypeId,q,filter,expand,sort,10,1']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }']","['public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(""Test""); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }']","['public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n}', 'public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n    testString = ""Test"";\n}', 'public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n    String test = ""Test"";\n}', 'public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n    testString = testString;\n}', 'public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n    testString = testString;\n    testString = ""Test"";\n}', 'public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n    String test = testString;\n}', 'public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n    testString = ""Test"";\n    String test = testString;\n}', 'public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n    String test = ""Test"";\n    testString = test;\n}', 'public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n    testString = ""Test"";\n    String test = testString;\n    test = ""Test"";\n}', 'public void testPublishWithNullVideoTitle() { \n    String testString = ""Test""; \n    byte[] testBytes = {}; \n    when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); \n    when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); \n    Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); \n    String result = (String) response.getEntity(); \n    assertEquals(response.getStatusInfo(),Response.Status.OK); \n    assertEquals(result,""Test""); \n    String test = testString;\n    testString = test;\n    test = ""Test"";\n}']","['public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result,""Test""); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"",""Test"",null); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key, testString,inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream)).thenReturn(testBytes); when(facebookService.publishToFacebook(any(byte[].class),any(String.class),any(String.class),any(String.class),any(String.class))).thenReturn(testString); Response response = resource.publish(key,""Test"",inputStream,contentDisposition,""photo"", testString,""Test""); String result = (String) response.getEntity(); assertEquals(response.getStatusInfo(),Response.Status.OK); assertEquals(result, testString); }', 'public void testPublishWithNullVideoTitle() { String testString = ""Test""; byte[] testBytes = {}; when(urlService.inputStreamToByteArray(inputStream']",False,True,False,False,False,False,False,False,0.03465632267587385,0.0,0.041974314064543494,0.07384908158620777
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new HashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new LinkedHashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new TreeSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new HashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new LinkedHashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new TreeSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new HashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new LinkedHashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new TreeSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new HashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }']","['public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new HashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new HashSet<Role>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new LinkedHashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new LinkedHashSet<Role>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new TreeSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new TreeSet<Role>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new HashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new LinkedHashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new TreeSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { notNull(project,""project""); final Set<Role> result = new HashSet<>(); final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }']","['public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final HashSet<Role> result = new HashSet<>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return result; \n}', 'public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final Set<Role> result = new HashSet<>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return result; \n}', 'public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final HashSet<Role> result = new HashSet<Role>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return result; \n}', 'public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final HashSet<Role> result = new HashSet<>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return new HashSet<>(result); \n}', 'public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final HashSet<Role> result = new HashSet<>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return result.stream().collect(Collectors.toSet()); \n}', 'public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final HashSet<Role> result = new HashSet<>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return new HashSet<>(result.stream().collect(Collectors.toSet())); \n}', 'public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final HashSet<Role> result = new HashSet<>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return result.stream().collect(Collectors.toSet()); \n}', 'public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final Set<Role> result = new HashSet<>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return result; \n}', 'public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final HashSet<Role> result = new HashSet<>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return new HashSet<>(result); \n}', 'public Set<Role> getRoles(final Project project) { \n    notNull(project,""project""); \n    final HashSet<Role> result = new HashSet<>(); \n    final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); \n    for (String roleUri : roles.getRoles()) { \n        final Role role = restTemplate.getForObject(roleUri,Role.class); \n        role.setUri(roleUri); \n        result.add(role); \n    } \n    return result.stream().collect(Collectors.toSet()); \n}']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); executedLow.getTime().getTime() - executedHigh.getTime().getTime(); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); System.out.println(executedLow.getTime().getTime() - executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); System.out.println(""executedLow: {}"",executedLow.getTime().getTime()); System.out.println(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""executedLow: {}"",executedLow.getTime().getTime()); System.out.println(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); System.out.println(""exec difference:']","['public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); assertNotNull(executedHigh); assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); assertNotNull(executedLow); assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime());  assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CommandContext ctxCMD = new CommandContext(); CountDownAsyncJobListener countDownListener = configureListener(2); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executor']","['public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    assertNotNull(executedLow); \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CommandContext ctxCMD = new CommandContext(); \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    assertNotNull(executedHigh); \n    assertEquals(""high priority"",executedHigh.getKey());']",[],False,False,False,False,False,False,False,False,0.32748863486119234,0.31790331568401053,0.31790331568401053,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']","['public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']","['public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if(keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if(keySet != null) { } assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if(keySet != null) { assertNotNull(keySetDto); } assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if(keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); } assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if(keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if(keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); } assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if(keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); } assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if(keySet != null) { assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); } }']","['public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] encryptionKey = { 1 }; final byte[] authenthicationKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); assertNotNull(keySetDto); assertNotNull(keySetDto.getAuthenticationKey()); assertNotNull(keySetDto.getEncryptionKey()); assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],key']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { disconnect(channel); } catch (Exception e) { } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { try { disconnect(channel); } catch (Exception e) { } } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { if(channel != null) { disconnect(channel); } } catch (Exception e) { } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { try { disconnect(channel); } catch (Exception e) { throw e; } } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { if(channel != null) { disconnect(channel); } } catch (Exception e) { throw new IOException(e); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { try { disconnect(channel); } catch (Exception e) { throw new IOException(e); } } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { disconnect(channel); } catch (Exception e) { throw new IOException(e); } } } }; }']","['public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { disconnect(channel); } catch (Exception e) { } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { try { disconnect(channel); } catch (Exception e) { } } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { if(channel != null) { disconnect(channel); } } catch (Exception e) { } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { try { disconnect(channel); } catch (Exception e) { throw new IOException(e); } } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { if(channel != null) { disconnect(channel); } } catch (Exception e) { throw new IOException(e); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if(channel != null) { try { disconnect(channel); } catch (Exception e) { } } } throw new IOException(); } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { if(channel != null) { disconnect(channel); } } catch (Exception e) { throw new IOException(); } } } }; }']","['public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { disconnect(channel); } catch (Exception e) { } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } catch (Exception e) { } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } catch (Exception e) { throw e; } finally { disconnect(channel); } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { disconnect(channel); } catch (Exception e) { throw new IOException(e); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { if (channel != null) { try { disconnect(channel); } catch (Exception e) { } } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } catch (Exception e) { throw new IOException(e); } finally { if (channel != null) { disconnect(channel); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } finally { try { if (channel != null) { disconnect(channel); } } catch (Exception e) { throw new IOException(e); } } } }; }', 'public FSDataInputStream open(Path f,int bufferSize) throws IOException { Path workDir; ChannelSftp channel = connect(); try { workDir = new Path(channel.pwd()); } catch (SftpException e) { throw new IOException(e); } Path absolute = makeAbsolute(workDir,f); FileStatus fileStat = getFileStatus(channel,absolute); if (fileStat.isDirectory()) { disconnect(channel); throw new IOException(String.format(E_PATH_DIR,f)); } try { absolute = new Path(""/"",channel.realpath(absolute.toUri().getPath())); } catch (SftpException e) { throw new IOException(e); } return new FSDataInputStream(new SFTPInputStream(channel,absolute,statistics)) { @Override public void close() throws IOException { try { super.close(); } catch (Exception e) { } finally { try { if (channel != null) { disconnect(channel); } } catch (Exception e) { } } } }; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),Ds3DocSpecEmptyImpl.getInstance()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),Ds3DocSpecEmptyImpl.getInstance()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),Ds3DocSpecEmptyImpl.getInstance()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),Ds3DocSpecEmptyImpl.getInstance()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),Ds3DocSpecEmptyImpl.getInstance()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl(ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl(ImmutableMap.of(),ImmutableMap.of(""a"", ""b""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl(ImmutableMap.of(""a"", ""b""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl(ImmutableMap.of(""a"", ""b""),ImmutableMap.of(""c"", ""d""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl(ImmutableMap.of(""a"", ""b""),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl(ImmutableMap.of(),ImmutableMap.of(""a"", ""b""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl(ImmutableMap.of(),ImmutableMap.of(""c"", ""d""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(""key"", ""value""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(""key"", ""value""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of(""key"", ""value""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),ImmutableMap.of())); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(ImmutableMap.of(),ImmutableMap.of(""key"", ""value""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecImpl(Ds3DocSpecEmptyImplImmutableMap.of(),ImmutableMap.of(""key"", ""value""))); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }']","['public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Ds3DocSpecEmptyImpl ds3DocSpecEmptyImpl = new Ds3DocSpecEmptyImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),ds3DocSpecEmptyImpl); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Ds3DocSpecEmptyImpl ds3DocSpecEmptyImpl = new Ds3DocSpecEmptyImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),ds3DocSpecEmptyImpl); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Ds3DocSpecEmptyImpl ds3DocSpecEmptyImpl = new Ds3DocSpecEmptyImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),ds3DocSpecEmptyImpl); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Ds3DocSpecEmptyImpl ds3DocSpecEmptyImpl = new Ds3DocSpecEmptyImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),ds3DocSpecEmptyImpl); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Ds3DocSpecEmptyImpl ds3DocSpecEmptyImpl = new Ds3DocSpecEmptyImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),ds3DocSpecEmptyImpl); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Ds3DocSpecEmptyImpl ds3DocSpecEmptyImpl = new Ds3DocSpecEmptyImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),ds3DocSpecEmptyImpl); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Ds3DocSpecEmptyImpl ds3DocSpecEmptyImpl = new Ds3DocSpecEmptyImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),ds3DocSpecEmptyImpl); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Ds3DocSpecEmptyImpl ds3DocSpecEmptyImpl = new Ds3DocSpecEmptyImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),ds3DocSpecEmptyImpl); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Ds3DocSpecEmptyImpl ds3DocSpecEmptyImpl = new Ds3DocSpecEmptyImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),ds3DocSpecEmptyImpl); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3_request*"" + "" request,ds3_list_bucket_result_response** response);""; assertEquals(expectedOutput,output); }', 'public void testGenerateAmazonS3GetBucketRequestPrototype() throws IOException,TemplateModelException { final Map<String,Object> testMap = new HashMap<>(); final TestFileUtilsImpl fileUtils = new TestFileUtilsImpl(); final Request requestEntry = RequestConverter.toRequest(Ds3ModelFixtures.getBucketRequest(),new Ds3DocSpecEmptyImpl()); testMap.put(""requestEntry"",requestEntry); final CCodeGenerator codeGenerator = new CCodeGenerator(); codeGenerator.processTemplate(testMap,""header-templates/RequestPrototype.ftl"",fileUtils.getOutputStream()); final ByteArrayOutputStream bstream = (ByteArrayOutputStream) fileUtils.getOutputStream(); final String output = new String(bstream.toByteArray()); final String expectedOutput = ""LIBRARY_API ds3_error* ds3_get_bucket(const ds3_client* client,const ds3']",True,True,False,True,False,False,False,False,0.0,0.0,0.5470565122942372,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m false); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }']","['private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m false); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m, false); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m, (false)); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m, false); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m, (false)); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m, false); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m, (false)); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m, false); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m, (false)); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m, false); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }']","['private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { e.printStackTrace(); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = compress(mirroredImage,85); try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e) { e.printStackTrace(); } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = compress(mirroredImage,85); inputStream.close(); return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { result = compress(mirroredImage,70); } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = compress(mirroredImage,70); try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { try { result = compress(mirroredImage,70); } catch (OutOfMemoryError e2) { result = compress(mirroredImage,50); } } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = compress(mirroredImage,85); return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = null; try { result = compress(mirroredImage,85); } catch (OutOfMemoryError e) { result = null; } try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } return result; }', 'private byte[] mirrorImage(byte[] data) { ByteArrayInputStream inputStream = new ByteArrayInputStream(data); Matrix m = new Matrix(); Bitmap photo = BitmapFactory.decodeStream(inputStream); m.preScale(-1,1); Bitmap mirroredImage = Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),m,true); byte[] result = compress(mirroredImage,85); try { inputStream.close(); } catch (IOException e) { e2.printStackTrace(); } return result; }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.4621748361306368,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" not supported by proxyRequest method""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Request method "" + method + "" not supported by proxyRequest""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" not supported by proxyRequest method: "" + request.getUriInfo().getRequestUri().getPath()); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Request method "" + method + "" not supported by proxyRequest method: "" + request.getUriInfo().getRequestUri().getPath()); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" not supported by proxyRequest: "" + request.getUriInfo().getRequestUri()); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Request method "" + method + "" not supported by proxyRequest: "" + request.getUriInfo().getRequestUri()); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" not supported by proxyRequest method: "" + request.getUriInfo().getRequestUri().getPath() + "" with request method "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Request method "" + method + "" not supported by proxyRequest method: "" + request.getUriInfo().getRequestUri().getPath() + "" with request method "" + method); } return proxiedResponse; }']","['private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" is not supported""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Unsupported method: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(method + "" method is not supported""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported.Method: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Unsupported method "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" not supported""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Request method "" + method + "" is not supported""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Unsupported request method: "" + method); } return proxiedResponse; }']","['private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method + "". Only GET,PUT,POST,DELETE are supported""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" is not supported""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method + "". supported methods are GET,PUT,POST,DELETE""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" not supported""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method + "". Only the methods GET,PUT,POST,DELETE are supported by the proxy""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" is not supported by the proxy""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method not supported: "" + method + "". The proxy only supports GET,PUT,POST,DELETE methods""); } return proxiedResponse; }', 'private CloseableHttpResponse proxyRequest(String appUrl,ContainerRequestContext request) throws IOException { String method = request.getMethod(); CloseableHttpResponse proxiedResponse; String requestURI = request.getUriInfo().getRequestUri().getPath(); switch(method) { case ""GET"": HttpGet httpGet = new HttpGet(appUrl + requestURI); proxiedResponse = httpclient.execute(httpGet); break; case ""PUT"": HttpPut httpPut = new HttpPut(appUrl + requestURI); httpPut.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPut.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPut); break; case ""POST"": HttpPost httpPost = new HttpPost(appUrl + requestURI); httpPost.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); httpPost.setEntity(new InputStreamEntity(request.getEntityStream())); proxiedResponse = httpclient.execute(httpPost); break; case ""DELETE"": HttpDelete httpDelete = new HttpDelete(appUrl + requestURI); httpDelete.setHeader(HTTP.CONTENT_TYPE,request.getHeaderString(""Content-Type"")); proxiedResponse = httpclient.execute(httpDelete); break; default: throw new IllegalStateException(""Method "" + method + "" not supported by proxy""); } return proxiedResponse; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }']","['public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies().size()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }']","['public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(someContainer).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).size().isEqualTo(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).size().isEqualTo(someContainerSize); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(someContainerSize); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).size().isEqualTo(someContainerSize); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(someContainer).hasSize(someContainerSize); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(someContainerSize); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(someContainer).hasSize(4); }); }']","['public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator = new ClasspathDepsAfterDecorator(new BaseMavenCompiler()); CompilationRequest req = new DefaultCompilationRequest(mavenRepo.toAbsolutePath().toString(),info,new String[] { MavenCLIArgs.INSTALL,MavenCLIArgs.ALTERNATE_USER_SETTINGS + alternateSettingsAbsPath },Boolean.FALSE); CompilationResponse res = decorator.compile(req); SoftAssertions.assertSoftly(softly -> { softly.assertThat(res.isSuccessful()).isTrue(); softly.assertThat(res.getDependencies()).hasSize(4); }); }', 'public void compileTest() { ClasspathDepsAfterDecorator decorator =']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().']","['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().']","['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    // Remove the print\n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}']","['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest,long compilationStartTimeNs,RequestStatistics requestStatistics) throws IllegalStateException { \n    List<String> columnNames = new ArrayList<>(); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e,columnNames,columnTypes,row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]),columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema,rows); \n    brokerResponse.setResultTable(resultTable); \n    long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }']","['private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); return; } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); throw e; } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { throw e; } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); throw new IOException(e); } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); throw new URISyntaxException(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { throw new IOException(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { throw new URISyntaxException(e.getMessage(),e); } }']","['private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); try { remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }']","['private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } try { GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); } catch (Exception e) { Activator.logError(e.getMessage(),e); } GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } try { GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); } catch (Exception e) { Activator.logError(e.getMessage(),e); } GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } try { GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); } catch (Exception e) { Activator.logError(e.getMessage(),e); } GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } try { GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); } catch (Exception e) { Activator.logError(e.getMessage(),e); } remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } try { GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); } catch (Exception e) { Activator.logError(e.getMessage(),e); } config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } try { GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); } catch (Exception e) { Activator.logError(e.getMessage(),e); } }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } try { GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); } catch (Exception e) { Activator.logError(e.getMessage(),e); } try { GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); } catch (Exception e) { Activator.logError(e.getMessage(),e); } GerritUtil.configureFetchNotes(remoteConfig); GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } try { GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); } catch (Exception e) { Activator.logError(e.getMessage(),e); } try { GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); } catch (Exception e) { Activator.logError(e.getMessage(),e); } try { GerritUtil.configureFetchNotes(remoteConfig); } catch (Exception e) { Activator.logError(e.getMessage(),e); } GerritUtil.setCreateChangeId(config); remoteConfig.update(config); config.save(); }', 'private void configureGerrit(Repository repository) throws URISyntaxException, IOException { RemoteConfig remoteConfig; StoredConfig config = repository.getConfig(); remoteConfig = GerritUtil.findRemoteConfig(config,remoteName); if (remoteConfig == null) { return; } try { GerritUtil.configurePushURI(remoteConfig,new URIish(uri)); } catch (Exception e) { Activator.logError(e.getMessage(),e); } try { GerritUtil.configurePushRefSpec(remoteConfig,Constants.MASTER); } catch (Exception e) { Activator.logError(e.getMessage(),e); } try { GerritUtil.configureFetchNotes(remoteConfig); } catch (Exception e) { Activator.logError(e.getMessage(),e); } try { GerritUtil.setCreateChangeId(config); } catch (Exception e) { Activator.logError(e.getMessage(),e); } remoteConfig.update(config); config.save(); }']",True,False,False,True,False,False,False,False,0.0,0.48405751151242604,0.12236627288257229,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).providerclass(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).providerclass(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).providerclass(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).providerclass(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }']","['public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }']","['public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); EchoApi EchoApi = new EchoApi(); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); EchoApi EchoApi = new EchoApi(); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }']","['public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""); }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""; }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""; }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""; }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource...""); OAuthRequest request = new OAuthRequest(Verb.POST,PROTECTED_RESOURCE_URL); request.addBodyParameter(""content"",""your valid activity streams xml""); service.signRequest(token,request); Response response = request.send(); System.out.println(); System.out.println(response.getCode()); System.out.println(response.getBody()); System.out.println(); System.out.println(""Thats it man! Go and build something awesome with Scribe! :)""; }', 'public static void main(String[] args) { final String secret = ""your secret""; final String key = ""your key""; Token token = new Token("""",""""); OAuthService service = new ServiceBuilder().apiKey(key).apiSecret(secret).provider(EchoApi.class).build(); System.out.println(""Now we\'re going to access a protected resource']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Exception { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,RuntimeException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Exception { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Throwable { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Error { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,RuntimeException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Exception { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Throwable { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }']","['public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Exception { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,RuntimeException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Exception,RuntimeException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,RuntimeException,Exception { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Exception { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException,Exception,RuntimeException,RuntimeException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }']","['public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws ProtocolAdapterException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws OsgpException, ProtocolAdapterException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws ProtocolAdapterException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n            return smsDetailsResponse; \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws OsgpException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws ProtocolAdapterException, OsgpException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n            return smsDetailsResponse; \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws ProtocolAdapterException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws OsgpException, ProtocolAdapterException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws ProtocolAdapterException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n            return smsDetailsResponse; \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n            return smsDetailsResponse; \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws OsgpException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws ProtocolAdapterException, OsgpException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n            return smsDetailsResponse; \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws ProtocolAdapterException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws OsgpException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n            return smsDetailsResponse; \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws ProtocolAdapterException, OsgpException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws ProtocolAdapterException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n            return smsDetailsResponse; \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest) throws OsgpException { \n    final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); \n    SmsDetails smsDetailsResponse = null; \n    final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(), device.getIccId()); \n    final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); \n    for (final SmsMessageType smsMessageType : smsMessagesTypes) { \n        if (smsMessageType.getSmsMsgId().longValue() == smsDetailsRequest.getSmsMsgId().longValue()) { \n            smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(), smsMessageType.getSmsMsgId(), smsMessageType.getStatus(), smsMessageType.getSmsMsgAttemptStatus(), smsMessageType.getMsgType()); \n        } \n    } \n    return smsDetailsResponse; \n}', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata, final SmsDetails smsDetailsRequest']","['public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }', 'public SmsDetails getSmsDetails(final DlmsDeviceMessageMetadata messageMetadata,final SmsDetails smsDetailsRequest) throws OsgpException { final DlmsDevice device = this.domainHelperService.findDlmsDevice(messageMetadata); SmsDetails smsDetailsResponse = null; final GetSMSDetailsResponse response = this.smsClient.getSMSDetails(smsDetailsRequest.getSmsMsgId(),device.getIccId()); final List<SmsMessageType> smsMessagesTypes = response.getSmsMessages().getSmsMessage(); for (final SmsMessageType smsMessageType : smsMessagesTypes) { if (smsMessageType.getSmsMsgId() == smsDetailsRequest.getSmsMsgId().longValue()) { smsDetailsResponse = new SmsDetails(device.getDeviceIdentification(),smsMessageType.getSmsMsgId(),smsMessageType.getStatus(),smsMessageType.getSmsMsgAttemptStatus(),smsMessageType.getMsgType()); } } return smsDetailsResponse; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move == getParameters().getOperation() && getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else if (getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (getParameters().getOperation().equals(ImageOperation.Move)) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (getParameters().getOperation() == ImageOperation.Move && getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else if (getParameters().getOperation() == ImageOperation.Move && getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else if (getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else if (getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (getParameters().getOperation().equals(ImageOperation.Move)) { jobProperties.put(""action"",""Moving""); } else if (getParameters().getOperation().equals(ImageOperation.Move)) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (getParameters().getOperation() == ImageOperation.Move && getParameters().getOperation() == ImageOperation.Move && getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName()); if (getParameters().getOperation().equals(ImageOperation.Move)) { jobProperties.put(""action"",""Moving""); } else if (getParameters().getOperation() == ImageOperation.Move) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }']","['public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", getStorageDomainName() == null ? null : getStorageDomainName().toString()); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", getStorageDomainName() == null ? """" : getStorageDomainName().toString()); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (getStorageDomainName() == null) { jobProperties.put(""targetsd"", null); } else { jobProperties.put(""targetsd"", getStorageDomainName().toString()); } if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (getStorageDomainName() == null) { jobProperties.put(""targetsd"", """"); } else { jobProperties.put(""targetsd"", getStorageDomainName().toString()); } if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", String.valueOf(getStorageDomainName())); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", getStorageDomainName() == null ? """" : getStorageDomainName()); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (getStorageDomainName() == null) { jobProperties.put(""targetsd"", null); } else { jobProperties.put(""targetsd"", String.valueOf(getStorageDomainName())); } if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", getStorageDomainName() == null ? null : String.valueOf(getStorageDomainName())); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", getStorageDomainName() == null ? """" : String.valueOf(getStorageDomainName())); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (getStorageDomainName() == null) { jobProperties.put(""targetsd"", """"); } else { jobProperties.put(""targetsd"", String.valueOf(getStorageDomainName())); } if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }']","['public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"",getStorageDomainName() == null ? null : getStorageDomainName().toString()); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", String.valueOf(getStorageDomainName())); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (getStorageDomainName() == null) { jobProperties.put(""targetsd"", null); } else { jobProperties.put(""targetsd"", getStorageDomainName()); } if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", getStorageDomainName() == null ? """" : getStorageDomainName()); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (getStorageDomainName() == null) { jobProperties.put(""targetsd"", StringUtils.EMPTY); } else { jobProperties.put(""targetsd"", getStorageDomainName()); } if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", getStorageDomainName() == null ? """" : getStorageDomainName().toString()); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (getStorageDomainName().toString() == null) { jobProperties.put(""targetsd"", null); } else { jobProperties.put(""targetsd"", getStorageDomainName()); } if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", getStorageDomainName() == null ? null : String.valueOf(getStorageDomainName())); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); if (getStorageDomainName() == null) { jobProperties.put(""targetsd"", null); } else { jobProperties.put(""targetsd"", String.valueOf(getStorageDomainName())); } if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }', 'public Map<String,String> getJobMessageProperties() { String sourceSDName = StringUtils.EMPTY; List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue()); if (storageDomains.size() > 0) { sourceSDName = storageDomains.get(0).getstorage_name(); } if (jobProperties == null) { jobProperties = super.getJobMessageProperties(); jobProperties.put(""sourcesd"",sourceSDName); jobProperties.put(""targetsd"", getStorageDomainName() == null ? """" : String.valueOf(getStorageDomainName())); if (ImageOperation.Move.equals(getParameters().getOperation())) { jobProperties.put(""action"",""Moving""); } else { jobProperties.put(""action"",""Copying""); } } return jobProperties; }']",[],False,False,False,False,False,False,False,False,0.5368000659392099,0.528973574615124,0.5291497411152392,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return List.of(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(0); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = new ArrayList<>(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = Collections.emptyList(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = List.of(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = new ArrayList<SnapshotInfo>(0); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }']","['public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return List.of(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(0); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = new ArrayList<>(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> list = Collections.emptyList(); return list; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = List.of(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = new ArrayList<>(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> list = new ArrayList<>(); return list; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }']","['public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return List.of(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> infos = new ArrayList<>(); return infos; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = new ArrayList<>(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = List.of(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = Collections.emptyList(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = new ArrayList<SnapshotInfo>(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }']","['public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return List.of(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return Collections.emptyList(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = new ArrayList<>(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { return new ArrayList<SnapshotInfo>(); } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> list = new ArrayList<>(); return list; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = Collections.emptyList(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> empty = List.of(); return empty; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }', 'public List<SnapshotInfo> getSnapshots(long volumeId,DataStoreRole role) { SnapshotDataStoreVO snapshotStore = snapshotStoreDao.findByVolume(volumeId,role); if (snapshotStore == null) { List<SnapshotInfo> list = Collections.emptyList(); return list; } DataStore store = storeMgr.getDataStore(snapshotStore.getDataStoreId(),role); List<SnapshotInfo> infos = new ArrayList<>(); List<SnapshotVO> volSnapShots = snapshotDao.listByVolumeId(volumeId); for (SnapshotVO snapshot : volSnapShots) { SnapshotObject info = SnapshotObject.getSnapshotObject(snapshot,store); infos.add(info); } return infos; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } if (pair.length == 2 && pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (pair.length == 2) { if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else { if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (pair.length == 2 && pair[1].isEmpty()) { pair[1] = args[++i]; if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2 && pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (pair.length == 2) { if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty()) { if (i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }']","['public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0],pair[1],false)) { messageStream.println(); usage(messageStream,true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }']","['public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) pair[1] = args[++i]; if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2 && pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (pair.length == 2) { if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (!parseOption(pair[0], pair[1].isEmpty() && i < args.length - 1 ? args[++i] : pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { pair[1] = pair[1].isEmpty() && i < args.length - 1 ? args[++i] : pair[1]; if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2 && pair[1].isEmpty()) { if (pair[1].isEmpty() && i < args.length - 1) pair[1] = args[++i]; if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (pair.length == 2) { if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { pair[1] = pair[1].isEmpty() && i < args.length - 1 ? args[++i] : pair[1]; if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (pair.length == 2) { if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) pair[1] = args[++i]; if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }', 'public boolean parseOptions(final PrintStream messageStream,final String[] args) { this.messageStream = messageStream; this.argv = args; if (prefix.isEmpty()) { commandLine = callerOptions.getClass().getName(); } for (int i = 0; i < args.length; ++i) { final String arg = args[i]; if (arg.equals(""-h"") || arg.equals(""--help"")) { usage(messageStream,false); return false; } if (arg.equals(""-H"") || arg.equals(""--stdhelp"")) { usage(messageStream,true); return false; } if (arg.equals(""--version"")) { messageStream.println(getVersion()); return false; } final String[] pair = arg.split(""="",2); if (pair.length == 2) { if (pair[1].isEmpty() && i < args.length - 1) { pair[1] = args[++i]; } if (!parseOption(pair[0], pair[1], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (pair.length == 2 && pair[1].isEmpty()) { if (!parseOption(pair[0], args[++i], false)) { messageStream.println(); usage(messageStream, true); return false; } } else if (!parsePositionalArgument(arg)) { messageStream.println(); usage(messageStream,false); return false; } } if (!checkNumArguments()) { messageStream.println(); usage(messageStream,false); return false; } if (!parseChildOptions()) { messageStream.println(); usage(messageStream,false); return false; } return true; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(""typedId must not be null"", typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(""typedId must be not null"", typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(""typedId must not be null"", typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(""Not null"", typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(""Not null typedId"", typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(""typedId must not null"", typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(""typedId not null"", typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }']","['public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }']","['public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotEquals(null,typedId); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); assertNotEquals(null,typedId); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotEquals(null,typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); assertNotNull(typedId); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(null,typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotEquals(null,typedId); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(null,typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotEquals(null,typedId); assertNotEquals(""string"",typedId); assertNotNull(typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(null,typedId); assertNotEquals(""string"",typedId); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotEquals(null,typedId); assertNotNull(typedId); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); }']","['public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(typedId, ""string""); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(typedId, ""string""); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(typedId,""string""); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"",typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(typedId,""string""); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }', 'public void testEquals() { String type = ""someType""; String value = ""someValue""; float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value,type,confidenceLevel); assertNotNull(typedId); assertNotEquals(typedId, ""string""); assertNotEquals(typedId,new TypedId(""otherValue"",type,confidenceLevel)); assertNotEquals(typedId,new TypedId(value,""otherType"",confidenceLevel)); assertNotEquals(typedId,new TypedId(value,type,0.8f)); assertEquals(typedId,new TypedId(value,type,confidenceLevel)); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
